// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UsageProfile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UsageProfile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aseba {
namespace ThymioVPL {

namespace {

const ::google::protobuf::Descriptor* RowAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowAction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RowAction_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DeviceAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MouseAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MouseAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMouseMoveAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMouseMoveAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMouseReleaseAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMouseReleaseAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ButtonDragAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonDragAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionSetDragAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSetDragAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccBlockModeAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccBlockModeAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvancedModeAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvancedModeAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBlockAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBlockAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
struct ActionOneofInstance {
  const ::Aseba::ThymioVPL::RowAction* rowaction_;
  const ::Aseba::ThymioVPL::BlockMouseMoveAction* blockmousemoveaction_;
  const ::Aseba::ThymioVPL::BlockMouseReleaseAction* blockmousereleaseaction_;
  const ::Aseba::ThymioVPL::ButtonDragAction* buttondragaction_;
  const ::Aseba::ThymioVPL::AdvancedModeAction* advancedmodeaction_;
  const ::Aseba::ThymioVPL::AddBlockAction* addblockaction_;
  const ::Aseba::ThymioVPL::ActionSetDragAction* actionsetdragaction_;
  const ::Aseba::ThymioVPL::AccBlockModeAction* accblockmodeaction_;
  const ::Aseba::ThymioVPL::MenuAction* menuaction_;
  const ::Aseba::ThymioVPL::MouseAction* mouseaction_;
  const ::Aseba::ThymioVPL::DeviceAction* deviceaction_;
}* Action_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Usage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Usage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MouseButton_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MouseActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MenuEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UsageProfile_2eproto() {
  protobuf_AddDesc_UsageProfile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UsageProfile.proto");
  GOOGLE_CHECK(file != NULL);
  RowAction_descriptor_ = file->message_type(0);
  static const int RowAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowAction, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowAction, type_),
  };
  RowAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowAction_descriptor_,
      RowAction::default_instance_,
      RowAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowAction));
  RowAction_ActionType_descriptor_ = RowAction_descriptor_->enum_type(0);
  DeviceAction_descriptor_ = file->message_type(1);
  static const int DeviceAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAction, variable_),
  };
  DeviceAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceAction_descriptor_,
      DeviceAction::default_instance_,
      DeviceAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceAction));
  MouseAction_descriptor_ = file->message_type(2);
  static const int MouseAction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, row_),
  };
  MouseAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MouseAction_descriptor_,
      MouseAction::default_instance_,
      MouseAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MouseAction));
  BlockMouseMoveAction_descriptor_ = file->message_type(3);
  static const int BlockMouseMoveAction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseMoveAction, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseMoveAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseMoveAction, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseMoveAction, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseMoveAction, y_),
  };
  BlockMouseMoveAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMouseMoveAction_descriptor_,
      BlockMouseMoveAction::default_instance_,
      BlockMouseMoveAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseMoveAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseMoveAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMouseMoveAction));
  BlockMouseReleaseAction_descriptor_ = file->message_type(4);
  static const int BlockMouseReleaseAction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseReleaseAction, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseReleaseAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseReleaseAction, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseReleaseAction, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseReleaseAction, y_),
  };
  BlockMouseReleaseAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMouseReleaseAction_descriptor_,
      BlockMouseReleaseAction::default_instance_,
      BlockMouseReleaseAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseReleaseAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMouseReleaseAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMouseReleaseAction));
  ButtonDragAction_descriptor_ = file->message_type(5);
  static const int ButtonDragAction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonDragAction, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonDragAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonDragAction, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonDragAction, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonDragAction, y_),
  };
  ButtonDragAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonDragAction_descriptor_,
      ButtonDragAction::default_instance_,
      ButtonDragAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonDragAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonDragAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonDragAction));
  ActionSetDragAction_descriptor_ = file->message_type(6);
  static const int ActionSetDragAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSetDragAction, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSetDragAction, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSetDragAction, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSetDragAction, y_),
  };
  ActionSetDragAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionSetDragAction_descriptor_,
      ActionSetDragAction::default_instance_,
      ActionSetDragAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSetDragAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSetDragAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionSetDragAction));
  AccBlockModeAction_descriptor_ = file->message_type(7);
  static const int AccBlockModeAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, blocktype_),
  };
  AccBlockModeAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccBlockModeAction_descriptor_,
      AccBlockModeAction::default_instance_,
      AccBlockModeAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccBlockModeAction));
  AdvancedModeAction_descriptor_ = file->message_type(8);
  static const int AdvancedModeAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedModeAction, isadvanced_),
  };
  AdvancedModeAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvancedModeAction_descriptor_,
      AdvancedModeAction::default_instance_,
      AdvancedModeAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedModeAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedModeAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvancedModeAction));
  AddBlockAction_descriptor_ = file->message_type(9);
  static const int AddBlockAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, row_),
  };
  AddBlockAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBlockAction_descriptor_,
      AddBlockAction::default_instance_,
      AddBlockAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBlockAction));
  MenuAction_descriptor_ = file->message_type(10);
  static const int MenuAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuAction, entry_),
  };
  MenuAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuAction_descriptor_,
      MenuAction::default_instance_,
      MenuAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuAction));
  Action_descriptor_ = file->message_type(11);
  static const int Action_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, programstateasxml_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, rowaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, blockmousemoveaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, blockmousereleaseaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, buttondragaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, advancedmodeaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, addblockaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, actionsetdragaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, accblockmodeaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, menuaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, mouseaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, deviceaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, actual_action_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      Action_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  Action_ActionType_descriptor_ = Action_descriptor_->enum_type(0);
  Usage_descriptor_ = file->message_type(12);
  static const int Usage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, action_),
  };
  Usage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Usage_descriptor_,
      Usage::default_instance_,
      Usage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Usage));
  MouseButton_descriptor_ = file->enum_type(0);
  BlockType_descriptor_ = file->enum_type(1);
  MouseActionType_descriptor_ = file->enum_type(2);
  MenuEntry_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UsageProfile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowAction_descriptor_, &RowAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceAction_descriptor_, &DeviceAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MouseAction_descriptor_, &MouseAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMouseMoveAction_descriptor_, &BlockMouseMoveAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMouseReleaseAction_descriptor_, &BlockMouseReleaseAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonDragAction_descriptor_, &ButtonDragAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionSetDragAction_descriptor_, &ActionSetDragAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccBlockModeAction_descriptor_, &AccBlockModeAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvancedModeAction_descriptor_, &AdvancedModeAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBlockAction_descriptor_, &AddBlockAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuAction_descriptor_, &MenuAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Usage_descriptor_, &Usage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UsageProfile_2eproto() {
  delete RowAction::default_instance_;
  delete RowAction_reflection_;
  delete DeviceAction::default_instance_;
  delete DeviceAction_reflection_;
  delete MouseAction::default_instance_;
  delete MouseAction_reflection_;
  delete BlockMouseMoveAction::default_instance_;
  delete BlockMouseMoveAction_reflection_;
  delete BlockMouseReleaseAction::default_instance_;
  delete BlockMouseReleaseAction_reflection_;
  delete ButtonDragAction::default_instance_;
  delete ButtonDragAction_reflection_;
  delete ActionSetDragAction::default_instance_;
  delete ActionSetDragAction_reflection_;
  delete AccBlockModeAction::default_instance_;
  delete AccBlockModeAction_reflection_;
  delete AdvancedModeAction::default_instance_;
  delete AdvancedModeAction_reflection_;
  delete AddBlockAction::default_instance_;
  delete AddBlockAction_reflection_;
  delete MenuAction::default_instance_;
  delete MenuAction_reflection_;
  delete Action::default_instance_;
  delete Action_default_oneof_instance_;
  delete Action_reflection_;
  delete Usage::default_instance_;
  delete Usage_reflection_;
}

void protobuf_AddDesc_UsageProfile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022UsageProfile.proto\022\017Aseba.ThymioVPL\"s\n"
    "\tRowAction\022\013\n\003row\030\001 \001(\005\0223\n\004type\030\002 \002(\0162%."
    "Aseba.ThymioVPL.RowAction.ActionType\"$\n\n"
    "ActionType\022\n\n\006REMOVE\020\001\022\n\n\006INSERT\020\002\"0\n\014De"
    "viceAction\022\n\n\002id\030\001 \002(\005\022\024\n\010variable\030\002 \003(\005"
    "B\002\020\001\"\272\001\n\013MouseAction\022.\n\004type\030\001 \002(\0162 .Ase"
    "ba.ThymioVPL.MouseActionType\022,\n\006button\030\002"
    " \002(\0162\034.Aseba.ThymioVPL.MouseButton\022\014\n\004xP"
    "os\030\003 \001(\001\022\014\n\004yPos\030\004 \001(\001\022\021\n\tblockName\030\005 \001("
    "\t\022\021\n\tblockType\030\006 \001(\t\022\013\n\003row\030\007 \001(\005\"\200\001\n\024Bl"
    "ockMouseMoveAction\022,\n\006button\030\001 \002(\0162\034.Ase"
    "ba.ThymioVPL.MouseButton\022\021\n\tblockName\030\002 "
    "\001(\t\022\021\n\tblockType\030\003 \001(\t\022\t\n\001x\030\004 \001(\001\022\t\n\001y\030\005"
    " \001(\001\"\203\001\n\027BlockMouseReleaseAction\022,\n\006butt"
    "on\030\001 \002(\0162\034.Aseba.ThymioVPL.MouseButton\022\021"
    "\n\tblockName\030\002 \001(\t\022\021\n\tblockType\030\003 \001(\t\022\t\n\001"
    "x\030\004 \001(\001\022\t\n\001y\030\005 \001(\001\"|\n\020ButtonDragAction\022,"
    "\n\006button\030\001 \001(\0162\034.Aseba.ThymioVPL.MouseBu"
    "tton\022\021\n\tblockName\030\002 \001(\t\022\021\n\tblockType\030\003 \001"
    "(\t\022\t\n\001x\030\004 \001(\001\022\t\n\001y\030\005 \001(\001\"f\n\023ActionSetDra"
    "gAction\022,\n\006button\030\001 \001(\0162\034.Aseba.ThymioVP"
    "L.MouseButton\022\013\n\003row\030\002 \001(\005\022\t\n\001x\030\003 \001(\001\022\t\n"
    "\001y\030\004 \001(\001\"H\n\022AccBlockModeAction\022\014\n\004mode\030\001"
    " \002(\005\022\021\n\tblockName\030\002 \001(\t\022\021\n\tblockType\030\003 \001"
    "(\t\"(\n\022AdvancedModeAction\022\022\n\nisAdvanced\030\001"
    " \002(\010\"m\n\016AddBlockAction\022(\n\004type\030\001 \002(\0162\032.A"
    "seba.ThymioVPL.BlockType\022\021\n\tblockName\030\002 "
    "\001(\t\022\021\n\tblockType\030\003 \001(\t\022\013\n\003row\030\004 \001(\005\"7\n\nM"
    "enuAction\022)\n\005entry\030\001 \002(\0162\032.Aseba.ThymioV"
    "PL.MenuEntry\"\341\007\n\006Action\0220\n\004type\030\001 \002(\0162\"."
    "Aseba.ThymioVPL.Action.ActionType\022\031\n\021pro"
    "gramStateAsXml\030\002 \001(\t\022/\n\trowAction\030\n \001(\0132"
    "\032.Aseba.ThymioVPL.RowActionH\000\022E\n\024blockMo"
    "useMoveAction\030\013 \001(\0132%.Aseba.ThymioVPL.Bl"
    "ockMouseMoveActionH\000\022K\n\027blockMouseReleas"
    "eAction\030\014 \001(\0132(.Aseba.ThymioVPL.BlockMou"
    "seReleaseActionH\000\022=\n\020buttonDragAction\030\r "
    "\001(\0132!.Aseba.ThymioVPL.ButtonDragActionH\000"
    "\022A\n\022advancedModeAction\030\016 \001(\0132#.Aseba.Thy"
    "mioVPL.AdvancedModeActionH\000\0229\n\016addBlockA"
    "ction\030\017 \001(\0132\037.Aseba.ThymioVPL.AddBlockAc"
    "tionH\000\022C\n\023actionSetDragAction\030\020 \001(\0132$.As"
    "eba.ThymioVPL.ActionSetDragActionH\000\022A\n\022a"
    "ccBlockModeAction\030\021 \001(\0132#.Aseba.ThymioVP"
    "L.AccBlockModeActionH\000\0221\n\nmenuAction\030\022 \001"
    "(\0132\033.Aseba.ThymioVPL.MenuActionH\000\0223\n\013mou"
    "seAction\030\023 \001(\0132\034.Aseba.ThymioVPL.MouseAc"
    "tionH\000\0225\n\014deviceAction\030\024 \001(\0132\035.Aseba.Thy"
    "mioVPL.DeviceActionH\000\"\317\001\n\nActionType\022\007\n\003"
    "ROW\020\001\022\024\n\020BLOCK_MOUSE_MOVE\020\002\022\027\n\023BLOCK_MOU"
    "SE_RELEASE\020\003\022\017\n\013BUTTON_DRAG\020\004\022\021\n\rADVANCE"
    "D_MODE\020\005\022\r\n\tADD_BLOCK\020\006\022\023\n\017ACTION_SET_DR"
    "AG\020\007\022\022\n\016ACC_BLOCK_MODE\020\010\022\010\n\004MENU\020\t\022\020\n\014MO"
    "USE_ACTION\020\n\022\021\n\rDEVICE_ACTION\020\013B\017\n\ractua"
    "l_action\"0\n\005Usage\022\'\n\006action\030\001 \003(\0132\027.Aseb"
    "a.ThymioVPL.Action*6\n\013MouseButton\022\010\n\004LEF"
    "T\020\001\022\n\n\006MIDDLE\020\002\022\t\n\005RIGHT\020\003\022\006\n\002NO\020\004*\"\n\tBl"
    "ockType\022\t\n\005EVENT\020\001\022\n\n\006ACTION\020\002*\200\001\n\017Mouse"
    "ActionType\022\016\n\nMOVE_BLOCK\020\001\022\021\n\rRELEASE_BL"
    "OCK\020\002\022\017\n\013DRAG_BUTTON\020\003\022\023\n\017DRAG_ACTION_SE"
    "T\020\004\022\017\n\013DROP_BUTTON\020\005\022\023\n\017DROP_ACTION_SET\020"
    "\006*{\n\tMenuEntry\022\r\n\tOPEN_HELP\020\001\022\010\n\004SAVE\020\002\022"
    "\013\n\007SAVE_AS\020\003\022\014\n\010NEW_FILE\020\004\022\r\n\tOPEN_FILE\020"
    "\005\022\016\n\nCLOSE_FILE\020\006\022\021\n\rSAVE_SNAPSHOT\020\007\022\010\n\004"
    "STOP\020\010", 2566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UsageProfile.proto", &protobuf_RegisterTypes);
  RowAction::default_instance_ = new RowAction();
  DeviceAction::default_instance_ = new DeviceAction();
  MouseAction::default_instance_ = new MouseAction();
  BlockMouseMoveAction::default_instance_ = new BlockMouseMoveAction();
  BlockMouseReleaseAction::default_instance_ = new BlockMouseReleaseAction();
  ButtonDragAction::default_instance_ = new ButtonDragAction();
  ActionSetDragAction::default_instance_ = new ActionSetDragAction();
  AccBlockModeAction::default_instance_ = new AccBlockModeAction();
  AdvancedModeAction::default_instance_ = new AdvancedModeAction();
  AddBlockAction::default_instance_ = new AddBlockAction();
  MenuAction::default_instance_ = new MenuAction();
  Action::default_instance_ = new Action();
  Action_default_oneof_instance_ = new ActionOneofInstance;
  Usage::default_instance_ = new Usage();
  RowAction::default_instance_->InitAsDefaultInstance();
  DeviceAction::default_instance_->InitAsDefaultInstance();
  MouseAction::default_instance_->InitAsDefaultInstance();
  BlockMouseMoveAction::default_instance_->InitAsDefaultInstance();
  BlockMouseReleaseAction::default_instance_->InitAsDefaultInstance();
  ButtonDragAction::default_instance_->InitAsDefaultInstance();
  ActionSetDragAction::default_instance_->InitAsDefaultInstance();
  AccBlockModeAction::default_instance_->InitAsDefaultInstance();
  AdvancedModeAction::default_instance_->InitAsDefaultInstance();
  AddBlockAction::default_instance_->InitAsDefaultInstance();
  MenuAction::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  Usage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UsageProfile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UsageProfile_2eproto {
  StaticDescriptorInitializer_UsageProfile_2eproto() {
    protobuf_AddDesc_UsageProfile_2eproto();
  }
} static_descriptor_initializer_UsageProfile_2eproto_;
const ::google::protobuf::EnumDescriptor* MouseButton_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MouseButton_descriptor_;
}
bool MouseButton_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BlockType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockType_descriptor_;
}
bool BlockType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MouseActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MouseActionType_descriptor_;
}
bool MouseActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MenuEntry_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuEntry_descriptor_;
}
bool MenuEntry_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RowAction_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowAction_ActionType_descriptor_;
}
bool RowAction_ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RowAction_ActionType RowAction::REMOVE;
const RowAction_ActionType RowAction::INSERT;
const RowAction_ActionType RowAction::ActionType_MIN;
const RowAction_ActionType RowAction::ActionType_MAX;
const int RowAction::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RowAction::kRowFieldNumber;
const int RowAction::kTypeFieldNumber;
#endif  // !_MSC_VER

RowAction::RowAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.RowAction)
}

void RowAction::InitAsDefaultInstance() {
}

RowAction::RowAction(const RowAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.RowAction)
}

void RowAction::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowAction::~RowAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.RowAction)
  SharedDtor();
}

void RowAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RowAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowAction_descriptor_;
}

const RowAction& RowAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

RowAction* RowAction::default_instance_ = NULL;

RowAction* RowAction::New() const {
  return new RowAction;
}

void RowAction::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    row_ = 0;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.RowAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 row = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::RowAction_ActionType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::RowAction_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.RowAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.RowAction)
  return false;
#undef DO_
}

void RowAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.RowAction)
  // optional int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.RowAction)
}

::google::protobuf::uint8* RowAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.RowAction)
  // optional int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.RowAction)
  return target;
}

int RowAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowAction::MergeFrom(const RowAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowAction::CopyFrom(const RowAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RowAction::Swap(RowAction* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowAction_descriptor_;
  metadata.reflection = RowAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceAction::kIdFieldNumber;
const int DeviceAction::kVariableFieldNumber;
#endif  // !_MSC_VER

DeviceAction::DeviceAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.DeviceAction)
}

void DeviceAction::InitAsDefaultInstance() {
}

DeviceAction::DeviceAction(const DeviceAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.DeviceAction)
}

void DeviceAction::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAction::~DeviceAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.DeviceAction)
  SharedDtor();
}

void DeviceAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceAction_descriptor_;
}

const DeviceAction& DeviceAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

DeviceAction* DeviceAction::default_instance_ = NULL;

DeviceAction* DeviceAction::New() const {
  return new DeviceAction;
}

void DeviceAction::Clear() {
  id_ = 0;
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.DeviceAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        break;
      }

      // repeated int32 variable = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_variable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_variable())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_variable())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.DeviceAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.DeviceAction)
  return false;
#undef DO_
}

void DeviceAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.DeviceAction)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 variable = 2 [packed = true];
  if (this->variable_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_variable_cached_byte_size_);
  }
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->variable(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.DeviceAction)
}

::google::protobuf::uint8* DeviceAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.DeviceAction)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 variable = 2 [packed = true];
  if (this->variable_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _variable_cached_byte_size_, target);
  }
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->variable(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.DeviceAction)
  return target;
}

int DeviceAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int32 variable = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->variable_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->variable(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _variable_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceAction::MergeFrom(const DeviceAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAction::CopyFrom(const DeviceAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeviceAction::Swap(DeviceAction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    variable_.Swap(&other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceAction_descriptor_;
  metadata.reflection = DeviceAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MouseAction::kTypeFieldNumber;
const int MouseAction::kButtonFieldNumber;
const int MouseAction::kXPosFieldNumber;
const int MouseAction::kYPosFieldNumber;
const int MouseAction::kBlockNameFieldNumber;
const int MouseAction::kBlockTypeFieldNumber;
const int MouseAction::kRowFieldNumber;
#endif  // !_MSC_VER

MouseAction::MouseAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.MouseAction)
}

void MouseAction::InitAsDefaultInstance() {
}

MouseAction::MouseAction(const MouseAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.MouseAction)
}

void MouseAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  button_ = 1;
  xpos_ = 0;
  ypos_ = 0;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MouseAction::~MouseAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.MouseAction)
  SharedDtor();
}

void MouseAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void MouseAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MouseAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MouseAction_descriptor_;
}

const MouseAction& MouseAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

MouseAction* MouseAction::default_instance_ = NULL;

MouseAction* MouseAction::New() const {
  return new MouseAction;
}

void MouseAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MouseAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(xpos_, ypos_);
    type_ = 1;
    button_ = 1;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
    row_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MouseAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.MouseAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.MouseActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MouseActionType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::MouseActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_button;
        break;
      }

      // required .Aseba.ThymioVPL.MouseButton button = 2;
      case 2: {
        if (tag == 16) {
         parse_button:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MouseButton_IsValid(value)) {
            set_button(static_cast< ::Aseba::ThymioVPL::MouseButton >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_xPos;
        break;
      }

      // optional double xPos = 3;
      case 3: {
        if (tag == 25) {
         parse_xPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_yPos;
        break;
      }

      // optional double yPos = 4;
      case 4: {
        if (tag == 33) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blockName;
        break;
      }

      // optional string blockName = 5;
      case 5: {
        if (tag == 42) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_blockType;
        break;
      }

      // optional string blockType = 6;
      case 6: {
        if (tag == 50) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_row;
        break;
      }

      // optional int32 row = 7;
      case 7: {
        if (tag == 56) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.MouseAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.MouseAction)
  return false;
#undef DO_
}

void MouseAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.MouseAction)
  // required .Aseba.ThymioVPL.MouseActionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .Aseba.ThymioVPL.MouseButton button = 2;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->button(), output);
  }

  // optional double xPos = 3;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xpos(), output);
  }

  // optional double yPos = 4;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ypos(), output);
  }

  // optional string blockName = 5;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->blockname(), output);
  }

  // optional string blockType = 6;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->blocktype(), output);
  }

  // optional int32 row = 7;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.MouseAction)
}

::google::protobuf::uint8* MouseAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.MouseAction)
  // required .Aseba.ThymioVPL.MouseActionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .Aseba.ThymioVPL.MouseButton button = 2;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->button(), target);
  }

  // optional double xPos = 3;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xpos(), target);
  }

  // optional double yPos = 4;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ypos(), target);
  }

  // optional string blockName = 5;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->blockname(), target);
  }

  // optional string blockType = 6;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->blocktype(), target);
  }

  // optional int32 row = 7;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.MouseAction)
  return target;
}

int MouseAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.MouseActionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .Aseba.ThymioVPL.MouseButton button = 2;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
    }

    // optional double xPos = 3;
    if (has_xpos()) {
      total_size += 1 + 8;
    }

    // optional double yPos = 4;
    if (has_ypos()) {
      total_size += 1 + 8;
    }

    // optional string blockName = 5;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 6;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

    // optional int32 row = 7;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MouseAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MouseAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MouseAction::MergeFrom(const MouseAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_button()) {
      set_button(from.button());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MouseAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseAction::CopyFrom(const MouseAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MouseAction::Swap(MouseAction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(button_, other->button_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(row_, other->row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MouseAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MouseAction_descriptor_;
  metadata.reflection = MouseAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMouseMoveAction::kButtonFieldNumber;
const int BlockMouseMoveAction::kBlockNameFieldNumber;
const int BlockMouseMoveAction::kBlockTypeFieldNumber;
const int BlockMouseMoveAction::kXFieldNumber;
const int BlockMouseMoveAction::kYFieldNumber;
#endif  // !_MSC_VER

BlockMouseMoveAction::BlockMouseMoveAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.BlockMouseMoveAction)
}

void BlockMouseMoveAction::InitAsDefaultInstance() {
}

BlockMouseMoveAction::BlockMouseMoveAction(const BlockMouseMoveAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.BlockMouseMoveAction)
}

void BlockMouseMoveAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  button_ = 1;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMouseMoveAction::~BlockMouseMoveAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.BlockMouseMoveAction)
  SharedDtor();
}

void BlockMouseMoveAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void BlockMouseMoveAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMouseMoveAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMouseMoveAction_descriptor_;
}

const BlockMouseMoveAction& BlockMouseMoveAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

BlockMouseMoveAction* BlockMouseMoveAction::default_instance_ = NULL;

BlockMouseMoveAction* BlockMouseMoveAction::New() const {
  return new BlockMouseMoveAction;
}

void BlockMouseMoveAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlockMouseMoveAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, y_);
    button_ = 1;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMouseMoveAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.BlockMouseMoveAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.MouseButton button = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MouseButton_IsValid(value)) {
            set_button(static_cast< ::Aseba::ThymioVPL::MouseButton >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockName;
        break;
      }

      // optional string blockName = 2;
      case 2: {
        if (tag == 18) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockType;
        break;
      }

      // optional string blockType = 3;
      case 3: {
        if (tag == 26) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }

      // optional double x = 4;
      case 4: {
        if (tag == 33) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // optional double y = 5;
      case 5: {
        if (tag == 41) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.BlockMouseMoveAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.BlockMouseMoveAction)
  return false;
#undef DO_
}

void BlockMouseMoveAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.BlockMouseMoveAction)
  // required .Aseba.ThymioVPL.MouseButton button = 1;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->button(), output);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockname(), output);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blocktype(), output);
  }

  // optional double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // optional double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.BlockMouseMoveAction)
}

::google::protobuf::uint8* BlockMouseMoveAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.BlockMouseMoveAction)
  // required .Aseba.ThymioVPL.MouseButton button = 1;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->button(), target);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockname(), target);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blocktype(), target);
  }

  // optional double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // optional double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.BlockMouseMoveAction)
  return target;
}

int BlockMouseMoveAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.MouseButton button = 1;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
    }

    // optional string blockName = 2;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 3;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

    // optional double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMouseMoveAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMouseMoveAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMouseMoveAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMouseMoveAction::MergeFrom(const BlockMouseMoveAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_button()) {
      set_button(from.button());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMouseMoveAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMouseMoveAction::CopyFrom(const BlockMouseMoveAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMouseMoveAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlockMouseMoveAction::Swap(BlockMouseMoveAction* other) {
  if (other != this) {
    std::swap(button_, other->button_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMouseMoveAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMouseMoveAction_descriptor_;
  metadata.reflection = BlockMouseMoveAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMouseReleaseAction::kButtonFieldNumber;
const int BlockMouseReleaseAction::kBlockNameFieldNumber;
const int BlockMouseReleaseAction::kBlockTypeFieldNumber;
const int BlockMouseReleaseAction::kXFieldNumber;
const int BlockMouseReleaseAction::kYFieldNumber;
#endif  // !_MSC_VER

BlockMouseReleaseAction::BlockMouseReleaseAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.BlockMouseReleaseAction)
}

void BlockMouseReleaseAction::InitAsDefaultInstance() {
}

BlockMouseReleaseAction::BlockMouseReleaseAction(const BlockMouseReleaseAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.BlockMouseReleaseAction)
}

void BlockMouseReleaseAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  button_ = 1;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMouseReleaseAction::~BlockMouseReleaseAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.BlockMouseReleaseAction)
  SharedDtor();
}

void BlockMouseReleaseAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void BlockMouseReleaseAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMouseReleaseAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMouseReleaseAction_descriptor_;
}

const BlockMouseReleaseAction& BlockMouseReleaseAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

BlockMouseReleaseAction* BlockMouseReleaseAction::default_instance_ = NULL;

BlockMouseReleaseAction* BlockMouseReleaseAction::New() const {
  return new BlockMouseReleaseAction;
}

void BlockMouseReleaseAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlockMouseReleaseAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, y_);
    button_ = 1;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMouseReleaseAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.BlockMouseReleaseAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.MouseButton button = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MouseButton_IsValid(value)) {
            set_button(static_cast< ::Aseba::ThymioVPL::MouseButton >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockName;
        break;
      }

      // optional string blockName = 2;
      case 2: {
        if (tag == 18) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockType;
        break;
      }

      // optional string blockType = 3;
      case 3: {
        if (tag == 26) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }

      // optional double x = 4;
      case 4: {
        if (tag == 33) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // optional double y = 5;
      case 5: {
        if (tag == 41) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.BlockMouseReleaseAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.BlockMouseReleaseAction)
  return false;
#undef DO_
}

void BlockMouseReleaseAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.BlockMouseReleaseAction)
  // required .Aseba.ThymioVPL.MouseButton button = 1;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->button(), output);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockname(), output);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blocktype(), output);
  }

  // optional double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // optional double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.BlockMouseReleaseAction)
}

::google::protobuf::uint8* BlockMouseReleaseAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.BlockMouseReleaseAction)
  // required .Aseba.ThymioVPL.MouseButton button = 1;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->button(), target);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockname(), target);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blocktype(), target);
  }

  // optional double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // optional double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.BlockMouseReleaseAction)
  return target;
}

int BlockMouseReleaseAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.MouseButton button = 1;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
    }

    // optional string blockName = 2;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 3;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

    // optional double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMouseReleaseAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMouseReleaseAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMouseReleaseAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMouseReleaseAction::MergeFrom(const BlockMouseReleaseAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_button()) {
      set_button(from.button());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMouseReleaseAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMouseReleaseAction::CopyFrom(const BlockMouseReleaseAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMouseReleaseAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlockMouseReleaseAction::Swap(BlockMouseReleaseAction* other) {
  if (other != this) {
    std::swap(button_, other->button_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMouseReleaseAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMouseReleaseAction_descriptor_;
  metadata.reflection = BlockMouseReleaseAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ButtonDragAction::kButtonFieldNumber;
const int ButtonDragAction::kBlockNameFieldNumber;
const int ButtonDragAction::kBlockTypeFieldNumber;
const int ButtonDragAction::kXFieldNumber;
const int ButtonDragAction::kYFieldNumber;
#endif  // !_MSC_VER

ButtonDragAction::ButtonDragAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.ButtonDragAction)
}

void ButtonDragAction::InitAsDefaultInstance() {
}

ButtonDragAction::ButtonDragAction(const ButtonDragAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.ButtonDragAction)
}

void ButtonDragAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  button_ = 1;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonDragAction::~ButtonDragAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.ButtonDragAction)
  SharedDtor();
}

void ButtonDragAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void ButtonDragAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonDragAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonDragAction_descriptor_;
}

const ButtonDragAction& ButtonDragAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

ButtonDragAction* ButtonDragAction::default_instance_ = NULL;

ButtonDragAction* ButtonDragAction::New() const {
  return new ButtonDragAction;
}

void ButtonDragAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ButtonDragAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, y_);
    button_ = 1;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonDragAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.ButtonDragAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Aseba.ThymioVPL.MouseButton button = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MouseButton_IsValid(value)) {
            set_button(static_cast< ::Aseba::ThymioVPL::MouseButton >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockName;
        break;
      }

      // optional string blockName = 2;
      case 2: {
        if (tag == 18) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockType;
        break;
      }

      // optional string blockType = 3;
      case 3: {
        if (tag == 26) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }

      // optional double x = 4;
      case 4: {
        if (tag == 33) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // optional double y = 5;
      case 5: {
        if (tag == 41) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.ButtonDragAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.ButtonDragAction)
  return false;
#undef DO_
}

void ButtonDragAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.ButtonDragAction)
  // optional .Aseba.ThymioVPL.MouseButton button = 1;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->button(), output);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockname(), output);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blocktype(), output);
  }

  // optional double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // optional double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.ButtonDragAction)
}

::google::protobuf::uint8* ButtonDragAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.ButtonDragAction)
  // optional .Aseba.ThymioVPL.MouseButton button = 1;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->button(), target);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockname(), target);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blocktype(), target);
  }

  // optional double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // optional double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.ButtonDragAction)
  return target;
}

int ButtonDragAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Aseba.ThymioVPL.MouseButton button = 1;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
    }

    // optional string blockName = 2;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 3;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

    // optional double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonDragAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonDragAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonDragAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonDragAction::MergeFrom(const ButtonDragAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_button()) {
      set_button(from.button());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonDragAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonDragAction::CopyFrom(const ButtonDragAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonDragAction::IsInitialized() const {

  return true;
}

void ButtonDragAction::Swap(ButtonDragAction* other) {
  if (other != this) {
    std::swap(button_, other->button_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonDragAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonDragAction_descriptor_;
  metadata.reflection = ButtonDragAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionSetDragAction::kButtonFieldNumber;
const int ActionSetDragAction::kRowFieldNumber;
const int ActionSetDragAction::kXFieldNumber;
const int ActionSetDragAction::kYFieldNumber;
#endif  // !_MSC_VER

ActionSetDragAction::ActionSetDragAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.ActionSetDragAction)
}

void ActionSetDragAction::InitAsDefaultInstance() {
}

ActionSetDragAction::ActionSetDragAction(const ActionSetDragAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.ActionSetDragAction)
}

void ActionSetDragAction::SharedCtor() {
  _cached_size_ = 0;
  button_ = 1;
  row_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSetDragAction::~ActionSetDragAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.ActionSetDragAction)
  SharedDtor();
}

void ActionSetDragAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionSetDragAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSetDragAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSetDragAction_descriptor_;
}

const ActionSetDragAction& ActionSetDragAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

ActionSetDragAction* ActionSetDragAction::default_instance_ = NULL;

ActionSetDragAction* ActionSetDragAction::New() const {
  return new ActionSetDragAction;
}

void ActionSetDragAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActionSetDragAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(row_, y_);
    button_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionSetDragAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.ActionSetDragAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Aseba.ThymioVPL.MouseButton button = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MouseButton_IsValid(value)) {
            set_button(static_cast< ::Aseba::ThymioVPL::MouseButton >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }

      // optional int32 row = 2;
      case 2: {
        if (tag == 16) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // optional double x = 3;
      case 3: {
        if (tag == 25) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // optional double y = 4;
      case 4: {
        if (tag == 33) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.ActionSetDragAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.ActionSetDragAction)
  return false;
#undef DO_
}

void ActionSetDragAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.ActionSetDragAction)
  // optional .Aseba.ThymioVPL.MouseButton button = 1;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->button(), output);
  }

  // optional int32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->row(), output);
  }

  // optional double x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.ActionSetDragAction)
}

::google::protobuf::uint8* ActionSetDragAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.ActionSetDragAction)
  // optional .Aseba.ThymioVPL.MouseButton button = 1;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->button(), target);
  }

  // optional int32 row = 2;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->row(), target);
  }

  // optional double x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.ActionSetDragAction)
  return target;
}

int ActionSetDragAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Aseba.ThymioVPL.MouseButton button = 1;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
    }

    // optional int32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // optional double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSetDragAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionSetDragAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionSetDragAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionSetDragAction::MergeFrom(const ActionSetDragAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_button()) {
      set_button(from.button());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionSetDragAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSetDragAction::CopyFrom(const ActionSetDragAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSetDragAction::IsInitialized() const {

  return true;
}

void ActionSetDragAction::Swap(ActionSetDragAction* other) {
  if (other != this) {
    std::swap(button_, other->button_);
    std::swap(row_, other->row_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionSetDragAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSetDragAction_descriptor_;
  metadata.reflection = ActionSetDragAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccBlockModeAction::kModeFieldNumber;
const int AccBlockModeAction::kBlockNameFieldNumber;
const int AccBlockModeAction::kBlockTypeFieldNumber;
#endif  // !_MSC_VER

AccBlockModeAction::AccBlockModeAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.AccBlockModeAction)
}

void AccBlockModeAction::InitAsDefaultInstance() {
}

AccBlockModeAction::AccBlockModeAction(const AccBlockModeAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.AccBlockModeAction)
}

void AccBlockModeAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mode_ = 0;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccBlockModeAction::~AccBlockModeAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.AccBlockModeAction)
  SharedDtor();
}

void AccBlockModeAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void AccBlockModeAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccBlockModeAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccBlockModeAction_descriptor_;
}

const AccBlockModeAction& AccBlockModeAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

AccBlockModeAction* AccBlockModeAction::default_instance_ = NULL;

AccBlockModeAction* AccBlockModeAction::New() const {
  return new AccBlockModeAction;
}

void AccBlockModeAction::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mode_ = 0;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccBlockModeAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.AccBlockModeAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockName;
        break;
      }

      // optional string blockName = 2;
      case 2: {
        if (tag == 18) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockType;
        break;
      }

      // optional string blockType = 3;
      case 3: {
        if (tag == 26) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.AccBlockModeAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.AccBlockModeAction)
  return false;
#undef DO_
}

void AccBlockModeAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.AccBlockModeAction)
  // required int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockname(), output);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blocktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.AccBlockModeAction)
}

::google::protobuf::uint8* AccBlockModeAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.AccBlockModeAction)
  // required int32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockname(), target);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blocktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.AccBlockModeAction)
  return target;
}

int AccBlockModeAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional string blockName = 2;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 3;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccBlockModeAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccBlockModeAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccBlockModeAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccBlockModeAction::MergeFrom(const AccBlockModeAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccBlockModeAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccBlockModeAction::CopyFrom(const AccBlockModeAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccBlockModeAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccBlockModeAction::Swap(AccBlockModeAction* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccBlockModeAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccBlockModeAction_descriptor_;
  metadata.reflection = AccBlockModeAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdvancedModeAction::kIsAdvancedFieldNumber;
#endif  // !_MSC_VER

AdvancedModeAction::AdvancedModeAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.AdvancedModeAction)
}

void AdvancedModeAction::InitAsDefaultInstance() {
}

AdvancedModeAction::AdvancedModeAction(const AdvancedModeAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.AdvancedModeAction)
}

void AdvancedModeAction::SharedCtor() {
  _cached_size_ = 0;
  isadvanced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvancedModeAction::~AdvancedModeAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.AdvancedModeAction)
  SharedDtor();
}

void AdvancedModeAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvancedModeAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvancedModeAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvancedModeAction_descriptor_;
}

const AdvancedModeAction& AdvancedModeAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

AdvancedModeAction* AdvancedModeAction::default_instance_ = NULL;

AdvancedModeAction* AdvancedModeAction::New() const {
  return new AdvancedModeAction;
}

void AdvancedModeAction::Clear() {
  isadvanced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvancedModeAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.AdvancedModeAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isAdvanced = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadvanced_)));
          set_has_isadvanced();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.AdvancedModeAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.AdvancedModeAction)
  return false;
#undef DO_
}

void AdvancedModeAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.AdvancedModeAction)
  // required bool isAdvanced = 1;
  if (has_isadvanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isadvanced(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.AdvancedModeAction)
}

::google::protobuf::uint8* AdvancedModeAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.AdvancedModeAction)
  // required bool isAdvanced = 1;
  if (has_isadvanced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isadvanced(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.AdvancedModeAction)
  return target;
}

int AdvancedModeAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isAdvanced = 1;
    if (has_isadvanced()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvancedModeAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvancedModeAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvancedModeAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvancedModeAction::MergeFrom(const AdvancedModeAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isadvanced()) {
      set_isadvanced(from.isadvanced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvancedModeAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancedModeAction::CopyFrom(const AdvancedModeAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvancedModeAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdvancedModeAction::Swap(AdvancedModeAction* other) {
  if (other != this) {
    std::swap(isadvanced_, other->isadvanced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvancedModeAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvancedModeAction_descriptor_;
  metadata.reflection = AdvancedModeAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlockAction::kTypeFieldNumber;
const int AddBlockAction::kBlockNameFieldNumber;
const int AddBlockAction::kBlockTypeFieldNumber;
const int AddBlockAction::kRowFieldNumber;
#endif  // !_MSC_VER

AddBlockAction::AddBlockAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.AddBlockAction)
}

void AddBlockAction::InitAsDefaultInstance() {
}

AddBlockAction::AddBlockAction(const AddBlockAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.AddBlockAction)
}

void AddBlockAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlockAction::~AddBlockAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.AddBlockAction)
  SharedDtor();
}

void AddBlockAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void AddBlockAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBlockAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBlockAction_descriptor_;
}

const AddBlockAction& AddBlockAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

AddBlockAction* AddBlockAction::default_instance_ = NULL;

AddBlockAction* AddBlockAction::New() const {
  return new AddBlockAction;
}

void AddBlockAction::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
    row_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBlockAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.AddBlockAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.BlockType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::BlockType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::BlockType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockName;
        break;
      }

      // optional string blockName = 2;
      case 2: {
        if (tag == 18) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockType;
        break;
      }

      // optional string blockType = 3;
      case 3: {
        if (tag == 26) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_row;
        break;
      }

      // optional int32 row = 4;
      case 4: {
        if (tag == 32) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.AddBlockAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.AddBlockAction)
  return false;
#undef DO_
}

void AddBlockAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.AddBlockAction)
  // required .Aseba.ThymioVPL.BlockType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockname(), output);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blocktype(), output);
  }

  // optional int32 row = 4;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.AddBlockAction)
}

::google::protobuf::uint8* AddBlockAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.AddBlockAction)
  // required .Aseba.ThymioVPL.BlockType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockname(), target);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blocktype(), target);
  }

  // optional int32 row = 4;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.AddBlockAction)
  return target;
}

int AddBlockAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.BlockType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string blockName = 2;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 3;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

    // optional int32 row = 4;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlockAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBlockAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBlockAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBlockAction::MergeFrom(const AddBlockAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBlockAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlockAction::CopyFrom(const AddBlockAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddBlockAction::Swap(AddBlockAction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(row_, other->row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBlockAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBlockAction_descriptor_;
  metadata.reflection = AddBlockAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuAction::kEntryFieldNumber;
#endif  // !_MSC_VER

MenuAction::MenuAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.MenuAction)
}

void MenuAction::InitAsDefaultInstance() {
}

MenuAction::MenuAction(const MenuAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.MenuAction)
}

void MenuAction::SharedCtor() {
  _cached_size_ = 0;
  entry_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuAction::~MenuAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.MenuAction)
  SharedDtor();
}

void MenuAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MenuAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuAction_descriptor_;
}

const MenuAction& MenuAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

MenuAction* MenuAction::default_instance_ = NULL;

MenuAction* MenuAction::New() const {
  return new MenuAction;
}

void MenuAction::Clear() {
  entry_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.MenuAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.MenuEntry entry = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MenuEntry_IsValid(value)) {
            set_entry(static_cast< ::Aseba::ThymioVPL::MenuEntry >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.MenuAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.MenuAction)
  return false;
#undef DO_
}

void MenuAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.MenuAction)
  // required .Aseba.ThymioVPL.MenuEntry entry = 1;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->entry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.MenuAction)
}

::google::protobuf::uint8* MenuAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.MenuAction)
  // required .Aseba.ThymioVPL.MenuEntry entry = 1;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->entry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.MenuAction)
  return target;
}

int MenuAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.MenuEntry entry = 1;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuAction::MergeFrom(const MenuAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry()) {
      set_entry(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuAction::CopyFrom(const MenuAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MenuAction::Swap(MenuAction* other) {
  if (other != this) {
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuAction_descriptor_;
  metadata.reflection = MenuAction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Action_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_ActionType_descriptor_;
}
bool Action_ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Action_ActionType Action::ROW;
const Action_ActionType Action::BLOCK_MOUSE_MOVE;
const Action_ActionType Action::BLOCK_MOUSE_RELEASE;
const Action_ActionType Action::BUTTON_DRAG;
const Action_ActionType Action::ADVANCED_MODE;
const Action_ActionType Action::ADD_BLOCK;
const Action_ActionType Action::ACTION_SET_DRAG;
const Action_ActionType Action::ACC_BLOCK_MODE;
const Action_ActionType Action::MENU;
const Action_ActionType Action::MOUSE_ACTION;
const Action_ActionType Action::DEVICE_ACTION;
const Action_ActionType Action::ActionType_MIN;
const Action_ActionType Action::ActionType_MAX;
const int Action::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Action::kTypeFieldNumber;
const int Action::kProgramStateAsXmlFieldNumber;
const int Action::kRowActionFieldNumber;
const int Action::kBlockMouseMoveActionFieldNumber;
const int Action::kBlockMouseReleaseActionFieldNumber;
const int Action::kButtonDragActionFieldNumber;
const int Action::kAdvancedModeActionFieldNumber;
const int Action::kAddBlockActionFieldNumber;
const int Action::kActionSetDragActionFieldNumber;
const int Action::kAccBlockModeActionFieldNumber;
const int Action::kMenuActionFieldNumber;
const int Action::kMouseActionFieldNumber;
const int Action::kDeviceActionFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.Action)
}

void Action::InitAsDefaultInstance() {
  Action_default_oneof_instance_->rowaction_ = const_cast< ::Aseba::ThymioVPL::RowAction*>(&::Aseba::ThymioVPL::RowAction::default_instance());
  Action_default_oneof_instance_->blockmousemoveaction_ = const_cast< ::Aseba::ThymioVPL::BlockMouseMoveAction*>(&::Aseba::ThymioVPL::BlockMouseMoveAction::default_instance());
  Action_default_oneof_instance_->blockmousereleaseaction_ = const_cast< ::Aseba::ThymioVPL::BlockMouseReleaseAction*>(&::Aseba::ThymioVPL::BlockMouseReleaseAction::default_instance());
  Action_default_oneof_instance_->buttondragaction_ = const_cast< ::Aseba::ThymioVPL::ButtonDragAction*>(&::Aseba::ThymioVPL::ButtonDragAction::default_instance());
  Action_default_oneof_instance_->advancedmodeaction_ = const_cast< ::Aseba::ThymioVPL::AdvancedModeAction*>(&::Aseba::ThymioVPL::AdvancedModeAction::default_instance());
  Action_default_oneof_instance_->addblockaction_ = const_cast< ::Aseba::ThymioVPL::AddBlockAction*>(&::Aseba::ThymioVPL::AddBlockAction::default_instance());
  Action_default_oneof_instance_->actionsetdragaction_ = const_cast< ::Aseba::ThymioVPL::ActionSetDragAction*>(&::Aseba::ThymioVPL::ActionSetDragAction::default_instance());
  Action_default_oneof_instance_->accblockmodeaction_ = const_cast< ::Aseba::ThymioVPL::AccBlockModeAction*>(&::Aseba::ThymioVPL::AccBlockModeAction::default_instance());
  Action_default_oneof_instance_->menuaction_ = const_cast< ::Aseba::ThymioVPL::MenuAction*>(&::Aseba::ThymioVPL::MenuAction::default_instance());
  Action_default_oneof_instance_->mouseaction_ = const_cast< ::Aseba::ThymioVPL::MouseAction*>(&::Aseba::ThymioVPL::MouseAction::default_instance());
  Action_default_oneof_instance_->deviceaction_ = const_cast< ::Aseba::ThymioVPL::DeviceAction*>(&::Aseba::ThymioVPL::DeviceAction::default_instance());
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.Action)
}

void Action::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  programstateasxml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_actual_action();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (programstateasxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete programstateasxml_;
  }
  if (has_actual_action()) {
    clear_actual_action();
  }
  if (this != default_instance_) {
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::clear_actual_action() {
  switch(actual_action_case()) {
    case kRowAction: {
      delete actual_action_.rowaction_;
      break;
    }
    case kBlockMouseMoveAction: {
      delete actual_action_.blockmousemoveaction_;
      break;
    }
    case kBlockMouseReleaseAction: {
      delete actual_action_.blockmousereleaseaction_;
      break;
    }
    case kButtonDragAction: {
      delete actual_action_.buttondragaction_;
      break;
    }
    case kAdvancedModeAction: {
      delete actual_action_.advancedmodeaction_;
      break;
    }
    case kAddBlockAction: {
      delete actual_action_.addblockaction_;
      break;
    }
    case kActionSetDragAction: {
      delete actual_action_.actionsetdragaction_;
      break;
    }
    case kAccBlockModeAction: {
      delete actual_action_.accblockmodeaction_;
      break;
    }
    case kMenuAction: {
      delete actual_action_.menuaction_;
      break;
    }
    case kMouseAction: {
      delete actual_action_.mouseaction_;
      break;
    }
    case kDeviceAction: {
      delete actual_action_.deviceaction_;
      break;
    }
    case ACTUAL_ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTUAL_ACTION_NOT_SET;
}


void Action::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_programstateasxml()) {
      if (programstateasxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        programstateasxml_->clear();
      }
    }
  }
  clear_actual_action();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.Action.ActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::Action_ActionType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::Action_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_programStateAsXml;
        break;
      }

      // optional string programStateAsXml = 2;
      case 2: {
        if (tag == 18) {
         parse_programStateAsXml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_programstateasxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->programstateasxml().data(), this->programstateasxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "programstateasxml");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rowAction;
        break;
      }

      // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
      case 10: {
        if (tag == 82) {
         parse_rowAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rowaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_blockMouseMoveAction;
        break;
      }

      // optional .Aseba.ThymioVPL.BlockMouseMoveAction blockMouseMoveAction = 11;
      case 11: {
        if (tag == 90) {
         parse_blockMouseMoveAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blockmousemoveaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_blockMouseReleaseAction;
        break;
      }

      // optional .Aseba.ThymioVPL.BlockMouseReleaseAction blockMouseReleaseAction = 12;
      case 12: {
        if (tag == 98) {
         parse_blockMouseReleaseAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blockmousereleaseaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_buttonDragAction;
        break;
      }

      // optional .Aseba.ThymioVPL.ButtonDragAction buttonDragAction = 13;
      case 13: {
        if (tag == 106) {
         parse_buttonDragAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buttondragaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_advancedModeAction;
        break;
      }

      // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 14;
      case 14: {
        if (tag == 114) {
         parse_advancedModeAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advancedmodeaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_addBlockAction;
        break;
      }

      // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 15;
      case 15: {
        if (tag == 122) {
         parse_addBlockAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addblockaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_actionSetDragAction;
        break;
      }

      // optional .Aseba.ThymioVPL.ActionSetDragAction actionSetDragAction = 16;
      case 16: {
        if (tag == 130) {
         parse_actionSetDragAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionsetdragaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_accBlockModeAction;
        break;
      }

      // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 17;
      case 17: {
        if (tag == 138) {
         parse_accBlockModeAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accblockmodeaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_menuAction;
        break;
      }

      // optional .Aseba.ThymioVPL.MenuAction menuAction = 18;
      case 18: {
        if (tag == 146) {
         parse_menuAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_menuaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_mouseAction;
        break;
      }

      // optional .Aseba.ThymioVPL.MouseAction mouseAction = 19;
      case 19: {
        if (tag == 154) {
         parse_mouseAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouseaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_deviceAction;
        break;
      }

      // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 20;
      case 20: {
        if (tag == 162) {
         parse_deviceAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.Action)
  // required .Aseba.ThymioVPL.Action.ActionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string programStateAsXml = 2;
  if (has_programstateasxml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->programstateasxml().data(), this->programstateasxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "programstateasxml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->programstateasxml(), output);
  }

  // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
  if (has_rowaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rowaction(), output);
  }

  // optional .Aseba.ThymioVPL.BlockMouseMoveAction blockMouseMoveAction = 11;
  if (has_blockmousemoveaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->blockmousemoveaction(), output);
  }

  // optional .Aseba.ThymioVPL.BlockMouseReleaseAction blockMouseReleaseAction = 12;
  if (has_blockmousereleaseaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->blockmousereleaseaction(), output);
  }

  // optional .Aseba.ThymioVPL.ButtonDragAction buttonDragAction = 13;
  if (has_buttondragaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->buttondragaction(), output);
  }

  // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 14;
  if (has_advancedmodeaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->advancedmodeaction(), output);
  }

  // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 15;
  if (has_addblockaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->addblockaction(), output);
  }

  // optional .Aseba.ThymioVPL.ActionSetDragAction actionSetDragAction = 16;
  if (has_actionsetdragaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->actionsetdragaction(), output);
  }

  // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 17;
  if (has_accblockmodeaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->accblockmodeaction(), output);
  }

  // optional .Aseba.ThymioVPL.MenuAction menuAction = 18;
  if (has_menuaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->menuaction(), output);
  }

  // optional .Aseba.ThymioVPL.MouseAction mouseAction = 19;
  if (has_mouseaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->mouseaction(), output);
  }

  // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 20;
  if (has_deviceaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->deviceaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.Action)
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.Action)
  // required .Aseba.ThymioVPL.Action.ActionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string programStateAsXml = 2;
  if (has_programstateasxml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->programstateasxml().data(), this->programstateasxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "programstateasxml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->programstateasxml(), target);
  }

  // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
  if (has_rowaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rowaction(), target);
  }

  // optional .Aseba.ThymioVPL.BlockMouseMoveAction blockMouseMoveAction = 11;
  if (has_blockmousemoveaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->blockmousemoveaction(), target);
  }

  // optional .Aseba.ThymioVPL.BlockMouseReleaseAction blockMouseReleaseAction = 12;
  if (has_blockmousereleaseaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->blockmousereleaseaction(), target);
  }

  // optional .Aseba.ThymioVPL.ButtonDragAction buttonDragAction = 13;
  if (has_buttondragaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->buttondragaction(), target);
  }

  // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 14;
  if (has_advancedmodeaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->advancedmodeaction(), target);
  }

  // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 15;
  if (has_addblockaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->addblockaction(), target);
  }

  // optional .Aseba.ThymioVPL.ActionSetDragAction actionSetDragAction = 16;
  if (has_actionsetdragaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->actionsetdragaction(), target);
  }

  // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 17;
  if (has_accblockmodeaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->accblockmodeaction(), target);
  }

  // optional .Aseba.ThymioVPL.MenuAction menuAction = 18;
  if (has_menuaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->menuaction(), target);
  }

  // optional .Aseba.ThymioVPL.MouseAction mouseAction = 19;
  if (has_mouseaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->mouseaction(), target);
  }

  // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 20;
  if (has_deviceaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->deviceaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.Action)
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.Action.ActionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string programStateAsXml = 2;
    if (has_programstateasxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->programstateasxml());
    }

  }
  switch (actual_action_case()) {
    // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
    case kRowAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rowaction());
      break;
    }
    // optional .Aseba.ThymioVPL.BlockMouseMoveAction blockMouseMoveAction = 11;
    case kBlockMouseMoveAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blockmousemoveaction());
      break;
    }
    // optional .Aseba.ThymioVPL.BlockMouseReleaseAction blockMouseReleaseAction = 12;
    case kBlockMouseReleaseAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blockmousereleaseaction());
      break;
    }
    // optional .Aseba.ThymioVPL.ButtonDragAction buttonDragAction = 13;
    case kButtonDragAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buttondragaction());
      break;
    }
    // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 14;
    case kAdvancedModeAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advancedmodeaction());
      break;
    }
    // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 15;
    case kAddBlockAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addblockaction());
      break;
    }
    // optional .Aseba.ThymioVPL.ActionSetDragAction actionSetDragAction = 16;
    case kActionSetDragAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionsetdragaction());
      break;
    }
    // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 17;
    case kAccBlockModeAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accblockmodeaction());
      break;
    }
    // optional .Aseba.ThymioVPL.MenuAction menuAction = 18;
    case kMenuAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->menuaction());
      break;
    }
    // optional .Aseba.ThymioVPL.MouseAction mouseAction = 19;
    case kMouseAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mouseaction());
      break;
    }
    // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 20;
    case kDeviceAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deviceaction());
      break;
    }
    case ACTUAL_ACTION_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.actual_action_case()) {
    case kRowAction: {
      mutable_rowaction()->::Aseba::ThymioVPL::RowAction::MergeFrom(from.rowaction());
      break;
    }
    case kBlockMouseMoveAction: {
      mutable_blockmousemoveaction()->::Aseba::ThymioVPL::BlockMouseMoveAction::MergeFrom(from.blockmousemoveaction());
      break;
    }
    case kBlockMouseReleaseAction: {
      mutable_blockmousereleaseaction()->::Aseba::ThymioVPL::BlockMouseReleaseAction::MergeFrom(from.blockmousereleaseaction());
      break;
    }
    case kButtonDragAction: {
      mutable_buttondragaction()->::Aseba::ThymioVPL::ButtonDragAction::MergeFrom(from.buttondragaction());
      break;
    }
    case kAdvancedModeAction: {
      mutable_advancedmodeaction()->::Aseba::ThymioVPL::AdvancedModeAction::MergeFrom(from.advancedmodeaction());
      break;
    }
    case kAddBlockAction: {
      mutable_addblockaction()->::Aseba::ThymioVPL::AddBlockAction::MergeFrom(from.addblockaction());
      break;
    }
    case kActionSetDragAction: {
      mutable_actionsetdragaction()->::Aseba::ThymioVPL::ActionSetDragAction::MergeFrom(from.actionsetdragaction());
      break;
    }
    case kAccBlockModeAction: {
      mutable_accblockmodeaction()->::Aseba::ThymioVPL::AccBlockModeAction::MergeFrom(from.accblockmodeaction());
      break;
    }
    case kMenuAction: {
      mutable_menuaction()->::Aseba::ThymioVPL::MenuAction::MergeFrom(from.menuaction());
      break;
    }
    case kMouseAction: {
      mutable_mouseaction()->::Aseba::ThymioVPL::MouseAction::MergeFrom(from.mouseaction());
      break;
    }
    case kDeviceAction: {
      mutable_deviceaction()->::Aseba::ThymioVPL::DeviceAction::MergeFrom(from.deviceaction());
      break;
    }
    case ACTUAL_ACTION_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_programstateasxml()) {
      set_programstateasxml(from.programstateasxml());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rowaction()) {
    if (!this->rowaction().IsInitialized()) return false;
  }
  if (has_blockmousemoveaction()) {
    if (!this->blockmousemoveaction().IsInitialized()) return false;
  }
  if (has_blockmousereleaseaction()) {
    if (!this->blockmousereleaseaction().IsInitialized()) return false;
  }
  if (has_advancedmodeaction()) {
    if (!this->advancedmodeaction().IsInitialized()) return false;
  }
  if (has_addblockaction()) {
    if (!this->addblockaction().IsInitialized()) return false;
  }
  if (has_accblockmodeaction()) {
    if (!this->accblockmodeaction().IsInitialized()) return false;
  }
  if (has_menuaction()) {
    if (!this->menuaction().IsInitialized()) return false;
  }
  if (has_mouseaction()) {
    if (!this->mouseaction().IsInitialized()) return false;
  }
  if (has_deviceaction()) {
    if (!this->deviceaction().IsInitialized()) return false;
  }
  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(programstateasxml_, other->programstateasxml_);
    std::swap(actual_action_, other->actual_action_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Usage::kActionFieldNumber;
#endif  // !_MSC_VER

Usage::Usage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.Usage)
}

void Usage::InitAsDefaultInstance() {
}

Usage::Usage(const Usage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.Usage)
}

void Usage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Usage::~Usage() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.Usage)
  SharedDtor();
}

void Usage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Usage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Usage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Usage_descriptor_;
}

const Usage& Usage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

Usage* Usage::default_instance_ = NULL;

Usage* Usage::New() const {
  return new Usage;
}

void Usage::Clear() {
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Usage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.Usage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Aseba.ThymioVPL.Action action = 1;
      case 1: {
        if (tag == 10) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_action;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.Usage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.Usage)
  return false;
#undef DO_
}

void Usage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.Usage)
  // repeated .Aseba.ThymioVPL.Action action = 1;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->action(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.Usage)
}

::google::protobuf::uint8* Usage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.Usage)
  // repeated .Aseba.ThymioVPL.Action action = 1;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->action(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.Usage)
  return target;
}

int Usage::ByteSize() const {
  int total_size = 0;

  // repeated .Aseba.ThymioVPL.Action action = 1;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Usage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Usage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Usage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Usage::MergeFrom(const Usage& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Usage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Usage::CopyFrom(const Usage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Usage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->action())) return false;
  return true;
}

void Usage::Swap(Usage* other) {
  if (other != this) {
    action_.Swap(&other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Usage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Usage_descriptor_;
  metadata.reflection = Usage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ThymioVPL
}  // namespace Aseba

// @@protoc_insertion_point(global_scope)
