// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UsageProfile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UsageProfile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aseba {
namespace ThymioVPL {

namespace {

const ::google::protobuf::Descriptor* RowAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowAction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RowAction_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DeviceAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* TabletAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TabletAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MouseAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MouseAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccBlockModeAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccBlockModeAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvancedModeAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvancedModeAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBlockAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBlockAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
struct ActionOneofInstance {
  const ::Aseba::ThymioVPL::RowAction* rowaction_;
  const ::Aseba::ThymioVPL::AdvancedModeAction* advancedmodeaction_;
  const ::Aseba::ThymioVPL::AddBlockAction* addblockaction_;
  const ::Aseba::ThymioVPL::AccBlockModeAction* accblockmodeaction_;
  const ::Aseba::ThymioVPL::MenuAction* menuaction_;
  const ::Aseba::ThymioVPL::MouseAction* mouseaction_;
  const ::Aseba::ThymioVPL::DeviceAction* deviceaction_;
  const ::Aseba::ThymioVPL::BlockAction* blockaction_;
  const ::Aseba::ThymioVPL::TabletAction* tabletaction_;
}* Action_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Usage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Usage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MouseButton_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MouseActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MenuEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockActionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UsageProfile_2eproto() {
  protobuf_AddDesc_UsageProfile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UsageProfile.proto");
  GOOGLE_CHECK(file != NULL);
  RowAction_descriptor_ = file->message_type(0);
  static const int RowAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowAction, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowAction, type_),
  };
  RowAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowAction_descriptor_,
      RowAction::default_instance_,
      RowAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowAction));
  RowAction_ActionType_descriptor_ = RowAction_descriptor_->enum_type(0);
  DeviceAction_descriptor_ = file->message_type(1);
  static const int DeviceAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAction, variable_),
  };
  DeviceAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceAction_descriptor_,
      DeviceAction::default_instance_,
      DeviceAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceAction));
  TabletAction_descriptor_ = file->message_type(2);
  static const int TabletAction_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, camerax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, cameray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, cameraz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, cameraanglex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, cameraangley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, cameraanglez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, thymiox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, thymioz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, thymioangley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, recordingduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, lefttimelinepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, righttimelinepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, apprecording_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, thymioistracked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, boardistracked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, selectedsetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, selectedsettime_),
  };
  TabletAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TabletAction_descriptor_,
      TabletAction::default_instance_,
      TabletAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabletAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TabletAction));
  MouseAction_descriptor_ = file->message_type(3);
  static const int MouseAction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, row_),
  };
  MouseAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MouseAction_descriptor_,
      MouseAction::default_instance_,
      MouseAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MouseAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MouseAction));
  AccBlockModeAction_descriptor_ = file->message_type(4);
  static const int AccBlockModeAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, blocktype_),
  };
  AccBlockModeAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccBlockModeAction_descriptor_,
      AccBlockModeAction::default_instance_,
      AccBlockModeAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccBlockModeAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccBlockModeAction));
  AdvancedModeAction_descriptor_ = file->message_type(5);
  static const int AdvancedModeAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedModeAction, isadvanced_),
  };
  AdvancedModeAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvancedModeAction_descriptor_,
      AdvancedModeAction::default_instance_,
      AdvancedModeAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedModeAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedModeAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvancedModeAction));
  AddBlockAction_descriptor_ = file->message_type(6);
  static const int AddBlockAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, row_),
  };
  AddBlockAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBlockAction_descriptor_,
      AddBlockAction::default_instance_,
      AddBlockAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBlockAction));
  BlockAction_descriptor_ = file->message_type(7);
  static const int BlockAction_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, blockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, elementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, slidervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, soundvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, timervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, buttonvalue_),
  };
  BlockAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockAction_descriptor_,
      BlockAction::default_instance_,
      BlockAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockAction));
  MenuAction_descriptor_ = file->message_type(8);
  static const int MenuAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuAction, entry_),
  };
  MenuAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuAction_descriptor_,
      MenuAction::default_instance_,
      MenuAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuAction));
  TimeStamp_descriptor_ = file->message_type(9);
  static const int TimeStamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStamp, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStamp, milliseconds_),
  };
  TimeStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeStamp_descriptor_,
      TimeStamp::default_instance_,
      TimeStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeStamp));
  Action_descriptor_ = file->message_type(10);
  static const int Action_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, programstateasxml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, time_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, rowaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, advancedmodeaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, addblockaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, accblockmodeaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, menuaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, mouseaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, deviceaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, blockaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Action_default_oneof_instance_, tabletaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, actual_action_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      Action_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  Action_ActionType_descriptor_ = Action_descriptor_->enum_type(0);
  Usage_descriptor_ = file->message_type(11);
  static const int Usage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, action_),
  };
  Usage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Usage_descriptor_,
      Usage::default_instance_,
      Usage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Usage));
  MouseButton_descriptor_ = file->enum_type(0);
  BlockType_descriptor_ = file->enum_type(1);
  MouseActionType_descriptor_ = file->enum_type(2);
  MenuEntry_descriptor_ = file->enum_type(3);
  BlockActionType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UsageProfile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowAction_descriptor_, &RowAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceAction_descriptor_, &DeviceAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TabletAction_descriptor_, &TabletAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MouseAction_descriptor_, &MouseAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccBlockModeAction_descriptor_, &AccBlockModeAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvancedModeAction_descriptor_, &AdvancedModeAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBlockAction_descriptor_, &AddBlockAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockAction_descriptor_, &BlockAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuAction_descriptor_, &MenuAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeStamp_descriptor_, &TimeStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Usage_descriptor_, &Usage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UsageProfile_2eproto() {
  delete RowAction::default_instance_;
  delete RowAction_reflection_;
  delete DeviceAction::default_instance_;
  delete DeviceAction_reflection_;
  delete TabletAction::default_instance_;
  delete TabletAction_reflection_;
  delete MouseAction::default_instance_;
  delete MouseAction_reflection_;
  delete AccBlockModeAction::default_instance_;
  delete AccBlockModeAction_reflection_;
  delete AdvancedModeAction::default_instance_;
  delete AdvancedModeAction_reflection_;
  delete AddBlockAction::default_instance_;
  delete AddBlockAction_reflection_;
  delete BlockAction::default_instance_;
  delete BlockAction_reflection_;
  delete MenuAction::default_instance_;
  delete MenuAction_reflection_;
  delete TimeStamp::default_instance_;
  delete TimeStamp_reflection_;
  delete Action::default_instance_;
  delete Action_default_oneof_instance_;
  delete Action_reflection_;
  delete Usage::default_instance_;
  delete Usage_reflection_;
}

void protobuf_AddDesc_UsageProfile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022UsageProfile.proto\022\017Aseba.ThymioVPL\"s\n"
    "\tRowAction\022\013\n\003row\030\001 \001(\005\0223\n\004type\030\002 \002(\0162%."
    "Aseba.ThymioVPL.RowAction.ActionType\"$\n\n"
    "ActionType\022\n\n\006REMOVE\020\001\022\n\n\006INSERT\020\002\"0\n\014De"
    "viceAction\022\n\n\002id\030\001 \002(\005\022\024\n\010variable\030\002 \003(\005"
    "B\002\020\001\"\200\003\n\014TabletAction\022\017\n\007cameraX\030\001 \002(\002\022\017"
    "\n\007cameraY\030\002 \002(\002\022\017\n\007cameraZ\030\003 \002(\002\022\024\n\014came"
    "raAngleX\030\004 \002(\002\022\024\n\014cameraAngleY\030\005 \002(\002\022\024\n\014"
    "cameraAngleZ\030\006 \002(\002\022\017\n\007thymioX\030\007 \002(\002\022\017\n\007t"
    "hymioZ\030\010 \002(\002\022\024\n\014thymioAngleY\030\t \002(\002\022\031\n\021re"
    "cordingDuration\030\n \002(\005\022\027\n\017leftTimelinePos"
    "\030\013 \002(\005\022\030\n\020rightTimelinePos\030\014 \002(\005\022\024\n\014appR"
    "ecording\030\r \002(\010\022\027\n\017thymioIsTracked\030\016 \002(\010\022"
    "\026\n\016boardIsTracked\030\017 \002(\010\022\025\n\rselectedSetId"
    "\030\020 \001(\005\022\027\n\017selectedSetTime\030\021 \001(\002\"\272\001\n\013Mous"
    "eAction\022.\n\004type\030\001 \002(\0162 .Aseba.ThymioVPL."
    "MouseActionType\022,\n\006button\030\002 \002(\0162\034.Aseba."
    "ThymioVPL.MouseButton\022\014\n\004xPos\030\003 \001(\001\022\014\n\004y"
    "Pos\030\004 \001(\001\022\021\n\tblockName\030\005 \001(\t\022\021\n\tblockTyp"
    "e\030\006 \001(\t\022\013\n\003row\030\007 \001(\005\"H\n\022AccBlockModeActi"
    "on\022\014\n\004mode\030\001 \002(\005\022\021\n\tblockName\030\002 \001(\t\022\021\n\tb"
    "lockType\030\003 \001(\t\"(\n\022AdvancedModeAction\022\022\n\n"
    "isAdvanced\030\001 \002(\010\"m\n\016AddBlockAction\022(\n\004ty"
    "pe\030\001 \002(\0162\032.Aseba.ThymioVPL.BlockType\022\021\n\t"
    "blockName\030\002 \001(\t\022\021\n\tblockType\030\003 \001(\t\022\013\n\003ro"
    "w\030\004 \001(\005\"\325\001\n\013BlockAction\022.\n\004type\030\001 \002(\0162 ."
    "Aseba.ThymioVPL.BlockActionType\022\013\n\003row\030\002"
    " \001(\005\022\021\n\tblockName\030\003 \001(\t\022\021\n\tblockType\030\004 \001"
    "(\t\022\021\n\telementId\030\005 \001(\005\022\023\n\013sliderValue\030\006 \001"
    "(\005\022\022\n\nsoundValue\030\007 \001(\005\022\022\n\ntimerValue\030\010 \001"
    "(\005\022\023\n\013buttonValue\030\t \001(\005\"7\n\nMenuAction\022)\n"
    "\005entry\030\001 \002(\0162\032.Aseba.ThymioVPL.MenuEntry"
    "\"4\n\tTimeStamp\022\021\n\ttimestamp\030\001 \002(\r\022\024\n\014mill"
    "iseconds\030\002 \002(\r\"\250\006\n\006Action\0220\n\004type\030\001 \002(\0162"
    "\".Aseba.ThymioVPL.Action.ActionType\022\031\n\021p"
    "rogramStateAsXml\030\002 \001(\t\022(\n\004time\030\003 \002(\0132\032.A"
    "seba.ThymioVPL.TimeStamp\022/\n\trowAction\030\n "
    "\001(\0132\032.Aseba.ThymioVPL.RowActionH\000\022A\n\022adv"
    "ancedModeAction\030\013 \001(\0132#.Aseba.ThymioVPL."
    "AdvancedModeActionH\000\0229\n\016addBlockAction\030\014"
    " \001(\0132\037.Aseba.ThymioVPL.AddBlockActionH\000\022"
    "A\n\022accBlockModeAction\030\r \001(\0132#.Aseba.Thym"
    "ioVPL.AccBlockModeActionH\000\0221\n\nmenuAction"
    "\030\016 \001(\0132\033.Aseba.ThymioVPL.MenuActionH\000\0223\n"
    "\013mouseAction\030\017 \001(\0132\034.Aseba.ThymioVPL.Mou"
    "seActionH\000\0225\n\014deviceAction\030\020 \001(\0132\035.Aseba"
    ".ThymioVPL.DeviceActionH\000\0223\n\013blockAction"
    "\030\021 \001(\0132\034.Aseba.ThymioVPL.BlockActionH\000\0225"
    "\n\014tabletAction\030\022 \001(\0132\035.Aseba.ThymioVPL.T"
    "abletActionH\000\"\230\001\n\nActionType\022\021\n\rADVANCED"
    "_MODE\020\001\022\r\n\tADD_BLOCK\020\002\022\022\n\016ACC_BLOCK_MODE"
    "\020\003\022\010\n\004MENU\020\004\022\020\n\014MOUSE_ACTION\020\005\022\021\n\rDEVICE"
    "_ACTION\020\006\022\020\n\014BLOCK_ACTION\020\007\022\007\n\003ROW\020\010\022\n\n\006"
    "TABLET\020\tB\017\n\ractual_action\"0\n\005Usage\022\'\n\006ac"
    "tion\030\001 \003(\0132\027.Aseba.ThymioVPL.Action*6\n\013M"
    "ouseButton\022\010\n\004LEFT\020\001\022\n\n\006MIDDLE\020\002\022\t\n\005RIGH"
    "T\020\003\022\006\n\002NO\020\004*\"\n\tBlockType\022\t\n\005EVENT\020\001\022\n\n\006A"
    "CTION\020\002*\200\001\n\017MouseActionType\022\016\n\nMOVE_BLOC"
    "K\020\001\022\021\n\rRELEASE_BLOCK\020\002\022\017\n\013DRAG_BUTTON\020\003\022"
    "\023\n\017DRAG_ACTION_SET\020\004\022\017\n\013DROP_BUTTON\020\005\022\023\n"
    "\017DROP_ACTION_SET\020\006*\204\001\n\tMenuEntry\022\r\n\tOPEN"
    "_HELP\020\001\022\010\n\004SAVE\020\002\022\013\n\007SAVE_AS\020\003\022\014\n\010NEW_FI"
    "LE\020\004\022\r\n\tOPEN_FILE\020\005\022\016\n\nCLOSE_FILE\020\006\022\021\n\rS"
    "AVE_SNAPSHOT\020\007\022\010\n\004STOP\020\010\022\007\n\003RUN\020\t*T\n\017Blo"
    "ckActionType\022\n\n\006SLIDER\020\001\022\n\n\006BUTTON\020\002\022\014\n\010"
    "SET_NOTE\020\003\022\020\n\014SET_DURATION\020\004\022\t\n\005TIMER\020\005", 2639);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UsageProfile.proto", &protobuf_RegisterTypes);
  RowAction::default_instance_ = new RowAction();
  DeviceAction::default_instance_ = new DeviceAction();
  TabletAction::default_instance_ = new TabletAction();
  MouseAction::default_instance_ = new MouseAction();
  AccBlockModeAction::default_instance_ = new AccBlockModeAction();
  AdvancedModeAction::default_instance_ = new AdvancedModeAction();
  AddBlockAction::default_instance_ = new AddBlockAction();
  BlockAction::default_instance_ = new BlockAction();
  MenuAction::default_instance_ = new MenuAction();
  TimeStamp::default_instance_ = new TimeStamp();
  Action::default_instance_ = new Action();
  Action_default_oneof_instance_ = new ActionOneofInstance;
  Usage::default_instance_ = new Usage();
  RowAction::default_instance_->InitAsDefaultInstance();
  DeviceAction::default_instance_->InitAsDefaultInstance();
  TabletAction::default_instance_->InitAsDefaultInstance();
  MouseAction::default_instance_->InitAsDefaultInstance();
  AccBlockModeAction::default_instance_->InitAsDefaultInstance();
  AdvancedModeAction::default_instance_->InitAsDefaultInstance();
  AddBlockAction::default_instance_->InitAsDefaultInstance();
  BlockAction::default_instance_->InitAsDefaultInstance();
  MenuAction::default_instance_->InitAsDefaultInstance();
  TimeStamp::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  Usage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UsageProfile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UsageProfile_2eproto {
  StaticDescriptorInitializer_UsageProfile_2eproto() {
    protobuf_AddDesc_UsageProfile_2eproto();
  }
} static_descriptor_initializer_UsageProfile_2eproto_;
const ::google::protobuf::EnumDescriptor* MouseButton_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MouseButton_descriptor_;
}
bool MouseButton_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BlockType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockType_descriptor_;
}
bool BlockType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MouseActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MouseActionType_descriptor_;
}
bool MouseActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MenuEntry_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuEntry_descriptor_;
}
bool MenuEntry_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BlockActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockActionType_descriptor_;
}
bool BlockActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RowAction_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowAction_ActionType_descriptor_;
}
bool RowAction_ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RowAction_ActionType RowAction::REMOVE;
const RowAction_ActionType RowAction::INSERT;
const RowAction_ActionType RowAction::ActionType_MIN;
const RowAction_ActionType RowAction::ActionType_MAX;
const int RowAction::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RowAction::kRowFieldNumber;
const int RowAction::kTypeFieldNumber;
#endif  // !_MSC_VER

RowAction::RowAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.RowAction)
}

void RowAction::InitAsDefaultInstance() {
}

RowAction::RowAction(const RowAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.RowAction)
}

void RowAction::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowAction::~RowAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.RowAction)
  SharedDtor();
}

void RowAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RowAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowAction_descriptor_;
}

const RowAction& RowAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

RowAction* RowAction::default_instance_ = NULL;

RowAction* RowAction::New() const {
  return new RowAction;
}

void RowAction::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    row_ = 0;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.RowAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 row = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::RowAction_ActionType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::RowAction_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.RowAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.RowAction)
  return false;
#undef DO_
}

void RowAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.RowAction)
  // optional int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.RowAction)
}

::google::protobuf::uint8* RowAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.RowAction)
  // optional int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.RowAction)
  return target;
}

int RowAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowAction::MergeFrom(const RowAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowAction::CopyFrom(const RowAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RowAction::Swap(RowAction* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowAction_descriptor_;
  metadata.reflection = RowAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceAction::kIdFieldNumber;
const int DeviceAction::kVariableFieldNumber;
#endif  // !_MSC_VER

DeviceAction::DeviceAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.DeviceAction)
}

void DeviceAction::InitAsDefaultInstance() {
}

DeviceAction::DeviceAction(const DeviceAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.DeviceAction)
}

void DeviceAction::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAction::~DeviceAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.DeviceAction)
  SharedDtor();
}

void DeviceAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceAction_descriptor_;
}

const DeviceAction& DeviceAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

DeviceAction* DeviceAction::default_instance_ = NULL;

DeviceAction* DeviceAction::New() const {
  return new DeviceAction;
}

void DeviceAction::Clear() {
  id_ = 0;
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.DeviceAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        break;
      }

      // repeated int32 variable = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_variable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_variable())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_variable())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.DeviceAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.DeviceAction)
  return false;
#undef DO_
}

void DeviceAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.DeviceAction)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 variable = 2 [packed = true];
  if (this->variable_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_variable_cached_byte_size_);
  }
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->variable(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.DeviceAction)
}

::google::protobuf::uint8* DeviceAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.DeviceAction)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 variable = 2 [packed = true];
  if (this->variable_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _variable_cached_byte_size_, target);
  }
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->variable(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.DeviceAction)
  return target;
}

int DeviceAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int32 variable = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->variable_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->variable(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _variable_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceAction::MergeFrom(const DeviceAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAction::CopyFrom(const DeviceAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeviceAction::Swap(DeviceAction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    variable_.Swap(&other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceAction_descriptor_;
  metadata.reflection = DeviceAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TabletAction::kCameraXFieldNumber;
const int TabletAction::kCameraYFieldNumber;
const int TabletAction::kCameraZFieldNumber;
const int TabletAction::kCameraAngleXFieldNumber;
const int TabletAction::kCameraAngleYFieldNumber;
const int TabletAction::kCameraAngleZFieldNumber;
const int TabletAction::kThymioXFieldNumber;
const int TabletAction::kThymioZFieldNumber;
const int TabletAction::kThymioAngleYFieldNumber;
const int TabletAction::kRecordingDurationFieldNumber;
const int TabletAction::kLeftTimelinePosFieldNumber;
const int TabletAction::kRightTimelinePosFieldNumber;
const int TabletAction::kAppRecordingFieldNumber;
const int TabletAction::kThymioIsTrackedFieldNumber;
const int TabletAction::kBoardIsTrackedFieldNumber;
const int TabletAction::kSelectedSetIdFieldNumber;
const int TabletAction::kSelectedSetTimeFieldNumber;
#endif  // !_MSC_VER

TabletAction::TabletAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.TabletAction)
}

void TabletAction::InitAsDefaultInstance() {
}

TabletAction::TabletAction(const TabletAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.TabletAction)
}

void TabletAction::SharedCtor() {
  _cached_size_ = 0;
  camerax_ = 0;
  cameray_ = 0;
  cameraz_ = 0;
  cameraanglex_ = 0;
  cameraangley_ = 0;
  cameraanglez_ = 0;
  thymiox_ = 0;
  thymioz_ = 0;
  thymioangley_ = 0;
  recordingduration_ = 0;
  lefttimelinepos_ = 0;
  righttimelinepos_ = 0;
  apprecording_ = false;
  thymioistracked_ = false;
  boardistracked_ = false;
  selectedsetid_ = 0;
  selectedsettime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TabletAction::~TabletAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.TabletAction)
  SharedDtor();
}

void TabletAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TabletAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TabletAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabletAction_descriptor_;
}

const TabletAction& TabletAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

TabletAction* TabletAction::default_instance_ = NULL;

TabletAction* TabletAction::New() const {
  return new TabletAction;
}

void TabletAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TabletAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(camerax_, thymioz_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(thymioangley_, selectedsetid_);
  }
  selectedsettime_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TabletAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.TabletAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float cameraX = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camerax_)));
          set_has_camerax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_cameraY;
        break;
      }

      // required float cameraY = 2;
      case 2: {
        if (tag == 21) {
         parse_cameraY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameray_)));
          set_has_cameray();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cameraZ;
        break;
      }

      // required float cameraZ = 3;
      case 3: {
        if (tag == 29) {
         parse_cameraZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameraz_)));
          set_has_cameraz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cameraAngleX;
        break;
      }

      // required float cameraAngleX = 4;
      case 4: {
        if (tag == 37) {
         parse_cameraAngleX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameraanglex_)));
          set_has_cameraanglex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cameraAngleY;
        break;
      }

      // required float cameraAngleY = 5;
      case 5: {
        if (tag == 45) {
         parse_cameraAngleY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameraangley_)));
          set_has_cameraangley();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cameraAngleZ;
        break;
      }

      // required float cameraAngleZ = 6;
      case 6: {
        if (tag == 53) {
         parse_cameraAngleZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameraanglez_)));
          set_has_cameraanglez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_thymioX;
        break;
      }

      // required float thymioX = 7;
      case 7: {
        if (tag == 61) {
         parse_thymioX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thymiox_)));
          set_has_thymiox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_thymioZ;
        break;
      }

      // required float thymioZ = 8;
      case 8: {
        if (tag == 69) {
         parse_thymioZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thymioz_)));
          set_has_thymioz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_thymioAngleY;
        break;
      }

      // required float thymioAngleY = 9;
      case 9: {
        if (tag == 77) {
         parse_thymioAngleY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thymioangley_)));
          set_has_thymioangley();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_recordingDuration;
        break;
      }

      // required int32 recordingDuration = 10;
      case 10: {
        if (tag == 80) {
         parse_recordingDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordingduration_)));
          set_has_recordingduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_leftTimelinePos;
        break;
      }

      // required int32 leftTimelinePos = 11;
      case 11: {
        if (tag == 88) {
         parse_leftTimelinePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttimelinepos_)));
          set_has_lefttimelinepos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_rightTimelinePos;
        break;
      }

      // required int32 rightTimelinePos = 12;
      case 12: {
        if (tag == 96) {
         parse_rightTimelinePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &righttimelinepos_)));
          set_has_righttimelinepos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_appRecording;
        break;
      }

      // required bool appRecording = 13;
      case 13: {
        if (tag == 104) {
         parse_appRecording:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apprecording_)));
          set_has_apprecording();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_thymioIsTracked;
        break;
      }

      // required bool thymioIsTracked = 14;
      case 14: {
        if (tag == 112) {
         parse_thymioIsTracked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &thymioistracked_)));
          set_has_thymioistracked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_boardIsTracked;
        break;
      }

      // required bool boardIsTracked = 15;
      case 15: {
        if (tag == 120) {
         parse_boardIsTracked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boardistracked_)));
          set_has_boardistracked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_selectedSetId;
        break;
      }

      // optional int32 selectedSetId = 16;
      case 16: {
        if (tag == 128) {
         parse_selectedSetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selectedsetid_)));
          set_has_selectedsetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_selectedSetTime;
        break;
      }

      // optional float selectedSetTime = 17;
      case 17: {
        if (tag == 141) {
         parse_selectedSetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selectedsettime_)));
          set_has_selectedsettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.TabletAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.TabletAction)
  return false;
#undef DO_
}

void TabletAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.TabletAction)
  // required float cameraX = 1;
  if (has_camerax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->camerax(), output);
  }

  // required float cameraY = 2;
  if (has_cameray()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cameray(), output);
  }

  // required float cameraZ = 3;
  if (has_cameraz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cameraz(), output);
  }

  // required float cameraAngleX = 4;
  if (has_cameraanglex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cameraanglex(), output);
  }

  // required float cameraAngleY = 5;
  if (has_cameraangley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cameraangley(), output);
  }

  // required float cameraAngleZ = 6;
  if (has_cameraanglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cameraanglez(), output);
  }

  // required float thymioX = 7;
  if (has_thymiox()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->thymiox(), output);
  }

  // required float thymioZ = 8;
  if (has_thymioz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->thymioz(), output);
  }

  // required float thymioAngleY = 9;
  if (has_thymioangley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->thymioangley(), output);
  }

  // required int32 recordingDuration = 10;
  if (has_recordingduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->recordingduration(), output);
  }

  // required int32 leftTimelinePos = 11;
  if (has_lefttimelinepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lefttimelinepos(), output);
  }

  // required int32 rightTimelinePos = 12;
  if (has_righttimelinepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->righttimelinepos(), output);
  }

  // required bool appRecording = 13;
  if (has_apprecording()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->apprecording(), output);
  }

  // required bool thymioIsTracked = 14;
  if (has_thymioistracked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->thymioistracked(), output);
  }

  // required bool boardIsTracked = 15;
  if (has_boardistracked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->boardistracked(), output);
  }

  // optional int32 selectedSetId = 16;
  if (has_selectedsetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->selectedsetid(), output);
  }

  // optional float selectedSetTime = 17;
  if (has_selectedsettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->selectedsettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.TabletAction)
}

::google::protobuf::uint8* TabletAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.TabletAction)
  // required float cameraX = 1;
  if (has_camerax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->camerax(), target);
  }

  // required float cameraY = 2;
  if (has_cameray()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cameray(), target);
  }

  // required float cameraZ = 3;
  if (has_cameraz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cameraz(), target);
  }

  // required float cameraAngleX = 4;
  if (has_cameraanglex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cameraanglex(), target);
  }

  // required float cameraAngleY = 5;
  if (has_cameraangley()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cameraangley(), target);
  }

  // required float cameraAngleZ = 6;
  if (has_cameraanglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cameraanglez(), target);
  }

  // required float thymioX = 7;
  if (has_thymiox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->thymiox(), target);
  }

  // required float thymioZ = 8;
  if (has_thymioz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->thymioz(), target);
  }

  // required float thymioAngleY = 9;
  if (has_thymioangley()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->thymioangley(), target);
  }

  // required int32 recordingDuration = 10;
  if (has_recordingduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->recordingduration(), target);
  }

  // required int32 leftTimelinePos = 11;
  if (has_lefttimelinepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lefttimelinepos(), target);
  }

  // required int32 rightTimelinePos = 12;
  if (has_righttimelinepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->righttimelinepos(), target);
  }

  // required bool appRecording = 13;
  if (has_apprecording()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->apprecording(), target);
  }

  // required bool thymioIsTracked = 14;
  if (has_thymioistracked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->thymioistracked(), target);
  }

  // required bool boardIsTracked = 15;
  if (has_boardistracked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->boardistracked(), target);
  }

  // optional int32 selectedSetId = 16;
  if (has_selectedsetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->selectedsetid(), target);
  }

  // optional float selectedSetTime = 17;
  if (has_selectedsettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->selectedsettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.TabletAction)
  return target;
}

int TabletAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float cameraX = 1;
    if (has_camerax()) {
      total_size += 1 + 4;
    }

    // required float cameraY = 2;
    if (has_cameray()) {
      total_size += 1 + 4;
    }

    // required float cameraZ = 3;
    if (has_cameraz()) {
      total_size += 1 + 4;
    }

    // required float cameraAngleX = 4;
    if (has_cameraanglex()) {
      total_size += 1 + 4;
    }

    // required float cameraAngleY = 5;
    if (has_cameraangley()) {
      total_size += 1 + 4;
    }

    // required float cameraAngleZ = 6;
    if (has_cameraanglez()) {
      total_size += 1 + 4;
    }

    // required float thymioX = 7;
    if (has_thymiox()) {
      total_size += 1 + 4;
    }

    // required float thymioZ = 8;
    if (has_thymioz()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float thymioAngleY = 9;
    if (has_thymioangley()) {
      total_size += 1 + 4;
    }

    // required int32 recordingDuration = 10;
    if (has_recordingduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordingduration());
    }

    // required int32 leftTimelinePos = 11;
    if (has_lefttimelinepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttimelinepos());
    }

    // required int32 rightTimelinePos = 12;
    if (has_righttimelinepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->righttimelinepos());
    }

    // required bool appRecording = 13;
    if (has_apprecording()) {
      total_size += 1 + 1;
    }

    // required bool thymioIsTracked = 14;
    if (has_thymioistracked()) {
      total_size += 1 + 1;
    }

    // required bool boardIsTracked = 15;
    if (has_boardistracked()) {
      total_size += 1 + 1;
    }

    // optional int32 selectedSetId = 16;
    if (has_selectedsetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selectedsetid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float selectedSetTime = 17;
    if (has_selectedsettime()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TabletAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TabletAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TabletAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TabletAction::MergeFrom(const TabletAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camerax()) {
      set_camerax(from.camerax());
    }
    if (from.has_cameray()) {
      set_cameray(from.cameray());
    }
    if (from.has_cameraz()) {
      set_cameraz(from.cameraz());
    }
    if (from.has_cameraanglex()) {
      set_cameraanglex(from.cameraanglex());
    }
    if (from.has_cameraangley()) {
      set_cameraangley(from.cameraangley());
    }
    if (from.has_cameraanglez()) {
      set_cameraanglez(from.cameraanglez());
    }
    if (from.has_thymiox()) {
      set_thymiox(from.thymiox());
    }
    if (from.has_thymioz()) {
      set_thymioz(from.thymioz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_thymioangley()) {
      set_thymioangley(from.thymioangley());
    }
    if (from.has_recordingduration()) {
      set_recordingduration(from.recordingduration());
    }
    if (from.has_lefttimelinepos()) {
      set_lefttimelinepos(from.lefttimelinepos());
    }
    if (from.has_righttimelinepos()) {
      set_righttimelinepos(from.righttimelinepos());
    }
    if (from.has_apprecording()) {
      set_apprecording(from.apprecording());
    }
    if (from.has_thymioistracked()) {
      set_thymioistracked(from.thymioistracked());
    }
    if (from.has_boardistracked()) {
      set_boardistracked(from.boardistracked());
    }
    if (from.has_selectedsetid()) {
      set_selectedsetid(from.selectedsetid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_selectedsettime()) {
      set_selectedsettime(from.selectedsettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TabletAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TabletAction::CopyFrom(const TabletAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabletAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void TabletAction::Swap(TabletAction* other) {
  if (other != this) {
    std::swap(camerax_, other->camerax_);
    std::swap(cameray_, other->cameray_);
    std::swap(cameraz_, other->cameraz_);
    std::swap(cameraanglex_, other->cameraanglex_);
    std::swap(cameraangley_, other->cameraangley_);
    std::swap(cameraanglez_, other->cameraanglez_);
    std::swap(thymiox_, other->thymiox_);
    std::swap(thymioz_, other->thymioz_);
    std::swap(thymioangley_, other->thymioangley_);
    std::swap(recordingduration_, other->recordingduration_);
    std::swap(lefttimelinepos_, other->lefttimelinepos_);
    std::swap(righttimelinepos_, other->righttimelinepos_);
    std::swap(apprecording_, other->apprecording_);
    std::swap(thymioistracked_, other->thymioistracked_);
    std::swap(boardistracked_, other->boardistracked_);
    std::swap(selectedsetid_, other->selectedsetid_);
    std::swap(selectedsettime_, other->selectedsettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TabletAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TabletAction_descriptor_;
  metadata.reflection = TabletAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MouseAction::kTypeFieldNumber;
const int MouseAction::kButtonFieldNumber;
const int MouseAction::kXPosFieldNumber;
const int MouseAction::kYPosFieldNumber;
const int MouseAction::kBlockNameFieldNumber;
const int MouseAction::kBlockTypeFieldNumber;
const int MouseAction::kRowFieldNumber;
#endif  // !_MSC_VER

MouseAction::MouseAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.MouseAction)
}

void MouseAction::InitAsDefaultInstance() {
}

MouseAction::MouseAction(const MouseAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.MouseAction)
}

void MouseAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  button_ = 1;
  xpos_ = 0;
  ypos_ = 0;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MouseAction::~MouseAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.MouseAction)
  SharedDtor();
}

void MouseAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void MouseAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MouseAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MouseAction_descriptor_;
}

const MouseAction& MouseAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

MouseAction* MouseAction::default_instance_ = NULL;

MouseAction* MouseAction::New() const {
  return new MouseAction;
}

void MouseAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MouseAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(xpos_, ypos_);
    type_ = 1;
    button_ = 1;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
    row_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MouseAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.MouseAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.MouseActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MouseActionType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::MouseActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_button;
        break;
      }

      // required .Aseba.ThymioVPL.MouseButton button = 2;
      case 2: {
        if (tag == 16) {
         parse_button:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MouseButton_IsValid(value)) {
            set_button(static_cast< ::Aseba::ThymioVPL::MouseButton >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_xPos;
        break;
      }

      // optional double xPos = 3;
      case 3: {
        if (tag == 25) {
         parse_xPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_yPos;
        break;
      }

      // optional double yPos = 4;
      case 4: {
        if (tag == 33) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blockName;
        break;
      }

      // optional string blockName = 5;
      case 5: {
        if (tag == 42) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_blockType;
        break;
      }

      // optional string blockType = 6;
      case 6: {
        if (tag == 50) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_row;
        break;
      }

      // optional int32 row = 7;
      case 7: {
        if (tag == 56) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.MouseAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.MouseAction)
  return false;
#undef DO_
}

void MouseAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.MouseAction)
  // required .Aseba.ThymioVPL.MouseActionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .Aseba.ThymioVPL.MouseButton button = 2;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->button(), output);
  }

  // optional double xPos = 3;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xpos(), output);
  }

  // optional double yPos = 4;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ypos(), output);
  }

  // optional string blockName = 5;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->blockname(), output);
  }

  // optional string blockType = 6;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->blocktype(), output);
  }

  // optional int32 row = 7;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.MouseAction)
}

::google::protobuf::uint8* MouseAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.MouseAction)
  // required .Aseba.ThymioVPL.MouseActionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .Aseba.ThymioVPL.MouseButton button = 2;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->button(), target);
  }

  // optional double xPos = 3;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xpos(), target);
  }

  // optional double yPos = 4;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ypos(), target);
  }

  // optional string blockName = 5;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->blockname(), target);
  }

  // optional string blockType = 6;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->blocktype(), target);
  }

  // optional int32 row = 7;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.MouseAction)
  return target;
}

int MouseAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.MouseActionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .Aseba.ThymioVPL.MouseButton button = 2;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->button());
    }

    // optional double xPos = 3;
    if (has_xpos()) {
      total_size += 1 + 8;
    }

    // optional double yPos = 4;
    if (has_ypos()) {
      total_size += 1 + 8;
    }

    // optional string blockName = 5;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 6;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

    // optional int32 row = 7;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MouseAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MouseAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MouseAction::MergeFrom(const MouseAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_button()) {
      set_button(from.button());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MouseAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseAction::CopyFrom(const MouseAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MouseAction::Swap(MouseAction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(button_, other->button_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(row_, other->row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MouseAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MouseAction_descriptor_;
  metadata.reflection = MouseAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccBlockModeAction::kModeFieldNumber;
const int AccBlockModeAction::kBlockNameFieldNumber;
const int AccBlockModeAction::kBlockTypeFieldNumber;
#endif  // !_MSC_VER

AccBlockModeAction::AccBlockModeAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.AccBlockModeAction)
}

void AccBlockModeAction::InitAsDefaultInstance() {
}

AccBlockModeAction::AccBlockModeAction(const AccBlockModeAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.AccBlockModeAction)
}

void AccBlockModeAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mode_ = 0;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccBlockModeAction::~AccBlockModeAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.AccBlockModeAction)
  SharedDtor();
}

void AccBlockModeAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void AccBlockModeAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccBlockModeAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccBlockModeAction_descriptor_;
}

const AccBlockModeAction& AccBlockModeAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

AccBlockModeAction* AccBlockModeAction::default_instance_ = NULL;

AccBlockModeAction* AccBlockModeAction::New() const {
  return new AccBlockModeAction;
}

void AccBlockModeAction::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mode_ = 0;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccBlockModeAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.AccBlockModeAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockName;
        break;
      }

      // optional string blockName = 2;
      case 2: {
        if (tag == 18) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockType;
        break;
      }

      // optional string blockType = 3;
      case 3: {
        if (tag == 26) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.AccBlockModeAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.AccBlockModeAction)
  return false;
#undef DO_
}

void AccBlockModeAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.AccBlockModeAction)
  // required int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockname(), output);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blocktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.AccBlockModeAction)
}

::google::protobuf::uint8* AccBlockModeAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.AccBlockModeAction)
  // required int32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockname(), target);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blocktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.AccBlockModeAction)
  return target;
}

int AccBlockModeAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional string blockName = 2;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 3;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccBlockModeAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccBlockModeAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccBlockModeAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccBlockModeAction::MergeFrom(const AccBlockModeAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccBlockModeAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccBlockModeAction::CopyFrom(const AccBlockModeAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccBlockModeAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccBlockModeAction::Swap(AccBlockModeAction* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccBlockModeAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccBlockModeAction_descriptor_;
  metadata.reflection = AccBlockModeAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdvancedModeAction::kIsAdvancedFieldNumber;
#endif  // !_MSC_VER

AdvancedModeAction::AdvancedModeAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.AdvancedModeAction)
}

void AdvancedModeAction::InitAsDefaultInstance() {
}

AdvancedModeAction::AdvancedModeAction(const AdvancedModeAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.AdvancedModeAction)
}

void AdvancedModeAction::SharedCtor() {
  _cached_size_ = 0;
  isadvanced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvancedModeAction::~AdvancedModeAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.AdvancedModeAction)
  SharedDtor();
}

void AdvancedModeAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvancedModeAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvancedModeAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvancedModeAction_descriptor_;
}

const AdvancedModeAction& AdvancedModeAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

AdvancedModeAction* AdvancedModeAction::default_instance_ = NULL;

AdvancedModeAction* AdvancedModeAction::New() const {
  return new AdvancedModeAction;
}

void AdvancedModeAction::Clear() {
  isadvanced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvancedModeAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.AdvancedModeAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isAdvanced = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadvanced_)));
          set_has_isadvanced();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.AdvancedModeAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.AdvancedModeAction)
  return false;
#undef DO_
}

void AdvancedModeAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.AdvancedModeAction)
  // required bool isAdvanced = 1;
  if (has_isadvanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isadvanced(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.AdvancedModeAction)
}

::google::protobuf::uint8* AdvancedModeAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.AdvancedModeAction)
  // required bool isAdvanced = 1;
  if (has_isadvanced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isadvanced(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.AdvancedModeAction)
  return target;
}

int AdvancedModeAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isAdvanced = 1;
    if (has_isadvanced()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvancedModeAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvancedModeAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvancedModeAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvancedModeAction::MergeFrom(const AdvancedModeAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isadvanced()) {
      set_isadvanced(from.isadvanced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvancedModeAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancedModeAction::CopyFrom(const AdvancedModeAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvancedModeAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdvancedModeAction::Swap(AdvancedModeAction* other) {
  if (other != this) {
    std::swap(isadvanced_, other->isadvanced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvancedModeAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvancedModeAction_descriptor_;
  metadata.reflection = AdvancedModeAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlockAction::kTypeFieldNumber;
const int AddBlockAction::kBlockNameFieldNumber;
const int AddBlockAction::kBlockTypeFieldNumber;
const int AddBlockAction::kRowFieldNumber;
#endif  // !_MSC_VER

AddBlockAction::AddBlockAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.AddBlockAction)
}

void AddBlockAction::InitAsDefaultInstance() {
}

AddBlockAction::AddBlockAction(const AddBlockAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.AddBlockAction)
}

void AddBlockAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlockAction::~AddBlockAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.AddBlockAction)
  SharedDtor();
}

void AddBlockAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void AddBlockAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBlockAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBlockAction_descriptor_;
}

const AddBlockAction& AddBlockAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

AddBlockAction* AddBlockAction::default_instance_ = NULL;

AddBlockAction* AddBlockAction::New() const {
  return new AddBlockAction;
}

void AddBlockAction::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
    row_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBlockAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.AddBlockAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.BlockType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::BlockType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::BlockType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockName;
        break;
      }

      // optional string blockName = 2;
      case 2: {
        if (tag == 18) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockType;
        break;
      }

      // optional string blockType = 3;
      case 3: {
        if (tag == 26) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_row;
        break;
      }

      // optional int32 row = 4;
      case 4: {
        if (tag == 32) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.AddBlockAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.AddBlockAction)
  return false;
#undef DO_
}

void AddBlockAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.AddBlockAction)
  // required .Aseba.ThymioVPL.BlockType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockname(), output);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blocktype(), output);
  }

  // optional int32 row = 4;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.AddBlockAction)
}

::google::protobuf::uint8* AddBlockAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.AddBlockAction)
  // required .Aseba.ThymioVPL.BlockType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string blockName = 2;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockname(), target);
  }

  // optional string blockType = 3;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blocktype(), target);
  }

  // optional int32 row = 4;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.AddBlockAction)
  return target;
}

int AddBlockAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.BlockType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string blockName = 2;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 3;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

    // optional int32 row = 4;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlockAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBlockAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBlockAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBlockAction::MergeFrom(const AddBlockAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBlockAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlockAction::CopyFrom(const AddBlockAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddBlockAction::Swap(AddBlockAction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(row_, other->row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBlockAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBlockAction_descriptor_;
  metadata.reflection = AddBlockAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockAction::kTypeFieldNumber;
const int BlockAction::kRowFieldNumber;
const int BlockAction::kBlockNameFieldNumber;
const int BlockAction::kBlockTypeFieldNumber;
const int BlockAction::kElementIdFieldNumber;
const int BlockAction::kSliderValueFieldNumber;
const int BlockAction::kSoundValueFieldNumber;
const int BlockAction::kTimerValueFieldNumber;
const int BlockAction::kButtonValueFieldNumber;
#endif  // !_MSC_VER

BlockAction::BlockAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.BlockAction)
}

void BlockAction::InitAsDefaultInstance() {
}

BlockAction::BlockAction(const BlockAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.BlockAction)
}

void BlockAction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  row_ = 0;
  blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elementid_ = 0;
  slidervalue_ = 0;
  soundvalue_ = 0;
  timervalue_ = 0;
  buttonvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockAction::~BlockAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.BlockAction)
  SharedDtor();
}

void BlockAction::SharedDtor() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (this != default_instance_) {
  }
}

void BlockAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockAction_descriptor_;
}

const BlockAction& BlockAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

BlockAction* BlockAction::default_instance_ = NULL;

BlockAction* BlockAction::New() const {
  return new BlockAction;
}

void BlockAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlockAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(elementid_, timervalue_);
    type_ = 1;
    row_ = 0;
    if (has_blockname()) {
      if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blockname_->clear();
      }
    }
    if (has_blocktype()) {
      if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blocktype_->clear();
      }
    }
  }
  buttonvalue_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.BlockAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.BlockActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::BlockActionType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::BlockActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }

      // optional int32 row = 2;
      case 2: {
        if (tag == 16) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockName;
        break;
      }

      // optional string blockName = 3;
      case 3: {
        if (tag == 26) {
         parse_blockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockname().data(), this->blockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blockname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_blockType;
        break;
      }

      // optional string blockType = 4;
      case 4: {
        if (tag == 34) {
         parse_blockType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blocktype().data(), this->blocktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "blocktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_elementId;
        break;
      }

      // optional int32 elementId = 5;
      case 5: {
        if (tag == 40) {
         parse_elementId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sliderValue;
        break;
      }

      // optional int32 sliderValue = 6;
      case 6: {
        if (tag == 48) {
         parse_sliderValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slidervalue_)));
          set_has_slidervalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_soundValue;
        break;
      }

      // optional int32 soundValue = 7;
      case 7: {
        if (tag == 56) {
         parse_soundValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundvalue_)));
          set_has_soundvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_timerValue;
        break;
      }

      // optional int32 timerValue = 8;
      case 8: {
        if (tag == 64) {
         parse_timerValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timervalue_)));
          set_has_timervalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_buttonValue;
        break;
      }

      // optional int32 buttonValue = 9;
      case 9: {
        if (tag == 72) {
         parse_buttonValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttonvalue_)));
          set_has_buttonvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.BlockAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.BlockAction)
  return false;
#undef DO_
}

void BlockAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.BlockAction)
  // required .Aseba.ThymioVPL.BlockActionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->row(), output);
  }

  // optional string blockName = 3;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blockname(), output);
  }

  // optional string blockType = 4;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->blocktype(), output);
  }

  // optional int32 elementId = 5;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->elementid(), output);
  }

  // optional int32 sliderValue = 6;
  if (has_slidervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slidervalue(), output);
  }

  // optional int32 soundValue = 7;
  if (has_soundvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->soundvalue(), output);
  }

  // optional int32 timerValue = 8;
  if (has_timervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timervalue(), output);
  }

  // optional int32 buttonValue = 9;
  if (has_buttonvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buttonvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.BlockAction)
}

::google::protobuf::uint8* BlockAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.BlockAction)
  // required .Aseba.ThymioVPL.BlockActionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 row = 2;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->row(), target);
  }

  // optional string blockName = 3;
  if (has_blockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockname().data(), this->blockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blockname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blockname(), target);
  }

  // optional string blockType = 4;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blocktype().data(), this->blocktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "blocktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->blocktype(), target);
  }

  // optional int32 elementId = 5;
  if (has_elementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->elementid(), target);
  }

  // optional int32 sliderValue = 6;
  if (has_slidervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slidervalue(), target);
  }

  // optional int32 soundValue = 7;
  if (has_soundvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->soundvalue(), target);
  }

  // optional int32 timerValue = 8;
  if (has_timervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timervalue(), target);
  }

  // optional int32 buttonValue = 9;
  if (has_buttonvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buttonvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.BlockAction)
  return target;
}

int BlockAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.BlockActionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // optional string blockName = 3;
    if (has_blockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockname());
    }

    // optional string blockType = 4;
    if (has_blocktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blocktype());
    }

    // optional int32 elementId = 5;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elementid());
    }

    // optional int32 sliderValue = 6;
    if (has_slidervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slidervalue());
    }

    // optional int32 soundValue = 7;
    if (has_soundvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soundvalue());
    }

    // optional int32 timerValue = 8;
    if (has_timervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timervalue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 buttonValue = 9;
    if (has_buttonvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buttonvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockAction::MergeFrom(const BlockAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_blockname()) {
      set_blockname(from.blockname());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_slidervalue()) {
      set_slidervalue(from.slidervalue());
    }
    if (from.has_soundvalue()) {
      set_soundvalue(from.soundvalue());
    }
    if (from.has_timervalue()) {
      set_timervalue(from.timervalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buttonvalue()) {
      set_buttonvalue(from.buttonvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockAction::CopyFrom(const BlockAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlockAction::Swap(BlockAction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(row_, other->row_);
    std::swap(blockname_, other->blockname_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(elementid_, other->elementid_);
    std::swap(slidervalue_, other->slidervalue_);
    std::swap(soundvalue_, other->soundvalue_);
    std::swap(timervalue_, other->timervalue_);
    std::swap(buttonvalue_, other->buttonvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockAction_descriptor_;
  metadata.reflection = BlockAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuAction::kEntryFieldNumber;
#endif  // !_MSC_VER

MenuAction::MenuAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.MenuAction)
}

void MenuAction::InitAsDefaultInstance() {
}

MenuAction::MenuAction(const MenuAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.MenuAction)
}

void MenuAction::SharedCtor() {
  _cached_size_ = 0;
  entry_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuAction::~MenuAction() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.MenuAction)
  SharedDtor();
}

void MenuAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MenuAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuAction_descriptor_;
}

const MenuAction& MenuAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

MenuAction* MenuAction::default_instance_ = NULL;

MenuAction* MenuAction::New() const {
  return new MenuAction;
}

void MenuAction::Clear() {
  entry_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.MenuAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.MenuEntry entry = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::MenuEntry_IsValid(value)) {
            set_entry(static_cast< ::Aseba::ThymioVPL::MenuEntry >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.MenuAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.MenuAction)
  return false;
#undef DO_
}

void MenuAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.MenuAction)
  // required .Aseba.ThymioVPL.MenuEntry entry = 1;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->entry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.MenuAction)
}

::google::protobuf::uint8* MenuAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.MenuAction)
  // required .Aseba.ThymioVPL.MenuEntry entry = 1;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->entry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.MenuAction)
  return target;
}

int MenuAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.MenuEntry entry = 1;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuAction::MergeFrom(const MenuAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry()) {
      set_entry(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuAction::CopyFrom(const MenuAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MenuAction::Swap(MenuAction* other) {
  if (other != this) {
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuAction_descriptor_;
  metadata.reflection = MenuAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeStamp::kTimestampFieldNumber;
const int TimeStamp::kMillisecondsFieldNumber;
#endif  // !_MSC_VER

TimeStamp::TimeStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.TimeStamp)
}

void TimeStamp::InitAsDefaultInstance() {
}

TimeStamp::TimeStamp(const TimeStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.TimeStamp)
}

void TimeStamp::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  milliseconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.TimeStamp)
  SharedDtor();
}

void TimeStamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeStamp_descriptor_;
}

const TimeStamp& TimeStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

TimeStamp* TimeStamp::default_instance_ = NULL;

TimeStamp* TimeStamp::New() const {
  return new TimeStamp;
}

void TimeStamp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeStamp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timestamp_, milliseconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.TimeStamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_milliseconds;
        break;
      }

      // required uint32 milliseconds = 2;
      case 2: {
        if (tag == 16) {
         parse_milliseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &milliseconds_)));
          set_has_milliseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.TimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.TimeStamp)
  return false;
#undef DO_
}

void TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.TimeStamp)
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // required uint32 milliseconds = 2;
  if (has_milliseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->milliseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.TimeStamp)
}

::google::protobuf::uint8* TimeStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.TimeStamp)
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // required uint32 milliseconds = 2;
  if (has_milliseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->milliseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.TimeStamp)
  return target;
}

int TimeStamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required uint32 milliseconds = 2;
    if (has_milliseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->milliseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_milliseconds()) {
      set_milliseconds(from.milliseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimeStamp::Swap(TimeStamp* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(milliseconds_, other->milliseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeStamp_descriptor_;
  metadata.reflection = TimeStamp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Action_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_ActionType_descriptor_;
}
bool Action_ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Action_ActionType Action::ADVANCED_MODE;
const Action_ActionType Action::ADD_BLOCK;
const Action_ActionType Action::ACC_BLOCK_MODE;
const Action_ActionType Action::MENU;
const Action_ActionType Action::MOUSE_ACTION;
const Action_ActionType Action::DEVICE_ACTION;
const Action_ActionType Action::BLOCK_ACTION;
const Action_ActionType Action::ROW;
const Action_ActionType Action::TABLET;
const Action_ActionType Action::ActionType_MIN;
const Action_ActionType Action::ActionType_MAX;
const int Action::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Action::kTypeFieldNumber;
const int Action::kProgramStateAsXmlFieldNumber;
const int Action::kTimeFieldNumber;
const int Action::kRowActionFieldNumber;
const int Action::kAdvancedModeActionFieldNumber;
const int Action::kAddBlockActionFieldNumber;
const int Action::kAccBlockModeActionFieldNumber;
const int Action::kMenuActionFieldNumber;
const int Action::kMouseActionFieldNumber;
const int Action::kDeviceActionFieldNumber;
const int Action::kBlockActionFieldNumber;
const int Action::kTabletActionFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.Action)
}

void Action::InitAsDefaultInstance() {
  time_ = const_cast< ::Aseba::ThymioVPL::TimeStamp*>(&::Aseba::ThymioVPL::TimeStamp::default_instance());
  Action_default_oneof_instance_->rowaction_ = const_cast< ::Aseba::ThymioVPL::RowAction*>(&::Aseba::ThymioVPL::RowAction::default_instance());
  Action_default_oneof_instance_->advancedmodeaction_ = const_cast< ::Aseba::ThymioVPL::AdvancedModeAction*>(&::Aseba::ThymioVPL::AdvancedModeAction::default_instance());
  Action_default_oneof_instance_->addblockaction_ = const_cast< ::Aseba::ThymioVPL::AddBlockAction*>(&::Aseba::ThymioVPL::AddBlockAction::default_instance());
  Action_default_oneof_instance_->accblockmodeaction_ = const_cast< ::Aseba::ThymioVPL::AccBlockModeAction*>(&::Aseba::ThymioVPL::AccBlockModeAction::default_instance());
  Action_default_oneof_instance_->menuaction_ = const_cast< ::Aseba::ThymioVPL::MenuAction*>(&::Aseba::ThymioVPL::MenuAction::default_instance());
  Action_default_oneof_instance_->mouseaction_ = const_cast< ::Aseba::ThymioVPL::MouseAction*>(&::Aseba::ThymioVPL::MouseAction::default_instance());
  Action_default_oneof_instance_->deviceaction_ = const_cast< ::Aseba::ThymioVPL::DeviceAction*>(&::Aseba::ThymioVPL::DeviceAction::default_instance());
  Action_default_oneof_instance_->blockaction_ = const_cast< ::Aseba::ThymioVPL::BlockAction*>(&::Aseba::ThymioVPL::BlockAction::default_instance());
  Action_default_oneof_instance_->tabletaction_ = const_cast< ::Aseba::ThymioVPL::TabletAction*>(&::Aseba::ThymioVPL::TabletAction::default_instance());
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.Action)
}

void Action::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  programstateasxml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_actual_action();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (programstateasxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete programstateasxml_;
  }
  if (has_actual_action()) {
    clear_actual_action();
  }
  if (this != default_instance_) {
    delete time_;
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::clear_actual_action() {
  switch(actual_action_case()) {
    case kRowAction: {
      delete actual_action_.rowaction_;
      break;
    }
    case kAdvancedModeAction: {
      delete actual_action_.advancedmodeaction_;
      break;
    }
    case kAddBlockAction: {
      delete actual_action_.addblockaction_;
      break;
    }
    case kAccBlockModeAction: {
      delete actual_action_.accblockmodeaction_;
      break;
    }
    case kMenuAction: {
      delete actual_action_.menuaction_;
      break;
    }
    case kMouseAction: {
      delete actual_action_.mouseaction_;
      break;
    }
    case kDeviceAction: {
      delete actual_action_.deviceaction_;
      break;
    }
    case kBlockAction: {
      delete actual_action_.blockaction_;
      break;
    }
    case kTabletAction: {
      delete actual_action_.tabletaction_;
      break;
    }
    case ACTUAL_ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTUAL_ACTION_NOT_SET;
}


void Action::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    if (has_programstateasxml()) {
      if (programstateasxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        programstateasxml_->clear();
      }
    }
    if (has_time()) {
      if (time_ != NULL) time_->::Aseba::ThymioVPL::TimeStamp::Clear();
    }
  }
  clear_actual_action();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aseba.ThymioVPL.Action.ActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aseba::ThymioVPL::Action_ActionType_IsValid(value)) {
            set_type(static_cast< ::Aseba::ThymioVPL::Action_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_programStateAsXml;
        break;
      }

      // optional string programStateAsXml = 2;
      case 2: {
        if (tag == 18) {
         parse_programStateAsXml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_programstateasxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->programstateasxml().data(), this->programstateasxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "programstateasxml");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // required .Aseba.ThymioVPL.TimeStamp time = 3;
      case 3: {
        if (tag == 26) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rowAction;
        break;
      }

      // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
      case 10: {
        if (tag == 82) {
         parse_rowAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rowaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_advancedModeAction;
        break;
      }

      // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 11;
      case 11: {
        if (tag == 90) {
         parse_advancedModeAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advancedmodeaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_addBlockAction;
        break;
      }

      // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 12;
      case 12: {
        if (tag == 98) {
         parse_addBlockAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addblockaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_accBlockModeAction;
        break;
      }

      // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 13;
      case 13: {
        if (tag == 106) {
         parse_accBlockModeAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accblockmodeaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_menuAction;
        break;
      }

      // optional .Aseba.ThymioVPL.MenuAction menuAction = 14;
      case 14: {
        if (tag == 114) {
         parse_menuAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_menuaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_mouseAction;
        break;
      }

      // optional .Aseba.ThymioVPL.MouseAction mouseAction = 15;
      case 15: {
        if (tag == 122) {
         parse_mouseAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouseaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_deviceAction;
        break;
      }

      // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 16;
      case 16: {
        if (tag == 130) {
         parse_deviceAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_blockAction;
        break;
      }

      // optional .Aseba.ThymioVPL.BlockAction blockAction = 17;
      case 17: {
        if (tag == 138) {
         parse_blockAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blockaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_tabletAction;
        break;
      }

      // optional .Aseba.ThymioVPL.TabletAction tabletAction = 18;
      case 18: {
        if (tag == 146) {
         parse_tabletAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tabletaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.Action)
  // required .Aseba.ThymioVPL.Action.ActionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string programStateAsXml = 2;
  if (has_programstateasxml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->programstateasxml().data(), this->programstateasxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "programstateasxml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->programstateasxml(), output);
  }

  // required .Aseba.ThymioVPL.TimeStamp time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->time(), output);
  }

  // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
  if (has_rowaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rowaction(), output);
  }

  // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 11;
  if (has_advancedmodeaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->advancedmodeaction(), output);
  }

  // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 12;
  if (has_addblockaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->addblockaction(), output);
  }

  // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 13;
  if (has_accblockmodeaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->accblockmodeaction(), output);
  }

  // optional .Aseba.ThymioVPL.MenuAction menuAction = 14;
  if (has_menuaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->menuaction(), output);
  }

  // optional .Aseba.ThymioVPL.MouseAction mouseAction = 15;
  if (has_mouseaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->mouseaction(), output);
  }

  // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 16;
  if (has_deviceaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->deviceaction(), output);
  }

  // optional .Aseba.ThymioVPL.BlockAction blockAction = 17;
  if (has_blockaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->blockaction(), output);
  }

  // optional .Aseba.ThymioVPL.TabletAction tabletAction = 18;
  if (has_tabletaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->tabletaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.Action)
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.Action)
  // required .Aseba.ThymioVPL.Action.ActionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string programStateAsXml = 2;
  if (has_programstateasxml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->programstateasxml().data(), this->programstateasxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "programstateasxml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->programstateasxml(), target);
  }

  // required .Aseba.ThymioVPL.TimeStamp time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->time(), target);
  }

  // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
  if (has_rowaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rowaction(), target);
  }

  // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 11;
  if (has_advancedmodeaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->advancedmodeaction(), target);
  }

  // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 12;
  if (has_addblockaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->addblockaction(), target);
  }

  // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 13;
  if (has_accblockmodeaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->accblockmodeaction(), target);
  }

  // optional .Aseba.ThymioVPL.MenuAction menuAction = 14;
  if (has_menuaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->menuaction(), target);
  }

  // optional .Aseba.ThymioVPL.MouseAction mouseAction = 15;
  if (has_mouseaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->mouseaction(), target);
  }

  // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 16;
  if (has_deviceaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->deviceaction(), target);
  }

  // optional .Aseba.ThymioVPL.BlockAction blockAction = 17;
  if (has_blockaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->blockaction(), target);
  }

  // optional .Aseba.ThymioVPL.TabletAction tabletAction = 18;
  if (has_tabletaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->tabletaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.Action)
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aseba.ThymioVPL.Action.ActionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string programStateAsXml = 2;
    if (has_programstateasxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->programstateasxml());
    }

    // required .Aseba.ThymioVPL.TimeStamp time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

  }
  switch (actual_action_case()) {
    // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
    case kRowAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rowaction());
      break;
    }
    // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 11;
    case kAdvancedModeAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advancedmodeaction());
      break;
    }
    // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 12;
    case kAddBlockAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addblockaction());
      break;
    }
    // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 13;
    case kAccBlockModeAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accblockmodeaction());
      break;
    }
    // optional .Aseba.ThymioVPL.MenuAction menuAction = 14;
    case kMenuAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->menuaction());
      break;
    }
    // optional .Aseba.ThymioVPL.MouseAction mouseAction = 15;
    case kMouseAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mouseaction());
      break;
    }
    // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 16;
    case kDeviceAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deviceaction());
      break;
    }
    // optional .Aseba.ThymioVPL.BlockAction blockAction = 17;
    case kBlockAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blockaction());
      break;
    }
    // optional .Aseba.ThymioVPL.TabletAction tabletAction = 18;
    case kTabletAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tabletaction());
      break;
    }
    case ACTUAL_ACTION_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.actual_action_case()) {
    case kRowAction: {
      mutable_rowaction()->::Aseba::ThymioVPL::RowAction::MergeFrom(from.rowaction());
      break;
    }
    case kAdvancedModeAction: {
      mutable_advancedmodeaction()->::Aseba::ThymioVPL::AdvancedModeAction::MergeFrom(from.advancedmodeaction());
      break;
    }
    case kAddBlockAction: {
      mutable_addblockaction()->::Aseba::ThymioVPL::AddBlockAction::MergeFrom(from.addblockaction());
      break;
    }
    case kAccBlockModeAction: {
      mutable_accblockmodeaction()->::Aseba::ThymioVPL::AccBlockModeAction::MergeFrom(from.accblockmodeaction());
      break;
    }
    case kMenuAction: {
      mutable_menuaction()->::Aseba::ThymioVPL::MenuAction::MergeFrom(from.menuaction());
      break;
    }
    case kMouseAction: {
      mutable_mouseaction()->::Aseba::ThymioVPL::MouseAction::MergeFrom(from.mouseaction());
      break;
    }
    case kDeviceAction: {
      mutable_deviceaction()->::Aseba::ThymioVPL::DeviceAction::MergeFrom(from.deviceaction());
      break;
    }
    case kBlockAction: {
      mutable_blockaction()->::Aseba::ThymioVPL::BlockAction::MergeFrom(from.blockaction());
      break;
    }
    case kTabletAction: {
      mutable_tabletaction()->::Aseba::ThymioVPL::TabletAction::MergeFrom(from.tabletaction());
      break;
    }
    case ACTUAL_ACTION_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_programstateasxml()) {
      set_programstateasxml(from.programstateasxml());
    }
    if (from.has_time()) {
      mutable_time()->::Aseba::ThymioVPL::TimeStamp::MergeFrom(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  if (has_rowaction()) {
    if (!this->rowaction().IsInitialized()) return false;
  }
  if (has_advancedmodeaction()) {
    if (!this->advancedmodeaction().IsInitialized()) return false;
  }
  if (has_addblockaction()) {
    if (!this->addblockaction().IsInitialized()) return false;
  }
  if (has_accblockmodeaction()) {
    if (!this->accblockmodeaction().IsInitialized()) return false;
  }
  if (has_menuaction()) {
    if (!this->menuaction().IsInitialized()) return false;
  }
  if (has_mouseaction()) {
    if (!this->mouseaction().IsInitialized()) return false;
  }
  if (has_deviceaction()) {
    if (!this->deviceaction().IsInitialized()) return false;
  }
  if (has_blockaction()) {
    if (!this->blockaction().IsInitialized()) return false;
  }
  if (has_tabletaction()) {
    if (!this->tabletaction().IsInitialized()) return false;
  }
  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(programstateasxml_, other->programstateasxml_);
    std::swap(time_, other->time_);
    std::swap(actual_action_, other->actual_action_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Usage::kActionFieldNumber;
#endif  // !_MSC_VER

Usage::Usage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Aseba.ThymioVPL.Usage)
}

void Usage::InitAsDefaultInstance() {
}

Usage::Usage(const Usage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Aseba.ThymioVPL.Usage)
}

void Usage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Usage::~Usage() {
  // @@protoc_insertion_point(destructor:Aseba.ThymioVPL.Usage)
  SharedDtor();
}

void Usage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Usage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Usage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Usage_descriptor_;
}

const Usage& Usage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsageProfile_2eproto();
  return *default_instance_;
}

Usage* Usage::default_instance_ = NULL;

Usage* Usage::New() const {
  return new Usage;
}

void Usage::Clear() {
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Usage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Aseba.ThymioVPL.Usage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Aseba.ThymioVPL.Action action = 1;
      case 1: {
        if (tag == 10) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_action;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Aseba.ThymioVPL.Usage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Aseba.ThymioVPL.Usage)
  return false;
#undef DO_
}

void Usage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Aseba.ThymioVPL.Usage)
  // repeated .Aseba.ThymioVPL.Action action = 1;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->action(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Aseba.ThymioVPL.Usage)
}

::google::protobuf::uint8* Usage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aseba.ThymioVPL.Usage)
  // repeated .Aseba.ThymioVPL.Action action = 1;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->action(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aseba.ThymioVPL.Usage)
  return target;
}

int Usage::ByteSize() const {
  int total_size = 0;

  // repeated .Aseba.ThymioVPL.Action action = 1;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Usage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Usage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Usage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Usage::MergeFrom(const Usage& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Usage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Usage::CopyFrom(const Usage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Usage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->action())) return false;
  return true;
}

void Usage::Swap(Usage* other) {
  if (other != this) {
    action_.Swap(&other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Usage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Usage_descriptor_;
  metadata.reflection = Usage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ThymioVPL
}  // namespace Aseba

// @@protoc_insertion_point(global_scope)
