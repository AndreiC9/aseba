// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UsageProfile.proto

#ifndef PROTOBUF_UsageProfile_2eproto__INCLUDED
#define PROTOBUF_UsageProfile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Aseba {
namespace ThymioVPL {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UsageProfile_2eproto();
void protobuf_AssignDesc_UsageProfile_2eproto();
void protobuf_ShutdownFile_UsageProfile_2eproto();

class RowAction;
class DeviceAction;
class TabletAction;
class MouseAction;
class AccBlockModeAction;
class AdvancedModeAction;
class AddBlockAction;
class BlockAction;
class MenuAction;
class TimeStamp;
class Action;
class Usage;

enum RowAction_ActionType {
  RowAction_ActionType_REMOVE = 1,
  RowAction_ActionType_INSERT = 2
};
bool RowAction_ActionType_IsValid(int value);
const RowAction_ActionType RowAction_ActionType_ActionType_MIN = RowAction_ActionType_REMOVE;
const RowAction_ActionType RowAction_ActionType_ActionType_MAX = RowAction_ActionType_INSERT;
const int RowAction_ActionType_ActionType_ARRAYSIZE = RowAction_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RowAction_ActionType_descriptor();
inline const ::std::string& RowAction_ActionType_Name(RowAction_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RowAction_ActionType_descriptor(), value);
}
inline bool RowAction_ActionType_Parse(
    const ::std::string& name, RowAction_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RowAction_ActionType>(
    RowAction_ActionType_descriptor(), name, value);
}
enum Action_ActionType {
  Action_ActionType_ADVANCED_MODE = 1,
  Action_ActionType_ADD_BLOCK = 2,
  Action_ActionType_ACC_BLOCK_MODE = 3,
  Action_ActionType_MENU = 4,
  Action_ActionType_MOUSE_ACTION = 5,
  Action_ActionType_DEVICE_ACTION = 6,
  Action_ActionType_BLOCK_ACTION = 7,
  Action_ActionType_ROW = 8,
  Action_ActionType_TABLET = 9
};
bool Action_ActionType_IsValid(int value);
const Action_ActionType Action_ActionType_ActionType_MIN = Action_ActionType_ADVANCED_MODE;
const Action_ActionType Action_ActionType_ActionType_MAX = Action_ActionType_TABLET;
const int Action_ActionType_ActionType_ARRAYSIZE = Action_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_ActionType_descriptor();
inline const ::std::string& Action_ActionType_Name(Action_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_ActionType_descriptor(), value);
}
inline bool Action_ActionType_Parse(
    const ::std::string& name, Action_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action_ActionType>(
    Action_ActionType_descriptor(), name, value);
}
enum MouseButton {
  LEFT = 1,
  MIDDLE = 2,
  RIGHT = 3,
  NO = 4
};
bool MouseButton_IsValid(int value);
const MouseButton MouseButton_MIN = LEFT;
const MouseButton MouseButton_MAX = NO;
const int MouseButton_ARRAYSIZE = MouseButton_MAX + 1;

const ::google::protobuf::EnumDescriptor* MouseButton_descriptor();
inline const ::std::string& MouseButton_Name(MouseButton value) {
  return ::google::protobuf::internal::NameOfEnum(
    MouseButton_descriptor(), value);
}
inline bool MouseButton_Parse(
    const ::std::string& name, MouseButton* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MouseButton>(
    MouseButton_descriptor(), name, value);
}
enum BlockType {
  EVENT = 1,
  ACTION = 2
};
bool BlockType_IsValid(int value);
const BlockType BlockType_MIN = EVENT;
const BlockType BlockType_MAX = ACTION;
const int BlockType_ARRAYSIZE = BlockType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockType_descriptor();
inline const ::std::string& BlockType_Name(BlockType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockType_descriptor(), value);
}
inline bool BlockType_Parse(
    const ::std::string& name, BlockType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockType>(
    BlockType_descriptor(), name, value);
}
enum MouseActionType {
  MOVE_BLOCK = 1,
  RELEASE_BLOCK = 2,
  DRAG_BUTTON = 3,
  DRAG_ACTION_SET = 4,
  DROP_BUTTON = 5,
  DROP_ACTION_SET = 6
};
bool MouseActionType_IsValid(int value);
const MouseActionType MouseActionType_MIN = MOVE_BLOCK;
const MouseActionType MouseActionType_MAX = DROP_ACTION_SET;
const int MouseActionType_ARRAYSIZE = MouseActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MouseActionType_descriptor();
inline const ::std::string& MouseActionType_Name(MouseActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MouseActionType_descriptor(), value);
}
inline bool MouseActionType_Parse(
    const ::std::string& name, MouseActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MouseActionType>(
    MouseActionType_descriptor(), name, value);
}
enum MenuEntry {
  OPEN_HELP = 1,
  SAVE = 2,
  SAVE_AS = 3,
  NEW_FILE = 4,
  OPEN_FILE = 5,
  CLOSE_FILE = 6,
  SAVE_SNAPSHOT = 7,
  STOP = 8,
  RUN = 9
};
bool MenuEntry_IsValid(int value);
const MenuEntry MenuEntry_MIN = OPEN_HELP;
const MenuEntry MenuEntry_MAX = RUN;
const int MenuEntry_ARRAYSIZE = MenuEntry_MAX + 1;

const ::google::protobuf::EnumDescriptor* MenuEntry_descriptor();
inline const ::std::string& MenuEntry_Name(MenuEntry value) {
  return ::google::protobuf::internal::NameOfEnum(
    MenuEntry_descriptor(), value);
}
inline bool MenuEntry_Parse(
    const ::std::string& name, MenuEntry* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MenuEntry>(
    MenuEntry_descriptor(), name, value);
}
enum BlockActionType {
  SLIDER = 1,
  BUTTON = 2,
  SET_NOTE = 3,
  SET_DURATION = 4,
  TIMER = 5
};
bool BlockActionType_IsValid(int value);
const BlockActionType BlockActionType_MIN = SLIDER;
const BlockActionType BlockActionType_MAX = TIMER;
const int BlockActionType_ARRAYSIZE = BlockActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockActionType_descriptor();
inline const ::std::string& BlockActionType_Name(BlockActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockActionType_descriptor(), value);
}
inline bool BlockActionType_Parse(
    const ::std::string& name, BlockActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockActionType>(
    BlockActionType_descriptor(), name, value);
}
// ===================================================================

class RowAction : public ::google::protobuf::Message {
 public:
  RowAction();
  virtual ~RowAction();

  RowAction(const RowAction& from);

  inline RowAction& operator=(const RowAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RowAction& default_instance();

  void Swap(RowAction* other);

  // implements Message ----------------------------------------------

  RowAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RowAction& from);
  void MergeFrom(const RowAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RowAction_ActionType ActionType;
  static const ActionType REMOVE = RowAction_ActionType_REMOVE;
  static const ActionType INSERT = RowAction_ActionType_INSERT;
  static inline bool ActionType_IsValid(int value) {
    return RowAction_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    RowAction_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    RowAction_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    RowAction_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return RowAction_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return RowAction_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return RowAction_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 row = 1;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 1;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Aseba::ThymioVPL::RowAction_ActionType type() const;
  inline void set_type(::Aseba::ThymioVPL::RowAction_ActionType value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.RowAction)
 private:
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 row_;
  int type_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static RowAction* default_instance_;
};
// -------------------------------------------------------------------

class DeviceAction : public ::google::protobuf::Message {
 public:
  DeviceAction();
  virtual ~DeviceAction();

  DeviceAction(const DeviceAction& from);

  inline DeviceAction& operator=(const DeviceAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceAction& default_instance();

  void Swap(DeviceAction* other);

  // implements Message ----------------------------------------------

  DeviceAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceAction& from);
  void MergeFrom(const DeviceAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 variable = 2 [packed = true];
  inline int variable_size() const;
  inline void clear_variable();
  static const int kVariableFieldNumber = 2;
  inline ::google::protobuf::int32 variable(int index) const;
  inline void set_variable(int index, ::google::protobuf::int32 value);
  inline void add_variable(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      variable() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_variable();

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.DeviceAction)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > variable_;
  mutable int _variable_cached_byte_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static DeviceAction* default_instance_;
};
// -------------------------------------------------------------------

class TabletAction : public ::google::protobuf::Message {
 public:
  TabletAction();
  virtual ~TabletAction();

  TabletAction(const TabletAction& from);

  inline TabletAction& operator=(const TabletAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TabletAction& default_instance();

  void Swap(TabletAction* other);

  // implements Message ----------------------------------------------

  TabletAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TabletAction& from);
  void MergeFrom(const TabletAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float cameraX = 1;
  inline bool has_camerax() const;
  inline void clear_camerax();
  static const int kCameraXFieldNumber = 1;
  inline float camerax() const;
  inline void set_camerax(float value);

  // required float cameraY = 2;
  inline bool has_cameray() const;
  inline void clear_cameray();
  static const int kCameraYFieldNumber = 2;
  inline float cameray() const;
  inline void set_cameray(float value);

  // required float cameraZ = 3;
  inline bool has_cameraz() const;
  inline void clear_cameraz();
  static const int kCameraZFieldNumber = 3;
  inline float cameraz() const;
  inline void set_cameraz(float value);

  // required float cameraAngleX = 4;
  inline bool has_cameraanglex() const;
  inline void clear_cameraanglex();
  static const int kCameraAngleXFieldNumber = 4;
  inline float cameraanglex() const;
  inline void set_cameraanglex(float value);

  // required float cameraAngleY = 5;
  inline bool has_cameraangley() const;
  inline void clear_cameraangley();
  static const int kCameraAngleYFieldNumber = 5;
  inline float cameraangley() const;
  inline void set_cameraangley(float value);

  // required float cameraAngleZ = 6;
  inline bool has_cameraanglez() const;
  inline void clear_cameraanglez();
  static const int kCameraAngleZFieldNumber = 6;
  inline float cameraanglez() const;
  inline void set_cameraanglez(float value);

  // required float thymioX = 7;
  inline bool has_thymiox() const;
  inline void clear_thymiox();
  static const int kThymioXFieldNumber = 7;
  inline float thymiox() const;
  inline void set_thymiox(float value);

  // required float thymioZ = 8;
  inline bool has_thymioz() const;
  inline void clear_thymioz();
  static const int kThymioZFieldNumber = 8;
  inline float thymioz() const;
  inline void set_thymioz(float value);

  // required float thymioAngleY = 9;
  inline bool has_thymioangley() const;
  inline void clear_thymioangley();
  static const int kThymioAngleYFieldNumber = 9;
  inline float thymioangley() const;
  inline void set_thymioangley(float value);

  // required int32 recordingDuration = 10;
  inline bool has_recordingduration() const;
  inline void clear_recordingduration();
  static const int kRecordingDurationFieldNumber = 10;
  inline ::google::protobuf::int32 recordingduration() const;
  inline void set_recordingduration(::google::protobuf::int32 value);

  // required int32 leftTimelinePos = 11;
  inline bool has_lefttimelinepos() const;
  inline void clear_lefttimelinepos();
  static const int kLeftTimelinePosFieldNumber = 11;
  inline ::google::protobuf::int32 lefttimelinepos() const;
  inline void set_lefttimelinepos(::google::protobuf::int32 value);

  // required int32 rightTimelinePos = 12;
  inline bool has_righttimelinepos() const;
  inline void clear_righttimelinepos();
  static const int kRightTimelinePosFieldNumber = 12;
  inline ::google::protobuf::int32 righttimelinepos() const;
  inline void set_righttimelinepos(::google::protobuf::int32 value);

  // required bool appRecording = 13;
  inline bool has_apprecording() const;
  inline void clear_apprecording();
  static const int kAppRecordingFieldNumber = 13;
  inline bool apprecording() const;
  inline void set_apprecording(bool value);

  // required bool thymioIsTracked = 14;
  inline bool has_thymioistracked() const;
  inline void clear_thymioistracked();
  static const int kThymioIsTrackedFieldNumber = 14;
  inline bool thymioistracked() const;
  inline void set_thymioistracked(bool value);

  // required bool boardIsTracked = 15;
  inline bool has_boardistracked() const;
  inline void clear_boardistracked();
  static const int kBoardIsTrackedFieldNumber = 15;
  inline bool boardistracked() const;
  inline void set_boardistracked(bool value);

  // optional int32 selectedSetId = 16;
  inline bool has_selectedsetid() const;
  inline void clear_selectedsetid();
  static const int kSelectedSetIdFieldNumber = 16;
  inline ::google::protobuf::int32 selectedsetid() const;
  inline void set_selectedsetid(::google::protobuf::int32 value);

  // optional float selectedSetTime = 17;
  inline bool has_selectedsettime() const;
  inline void clear_selectedsettime();
  static const int kSelectedSetTimeFieldNumber = 17;
  inline float selectedsettime() const;
  inline void set_selectedsettime(float value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.TabletAction)
 private:
  inline void set_has_camerax();
  inline void clear_has_camerax();
  inline void set_has_cameray();
  inline void clear_has_cameray();
  inline void set_has_cameraz();
  inline void clear_has_cameraz();
  inline void set_has_cameraanglex();
  inline void clear_has_cameraanglex();
  inline void set_has_cameraangley();
  inline void clear_has_cameraangley();
  inline void set_has_cameraanglez();
  inline void clear_has_cameraanglez();
  inline void set_has_thymiox();
  inline void clear_has_thymiox();
  inline void set_has_thymioz();
  inline void clear_has_thymioz();
  inline void set_has_thymioangley();
  inline void clear_has_thymioangley();
  inline void set_has_recordingduration();
  inline void clear_has_recordingduration();
  inline void set_has_lefttimelinepos();
  inline void clear_has_lefttimelinepos();
  inline void set_has_righttimelinepos();
  inline void clear_has_righttimelinepos();
  inline void set_has_apprecording();
  inline void clear_has_apprecording();
  inline void set_has_thymioistracked();
  inline void clear_has_thymioistracked();
  inline void set_has_boardistracked();
  inline void clear_has_boardistracked();
  inline void set_has_selectedsetid();
  inline void clear_has_selectedsetid();
  inline void set_has_selectedsettime();
  inline void clear_has_selectedsettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float camerax_;
  float cameray_;
  float cameraz_;
  float cameraanglex_;
  float cameraangley_;
  float cameraanglez_;
  float thymiox_;
  float thymioz_;
  float thymioangley_;
  ::google::protobuf::int32 recordingduration_;
  ::google::protobuf::int32 lefttimelinepos_;
  ::google::protobuf::int32 righttimelinepos_;
  bool apprecording_;
  bool thymioistracked_;
  bool boardistracked_;
  ::google::protobuf::int32 selectedsetid_;
  float selectedsettime_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static TabletAction* default_instance_;
};
// -------------------------------------------------------------------

class MouseAction : public ::google::protobuf::Message {
 public:
  MouseAction();
  virtual ~MouseAction();

  MouseAction(const MouseAction& from);

  inline MouseAction& operator=(const MouseAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MouseAction& default_instance();

  void Swap(MouseAction* other);

  // implements Message ----------------------------------------------

  MouseAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MouseAction& from);
  void MergeFrom(const MouseAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.MouseActionType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Aseba::ThymioVPL::MouseActionType type() const;
  inline void set_type(::Aseba::ThymioVPL::MouseActionType value);

  // required .Aseba.ThymioVPL.MouseButton button = 2;
  inline bool has_button() const;
  inline void clear_button();
  static const int kButtonFieldNumber = 2;
  inline ::Aseba::ThymioVPL::MouseButton button() const;
  inline void set_button(::Aseba::ThymioVPL::MouseButton value);

  // optional double xPos = 3;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXPosFieldNumber = 3;
  inline double xpos() const;
  inline void set_xpos(double value);

  // optional double yPos = 4;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYPosFieldNumber = 4;
  inline double ypos() const;
  inline void set_ypos(double value);

  // optional string blockName = 5;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 5;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 6;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 6;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // optional int32 row = 7;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 7;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.MouseAction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_button();
  inline void clear_has_button();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_row();
  inline void clear_has_row();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int button_;
  double xpos_;
  double ypos_;
  ::std::string* blockname_;
  ::std::string* blocktype_;
  ::google::protobuf::int32 row_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static MouseAction* default_instance_;
};
// -------------------------------------------------------------------

class AccBlockModeAction : public ::google::protobuf::Message {
 public:
  AccBlockModeAction();
  virtual ~AccBlockModeAction();

  AccBlockModeAction(const AccBlockModeAction& from);

  inline AccBlockModeAction& operator=(const AccBlockModeAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccBlockModeAction& default_instance();

  void Swap(AccBlockModeAction* other);

  // implements Message ----------------------------------------------

  AccBlockModeAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccBlockModeAction& from);
  void MergeFrom(const AccBlockModeAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional string blockName = 2;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 3;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 3;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.AccBlockModeAction)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* blockname_;
  ::std::string* blocktype_;
  ::google::protobuf::int32 mode_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static AccBlockModeAction* default_instance_;
};
// -------------------------------------------------------------------

class AdvancedModeAction : public ::google::protobuf::Message {
 public:
  AdvancedModeAction();
  virtual ~AdvancedModeAction();

  AdvancedModeAction(const AdvancedModeAction& from);

  inline AdvancedModeAction& operator=(const AdvancedModeAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvancedModeAction& default_instance();

  void Swap(AdvancedModeAction* other);

  // implements Message ----------------------------------------------

  AdvancedModeAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdvancedModeAction& from);
  void MergeFrom(const AdvancedModeAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isAdvanced = 1;
  inline bool has_isadvanced() const;
  inline void clear_isadvanced();
  static const int kIsAdvancedFieldNumber = 1;
  inline bool isadvanced() const;
  inline void set_isadvanced(bool value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.AdvancedModeAction)
 private:
  inline void set_has_isadvanced();
  inline void clear_has_isadvanced();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isadvanced_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static AdvancedModeAction* default_instance_;
};
// -------------------------------------------------------------------

class AddBlockAction : public ::google::protobuf::Message {
 public:
  AddBlockAction();
  virtual ~AddBlockAction();

  AddBlockAction(const AddBlockAction& from);

  inline AddBlockAction& operator=(const AddBlockAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBlockAction& default_instance();

  void Swap(AddBlockAction* other);

  // implements Message ----------------------------------------------

  AddBlockAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddBlockAction& from);
  void MergeFrom(const AddBlockAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.BlockType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Aseba::ThymioVPL::BlockType type() const;
  inline void set_type(::Aseba::ThymioVPL::BlockType value);

  // optional string blockName = 2;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 3;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 3;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // optional int32 row = 4;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 4;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.AddBlockAction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_row();
  inline void clear_has_row();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* blockname_;
  int type_;
  ::google::protobuf::int32 row_;
  ::std::string* blocktype_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static AddBlockAction* default_instance_;
};
// -------------------------------------------------------------------

class BlockAction : public ::google::protobuf::Message {
 public:
  BlockAction();
  virtual ~BlockAction();

  BlockAction(const BlockAction& from);

  inline BlockAction& operator=(const BlockAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockAction& default_instance();

  void Swap(BlockAction* other);

  // implements Message ----------------------------------------------

  BlockAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockAction& from);
  void MergeFrom(const BlockAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.BlockActionType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Aseba::ThymioVPL::BlockActionType type() const;
  inline void set_type(::Aseba::ThymioVPL::BlockActionType value);

  // optional int32 row = 2;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 2;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // optional string blockName = 3;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 3;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 4;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 4;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // optional int32 elementId = 5;
  inline bool has_elementid() const;
  inline void clear_elementid();
  static const int kElementIdFieldNumber = 5;
  inline ::google::protobuf::int32 elementid() const;
  inline void set_elementid(::google::protobuf::int32 value);

  // optional int32 sliderValue = 6;
  inline bool has_slidervalue() const;
  inline void clear_slidervalue();
  static const int kSliderValueFieldNumber = 6;
  inline ::google::protobuf::int32 slidervalue() const;
  inline void set_slidervalue(::google::protobuf::int32 value);

  // optional int32 soundValue = 7;
  inline bool has_soundvalue() const;
  inline void clear_soundvalue();
  static const int kSoundValueFieldNumber = 7;
  inline ::google::protobuf::int32 soundvalue() const;
  inline void set_soundvalue(::google::protobuf::int32 value);

  // optional int32 timerValue = 8;
  inline bool has_timervalue() const;
  inline void clear_timervalue();
  static const int kTimerValueFieldNumber = 8;
  inline ::google::protobuf::int32 timervalue() const;
  inline void set_timervalue(::google::protobuf::int32 value);

  // optional int32 buttonValue = 9;
  inline bool has_buttonvalue() const;
  inline void clear_buttonvalue();
  static const int kButtonValueFieldNumber = 9;
  inline ::google::protobuf::int32 buttonvalue() const;
  inline void set_buttonvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.BlockAction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_elementid();
  inline void clear_has_elementid();
  inline void set_has_slidervalue();
  inline void clear_has_slidervalue();
  inline void set_has_soundvalue();
  inline void clear_has_soundvalue();
  inline void set_has_timervalue();
  inline void clear_has_timervalue();
  inline void set_has_buttonvalue();
  inline void clear_has_buttonvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 row_;
  ::std::string* blockname_;
  ::std::string* blocktype_;
  ::google::protobuf::int32 elementid_;
  ::google::protobuf::int32 slidervalue_;
  ::google::protobuf::int32 soundvalue_;
  ::google::protobuf::int32 timervalue_;
  ::google::protobuf::int32 buttonvalue_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static BlockAction* default_instance_;
};
// -------------------------------------------------------------------

class MenuAction : public ::google::protobuf::Message {
 public:
  MenuAction();
  virtual ~MenuAction();

  MenuAction(const MenuAction& from);

  inline MenuAction& operator=(const MenuAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MenuAction& default_instance();

  void Swap(MenuAction* other);

  // implements Message ----------------------------------------------

  MenuAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MenuAction& from);
  void MergeFrom(const MenuAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.MenuEntry entry = 1;
  inline bool has_entry() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline ::Aseba::ThymioVPL::MenuEntry entry() const;
  inline void set_entry(::Aseba::ThymioVPL::MenuEntry value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.MenuAction)
 private:
  inline void set_has_entry();
  inline void clear_has_entry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int entry_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static MenuAction* default_instance_;
};
// -------------------------------------------------------------------

class TimeStamp : public ::google::protobuf::Message {
 public:
  TimeStamp();
  virtual ~TimeStamp();

  TimeStamp(const TimeStamp& from);

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeStamp& default_instance();

  void Swap(TimeStamp* other);

  // implements Message ----------------------------------------------

  TimeStamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeStamp& from);
  void MergeFrom(const TimeStamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // required uint32 milliseconds = 2;
  inline bool has_milliseconds() const;
  inline void clear_milliseconds();
  static const int kMillisecondsFieldNumber = 2;
  inline ::google::protobuf::uint32 milliseconds() const;
  inline void set_milliseconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.TimeStamp)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_milliseconds();
  inline void clear_has_milliseconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 milliseconds_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static TimeStamp* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  enum ActualActionCase {
    kRowAction = 10,
    kAdvancedModeAction = 11,
    kAddBlockAction = 12,
    kAccBlockModeAction = 13,
    kMenuAction = 14,
    kMouseAction = 15,
    kDeviceAction = 16,
    kBlockAction = 17,
    kTabletAction = 18,
    ACTUAL_ACTION_NOT_SET = 0,
  };

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Action_ActionType ActionType;
  static const ActionType ADVANCED_MODE = Action_ActionType_ADVANCED_MODE;
  static const ActionType ADD_BLOCK = Action_ActionType_ADD_BLOCK;
  static const ActionType ACC_BLOCK_MODE = Action_ActionType_ACC_BLOCK_MODE;
  static const ActionType MENU = Action_ActionType_MENU;
  static const ActionType MOUSE_ACTION = Action_ActionType_MOUSE_ACTION;
  static const ActionType DEVICE_ACTION = Action_ActionType_DEVICE_ACTION;
  static const ActionType BLOCK_ACTION = Action_ActionType_BLOCK_ACTION;
  static const ActionType ROW = Action_ActionType_ROW;
  static const ActionType TABLET = Action_ActionType_TABLET;
  static inline bool ActionType_IsValid(int value) {
    return Action_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    Action_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    Action_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    Action_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return Action_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return Action_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return Action_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.Action.ActionType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Aseba::ThymioVPL::Action_ActionType type() const;
  inline void set_type(::Aseba::ThymioVPL::Action_ActionType value);

  // optional string programStateAsXml = 2;
  inline bool has_programstateasxml() const;
  inline void clear_programstateasxml();
  static const int kProgramStateAsXmlFieldNumber = 2;
  inline const ::std::string& programstateasxml() const;
  inline void set_programstateasxml(const ::std::string& value);
  inline void set_programstateasxml(const char* value);
  inline void set_programstateasxml(const char* value, size_t size);
  inline ::std::string* mutable_programstateasxml();
  inline ::std::string* release_programstateasxml();
  inline void set_allocated_programstateasxml(::std::string* programstateasxml);

  // required .Aseba.ThymioVPL.TimeStamp time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::Aseba::ThymioVPL::TimeStamp& time() const;
  inline ::Aseba::ThymioVPL::TimeStamp* mutable_time();
  inline ::Aseba::ThymioVPL::TimeStamp* release_time();
  inline void set_allocated_time(::Aseba::ThymioVPL::TimeStamp* time);

  // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
  inline bool has_rowaction() const;
  inline void clear_rowaction();
  static const int kRowActionFieldNumber = 10;
  inline const ::Aseba::ThymioVPL::RowAction& rowaction() const;
  inline ::Aseba::ThymioVPL::RowAction* mutable_rowaction();
  inline ::Aseba::ThymioVPL::RowAction* release_rowaction();
  inline void set_allocated_rowaction(::Aseba::ThymioVPL::RowAction* rowaction);

  // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 11;
  inline bool has_advancedmodeaction() const;
  inline void clear_advancedmodeaction();
  static const int kAdvancedModeActionFieldNumber = 11;
  inline const ::Aseba::ThymioVPL::AdvancedModeAction& advancedmodeaction() const;
  inline ::Aseba::ThymioVPL::AdvancedModeAction* mutable_advancedmodeaction();
  inline ::Aseba::ThymioVPL::AdvancedModeAction* release_advancedmodeaction();
  inline void set_allocated_advancedmodeaction(::Aseba::ThymioVPL::AdvancedModeAction* advancedmodeaction);

  // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 12;
  inline bool has_addblockaction() const;
  inline void clear_addblockaction();
  static const int kAddBlockActionFieldNumber = 12;
  inline const ::Aseba::ThymioVPL::AddBlockAction& addblockaction() const;
  inline ::Aseba::ThymioVPL::AddBlockAction* mutable_addblockaction();
  inline ::Aseba::ThymioVPL::AddBlockAction* release_addblockaction();
  inline void set_allocated_addblockaction(::Aseba::ThymioVPL::AddBlockAction* addblockaction);

  // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 13;
  inline bool has_accblockmodeaction() const;
  inline void clear_accblockmodeaction();
  static const int kAccBlockModeActionFieldNumber = 13;
  inline const ::Aseba::ThymioVPL::AccBlockModeAction& accblockmodeaction() const;
  inline ::Aseba::ThymioVPL::AccBlockModeAction* mutable_accblockmodeaction();
  inline ::Aseba::ThymioVPL::AccBlockModeAction* release_accblockmodeaction();
  inline void set_allocated_accblockmodeaction(::Aseba::ThymioVPL::AccBlockModeAction* accblockmodeaction);

  // optional .Aseba.ThymioVPL.MenuAction menuAction = 14;
  inline bool has_menuaction() const;
  inline void clear_menuaction();
  static const int kMenuActionFieldNumber = 14;
  inline const ::Aseba::ThymioVPL::MenuAction& menuaction() const;
  inline ::Aseba::ThymioVPL::MenuAction* mutable_menuaction();
  inline ::Aseba::ThymioVPL::MenuAction* release_menuaction();
  inline void set_allocated_menuaction(::Aseba::ThymioVPL::MenuAction* menuaction);

  // optional .Aseba.ThymioVPL.MouseAction mouseAction = 15;
  inline bool has_mouseaction() const;
  inline void clear_mouseaction();
  static const int kMouseActionFieldNumber = 15;
  inline const ::Aseba::ThymioVPL::MouseAction& mouseaction() const;
  inline ::Aseba::ThymioVPL::MouseAction* mutable_mouseaction();
  inline ::Aseba::ThymioVPL::MouseAction* release_mouseaction();
  inline void set_allocated_mouseaction(::Aseba::ThymioVPL::MouseAction* mouseaction);

  // optional .Aseba.ThymioVPL.DeviceAction deviceAction = 16;
  inline bool has_deviceaction() const;
  inline void clear_deviceaction();
  static const int kDeviceActionFieldNumber = 16;
  inline const ::Aseba::ThymioVPL::DeviceAction& deviceaction() const;
  inline ::Aseba::ThymioVPL::DeviceAction* mutable_deviceaction();
  inline ::Aseba::ThymioVPL::DeviceAction* release_deviceaction();
  inline void set_allocated_deviceaction(::Aseba::ThymioVPL::DeviceAction* deviceaction);

  // optional .Aseba.ThymioVPL.BlockAction blockAction = 17;
  inline bool has_blockaction() const;
  inline void clear_blockaction();
  static const int kBlockActionFieldNumber = 17;
  inline const ::Aseba::ThymioVPL::BlockAction& blockaction() const;
  inline ::Aseba::ThymioVPL::BlockAction* mutable_blockaction();
  inline ::Aseba::ThymioVPL::BlockAction* release_blockaction();
  inline void set_allocated_blockaction(::Aseba::ThymioVPL::BlockAction* blockaction);

  // optional .Aseba.ThymioVPL.TabletAction tabletAction = 18;
  inline bool has_tabletaction() const;
  inline void clear_tabletaction();
  static const int kTabletActionFieldNumber = 18;
  inline const ::Aseba::ThymioVPL::TabletAction& tabletaction() const;
  inline ::Aseba::ThymioVPL::TabletAction* mutable_tabletaction();
  inline ::Aseba::ThymioVPL::TabletAction* release_tabletaction();
  inline void set_allocated_tabletaction(::Aseba::ThymioVPL::TabletAction* tabletaction);

  inline ActualActionCase actual_action_case() const;
  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.Action)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_programstateasxml();
  inline void clear_has_programstateasxml();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_rowaction();
  inline void set_has_advancedmodeaction();
  inline void set_has_addblockaction();
  inline void set_has_accblockmodeaction();
  inline void set_has_menuaction();
  inline void set_has_mouseaction();
  inline void set_has_deviceaction();
  inline void set_has_blockaction();
  inline void set_has_tabletaction();

  inline bool has_actual_action();
  void clear_actual_action();
  inline void clear_has_actual_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* programstateasxml_;
  ::Aseba::ThymioVPL::TimeStamp* time_;
  int type_;
  union ActualActionUnion {
    ::Aseba::ThymioVPL::RowAction* rowaction_;
    ::Aseba::ThymioVPL::AdvancedModeAction* advancedmodeaction_;
    ::Aseba::ThymioVPL::AddBlockAction* addblockaction_;
    ::Aseba::ThymioVPL::AccBlockModeAction* accblockmodeaction_;
    ::Aseba::ThymioVPL::MenuAction* menuaction_;
    ::Aseba::ThymioVPL::MouseAction* mouseaction_;
    ::Aseba::ThymioVPL::DeviceAction* deviceaction_;
    ::Aseba::ThymioVPL::BlockAction* blockaction_;
    ::Aseba::ThymioVPL::TabletAction* tabletaction_;
  } actual_action_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class Usage : public ::google::protobuf::Message {
 public:
  Usage();
  virtual ~Usage();

  Usage(const Usage& from);

  inline Usage& operator=(const Usage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Usage& default_instance();

  void Swap(Usage* other);

  // implements Message ----------------------------------------------

  Usage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Usage& from);
  void MergeFrom(const Usage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Aseba.ThymioVPL.Action action = 1;
  inline int action_size() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline const ::Aseba::ThymioVPL::Action& action(int index) const;
  inline ::Aseba::ThymioVPL::Action* mutable_action(int index);
  inline ::Aseba::ThymioVPL::Action* add_action();
  inline const ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action >&
      action() const;
  inline ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action >*
      mutable_action();

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.Usage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action > action_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static Usage* default_instance_;
};
// ===================================================================


// ===================================================================

// RowAction

// optional int32 row = 1;
inline bool RowAction::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RowAction::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RowAction::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RowAction::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 RowAction::row() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.RowAction.row)
  return row_;
}
inline void RowAction::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.RowAction.row)
}

// required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
inline bool RowAction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RowAction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RowAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RowAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Aseba::ThymioVPL::RowAction_ActionType RowAction::type() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.RowAction.type)
  return static_cast< ::Aseba::ThymioVPL::RowAction_ActionType >(type_);
}
inline void RowAction::set_type(::Aseba::ThymioVPL::RowAction_ActionType value) {
  assert(::Aseba::ThymioVPL::RowAction_ActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.RowAction.type)
}

// -------------------------------------------------------------------

// DeviceAction

// required int32 id = 1;
inline bool DeviceAction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceAction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAction::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DeviceAction::id() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.DeviceAction.id)
  return id_;
}
inline void DeviceAction::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.DeviceAction.id)
}

// repeated int32 variable = 2 [packed = true];
inline int DeviceAction::variable_size() const {
  return variable_.size();
}
inline void DeviceAction::clear_variable() {
  variable_.Clear();
}
inline ::google::protobuf::int32 DeviceAction::variable(int index) const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.DeviceAction.variable)
  return variable_.Get(index);
}
inline void DeviceAction::set_variable(int index, ::google::protobuf::int32 value) {
  variable_.Set(index, value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.DeviceAction.variable)
}
inline void DeviceAction::add_variable(::google::protobuf::int32 value) {
  variable_.Add(value);
  // @@protoc_insertion_point(field_add:Aseba.ThymioVPL.DeviceAction.variable)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeviceAction::variable() const {
  // @@protoc_insertion_point(field_list:Aseba.ThymioVPL.DeviceAction.variable)
  return variable_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeviceAction::mutable_variable() {
  // @@protoc_insertion_point(field_mutable_list:Aseba.ThymioVPL.DeviceAction.variable)
  return &variable_;
}

// -------------------------------------------------------------------

// TabletAction

// required float cameraX = 1;
inline bool TabletAction::has_camerax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TabletAction::set_has_camerax() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TabletAction::clear_has_camerax() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TabletAction::clear_camerax() {
  camerax_ = 0;
  clear_has_camerax();
}
inline float TabletAction::camerax() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.cameraX)
  return camerax_;
}
inline void TabletAction::set_camerax(float value) {
  set_has_camerax();
  camerax_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.cameraX)
}

// required float cameraY = 2;
inline bool TabletAction::has_cameray() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TabletAction::set_has_cameray() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TabletAction::clear_has_cameray() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TabletAction::clear_cameray() {
  cameray_ = 0;
  clear_has_cameray();
}
inline float TabletAction::cameray() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.cameraY)
  return cameray_;
}
inline void TabletAction::set_cameray(float value) {
  set_has_cameray();
  cameray_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.cameraY)
}

// required float cameraZ = 3;
inline bool TabletAction::has_cameraz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TabletAction::set_has_cameraz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TabletAction::clear_has_cameraz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TabletAction::clear_cameraz() {
  cameraz_ = 0;
  clear_has_cameraz();
}
inline float TabletAction::cameraz() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.cameraZ)
  return cameraz_;
}
inline void TabletAction::set_cameraz(float value) {
  set_has_cameraz();
  cameraz_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.cameraZ)
}

// required float cameraAngleX = 4;
inline bool TabletAction::has_cameraanglex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TabletAction::set_has_cameraanglex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TabletAction::clear_has_cameraanglex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TabletAction::clear_cameraanglex() {
  cameraanglex_ = 0;
  clear_has_cameraanglex();
}
inline float TabletAction::cameraanglex() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.cameraAngleX)
  return cameraanglex_;
}
inline void TabletAction::set_cameraanglex(float value) {
  set_has_cameraanglex();
  cameraanglex_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.cameraAngleX)
}

// required float cameraAngleY = 5;
inline bool TabletAction::has_cameraangley() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TabletAction::set_has_cameraangley() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TabletAction::clear_has_cameraangley() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TabletAction::clear_cameraangley() {
  cameraangley_ = 0;
  clear_has_cameraangley();
}
inline float TabletAction::cameraangley() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.cameraAngleY)
  return cameraangley_;
}
inline void TabletAction::set_cameraangley(float value) {
  set_has_cameraangley();
  cameraangley_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.cameraAngleY)
}

// required float cameraAngleZ = 6;
inline bool TabletAction::has_cameraanglez() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TabletAction::set_has_cameraanglez() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TabletAction::clear_has_cameraanglez() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TabletAction::clear_cameraanglez() {
  cameraanglez_ = 0;
  clear_has_cameraanglez();
}
inline float TabletAction::cameraanglez() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.cameraAngleZ)
  return cameraanglez_;
}
inline void TabletAction::set_cameraanglez(float value) {
  set_has_cameraanglez();
  cameraanglez_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.cameraAngleZ)
}

// required float thymioX = 7;
inline bool TabletAction::has_thymiox() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TabletAction::set_has_thymiox() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TabletAction::clear_has_thymiox() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TabletAction::clear_thymiox() {
  thymiox_ = 0;
  clear_has_thymiox();
}
inline float TabletAction::thymiox() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.thymioX)
  return thymiox_;
}
inline void TabletAction::set_thymiox(float value) {
  set_has_thymiox();
  thymiox_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.thymioX)
}

// required float thymioZ = 8;
inline bool TabletAction::has_thymioz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TabletAction::set_has_thymioz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TabletAction::clear_has_thymioz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TabletAction::clear_thymioz() {
  thymioz_ = 0;
  clear_has_thymioz();
}
inline float TabletAction::thymioz() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.thymioZ)
  return thymioz_;
}
inline void TabletAction::set_thymioz(float value) {
  set_has_thymioz();
  thymioz_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.thymioZ)
}

// required float thymioAngleY = 9;
inline bool TabletAction::has_thymioangley() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TabletAction::set_has_thymioangley() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TabletAction::clear_has_thymioangley() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TabletAction::clear_thymioangley() {
  thymioangley_ = 0;
  clear_has_thymioangley();
}
inline float TabletAction::thymioangley() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.thymioAngleY)
  return thymioangley_;
}
inline void TabletAction::set_thymioangley(float value) {
  set_has_thymioangley();
  thymioangley_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.thymioAngleY)
}

// required int32 recordingDuration = 10;
inline bool TabletAction::has_recordingduration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TabletAction::set_has_recordingduration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TabletAction::clear_has_recordingduration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TabletAction::clear_recordingduration() {
  recordingduration_ = 0;
  clear_has_recordingduration();
}
inline ::google::protobuf::int32 TabletAction::recordingduration() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.recordingDuration)
  return recordingduration_;
}
inline void TabletAction::set_recordingduration(::google::protobuf::int32 value) {
  set_has_recordingduration();
  recordingduration_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.recordingDuration)
}

// required int32 leftTimelinePos = 11;
inline bool TabletAction::has_lefttimelinepos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TabletAction::set_has_lefttimelinepos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TabletAction::clear_has_lefttimelinepos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TabletAction::clear_lefttimelinepos() {
  lefttimelinepos_ = 0;
  clear_has_lefttimelinepos();
}
inline ::google::protobuf::int32 TabletAction::lefttimelinepos() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.leftTimelinePos)
  return lefttimelinepos_;
}
inline void TabletAction::set_lefttimelinepos(::google::protobuf::int32 value) {
  set_has_lefttimelinepos();
  lefttimelinepos_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.leftTimelinePos)
}

// required int32 rightTimelinePos = 12;
inline bool TabletAction::has_righttimelinepos() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TabletAction::set_has_righttimelinepos() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TabletAction::clear_has_righttimelinepos() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TabletAction::clear_righttimelinepos() {
  righttimelinepos_ = 0;
  clear_has_righttimelinepos();
}
inline ::google::protobuf::int32 TabletAction::righttimelinepos() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.rightTimelinePos)
  return righttimelinepos_;
}
inline void TabletAction::set_righttimelinepos(::google::protobuf::int32 value) {
  set_has_righttimelinepos();
  righttimelinepos_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.rightTimelinePos)
}

// required bool appRecording = 13;
inline bool TabletAction::has_apprecording() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TabletAction::set_has_apprecording() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TabletAction::clear_has_apprecording() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TabletAction::clear_apprecording() {
  apprecording_ = false;
  clear_has_apprecording();
}
inline bool TabletAction::apprecording() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.appRecording)
  return apprecording_;
}
inline void TabletAction::set_apprecording(bool value) {
  set_has_apprecording();
  apprecording_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.appRecording)
}

// required bool thymioIsTracked = 14;
inline bool TabletAction::has_thymioistracked() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TabletAction::set_has_thymioistracked() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TabletAction::clear_has_thymioistracked() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TabletAction::clear_thymioistracked() {
  thymioistracked_ = false;
  clear_has_thymioistracked();
}
inline bool TabletAction::thymioistracked() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.thymioIsTracked)
  return thymioistracked_;
}
inline void TabletAction::set_thymioistracked(bool value) {
  set_has_thymioistracked();
  thymioistracked_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.thymioIsTracked)
}

// required bool boardIsTracked = 15;
inline bool TabletAction::has_boardistracked() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TabletAction::set_has_boardistracked() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TabletAction::clear_has_boardistracked() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TabletAction::clear_boardistracked() {
  boardistracked_ = false;
  clear_has_boardistracked();
}
inline bool TabletAction::boardistracked() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.boardIsTracked)
  return boardistracked_;
}
inline void TabletAction::set_boardistracked(bool value) {
  set_has_boardistracked();
  boardistracked_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.boardIsTracked)
}

// optional int32 selectedSetId = 16;
inline bool TabletAction::has_selectedsetid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TabletAction::set_has_selectedsetid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TabletAction::clear_has_selectedsetid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TabletAction::clear_selectedsetid() {
  selectedsetid_ = 0;
  clear_has_selectedsetid();
}
inline ::google::protobuf::int32 TabletAction::selectedsetid() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.selectedSetId)
  return selectedsetid_;
}
inline void TabletAction::set_selectedsetid(::google::protobuf::int32 value) {
  set_has_selectedsetid();
  selectedsetid_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.selectedSetId)
}

// optional float selectedSetTime = 17;
inline bool TabletAction::has_selectedsettime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TabletAction::set_has_selectedsettime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TabletAction::clear_has_selectedsettime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TabletAction::clear_selectedsettime() {
  selectedsettime_ = 0;
  clear_has_selectedsettime();
}
inline float TabletAction::selectedsettime() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TabletAction.selectedSetTime)
  return selectedsettime_;
}
inline void TabletAction::set_selectedsettime(float value) {
  set_has_selectedsettime();
  selectedsettime_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TabletAction.selectedSetTime)
}

// -------------------------------------------------------------------

// MouseAction

// required .Aseba.ThymioVPL.MouseActionType type = 1;
inline bool MouseAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MouseAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MouseAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MouseAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Aseba::ThymioVPL::MouseActionType MouseAction::type() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MouseAction.type)
  return static_cast< ::Aseba::ThymioVPL::MouseActionType >(type_);
}
inline void MouseAction::set_type(::Aseba::ThymioVPL::MouseActionType value) {
  assert(::Aseba::ThymioVPL::MouseActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MouseAction.type)
}

// required .Aseba.ThymioVPL.MouseButton button = 2;
inline bool MouseAction::has_button() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MouseAction::set_has_button() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MouseAction::clear_has_button() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MouseAction::clear_button() {
  button_ = 1;
  clear_has_button();
}
inline ::Aseba::ThymioVPL::MouseButton MouseAction::button() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MouseAction.button)
  return static_cast< ::Aseba::ThymioVPL::MouseButton >(button_);
}
inline void MouseAction::set_button(::Aseba::ThymioVPL::MouseButton value) {
  assert(::Aseba::ThymioVPL::MouseButton_IsValid(value));
  set_has_button();
  button_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MouseAction.button)
}

// optional double xPos = 3;
inline bool MouseAction::has_xpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MouseAction::set_has_xpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MouseAction::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MouseAction::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline double MouseAction::xpos() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MouseAction.xPos)
  return xpos_;
}
inline void MouseAction::set_xpos(double value) {
  set_has_xpos();
  xpos_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MouseAction.xPos)
}

// optional double yPos = 4;
inline bool MouseAction::has_ypos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MouseAction::set_has_ypos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MouseAction::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MouseAction::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline double MouseAction::ypos() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MouseAction.yPos)
  return ypos_;
}
inline void MouseAction::set_ypos(double value) {
  set_has_ypos();
  ypos_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MouseAction.yPos)
}

// optional string blockName = 5;
inline bool MouseAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MouseAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MouseAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MouseAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& MouseAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MouseAction.blockName)
  return *blockname_;
}
inline void MouseAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MouseAction.blockName)
}
inline void MouseAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.MouseAction.blockName)
}
inline void MouseAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.MouseAction.blockName)
}
inline ::std::string* MouseAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.MouseAction.blockName)
  return blockname_;
}
inline ::std::string* MouseAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MouseAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.MouseAction.blockName)
}

// optional string blockType = 6;
inline bool MouseAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MouseAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MouseAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MouseAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& MouseAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MouseAction.blockType)
  return *blocktype_;
}
inline void MouseAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MouseAction.blockType)
}
inline void MouseAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.MouseAction.blockType)
}
inline void MouseAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.MouseAction.blockType)
}
inline ::std::string* MouseAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.MouseAction.blockType)
  return blocktype_;
}
inline ::std::string* MouseAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MouseAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.MouseAction.blockType)
}

// optional int32 row = 7;
inline bool MouseAction::has_row() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MouseAction::set_has_row() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MouseAction::clear_has_row() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MouseAction::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 MouseAction::row() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MouseAction.row)
  return row_;
}
inline void MouseAction::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MouseAction.row)
}

// -------------------------------------------------------------------

// AccBlockModeAction

// required int32 mode = 1;
inline bool AccBlockModeAction::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccBlockModeAction::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccBlockModeAction::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccBlockModeAction::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 AccBlockModeAction::mode() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AccBlockModeAction.mode)
  return mode_;
}
inline void AccBlockModeAction::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AccBlockModeAction.mode)
}

// optional string blockName = 2;
inline bool AccBlockModeAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccBlockModeAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccBlockModeAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccBlockModeAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& AccBlockModeAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AccBlockModeAction.blockName)
  return *blockname_;
}
inline void AccBlockModeAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AccBlockModeAction.blockName)
}
inline void AccBlockModeAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.AccBlockModeAction.blockName)
}
inline void AccBlockModeAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.AccBlockModeAction.blockName)
}
inline ::std::string* AccBlockModeAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.AccBlockModeAction.blockName)
  return blockname_;
}
inline ::std::string* AccBlockModeAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccBlockModeAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.AccBlockModeAction.blockName)
}

// optional string blockType = 3;
inline bool AccBlockModeAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccBlockModeAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccBlockModeAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccBlockModeAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& AccBlockModeAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AccBlockModeAction.blockType)
  return *blocktype_;
}
inline void AccBlockModeAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AccBlockModeAction.blockType)
}
inline void AccBlockModeAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.AccBlockModeAction.blockType)
}
inline void AccBlockModeAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.AccBlockModeAction.blockType)
}
inline ::std::string* AccBlockModeAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.AccBlockModeAction.blockType)
  return blocktype_;
}
inline ::std::string* AccBlockModeAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccBlockModeAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.AccBlockModeAction.blockType)
}

// -------------------------------------------------------------------

// AdvancedModeAction

// required bool isAdvanced = 1;
inline bool AdvancedModeAction::has_isadvanced() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdvancedModeAction::set_has_isadvanced() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdvancedModeAction::clear_has_isadvanced() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdvancedModeAction::clear_isadvanced() {
  isadvanced_ = false;
  clear_has_isadvanced();
}
inline bool AdvancedModeAction::isadvanced() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AdvancedModeAction.isAdvanced)
  return isadvanced_;
}
inline void AdvancedModeAction::set_isadvanced(bool value) {
  set_has_isadvanced();
  isadvanced_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AdvancedModeAction.isAdvanced)
}

// -------------------------------------------------------------------

// AddBlockAction

// required .Aseba.ThymioVPL.BlockType type = 1;
inline bool AddBlockAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddBlockAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddBlockAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddBlockAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Aseba::ThymioVPL::BlockType AddBlockAction::type() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AddBlockAction.type)
  return static_cast< ::Aseba::ThymioVPL::BlockType >(type_);
}
inline void AddBlockAction::set_type(::Aseba::ThymioVPL::BlockType value) {
  assert(::Aseba::ThymioVPL::BlockType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AddBlockAction.type)
}

// optional string blockName = 2;
inline bool AddBlockAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddBlockAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddBlockAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddBlockAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& AddBlockAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AddBlockAction.blockName)
  return *blockname_;
}
inline void AddBlockAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AddBlockAction.blockName)
}
inline void AddBlockAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.AddBlockAction.blockName)
}
inline void AddBlockAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.AddBlockAction.blockName)
}
inline ::std::string* AddBlockAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.AddBlockAction.blockName)
  return blockname_;
}
inline ::std::string* AddBlockAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddBlockAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.AddBlockAction.blockName)
}

// optional string blockType = 3;
inline bool AddBlockAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddBlockAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddBlockAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddBlockAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& AddBlockAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AddBlockAction.blockType)
  return *blocktype_;
}
inline void AddBlockAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AddBlockAction.blockType)
}
inline void AddBlockAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.AddBlockAction.blockType)
}
inline void AddBlockAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.AddBlockAction.blockType)
}
inline ::std::string* AddBlockAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.AddBlockAction.blockType)
  return blocktype_;
}
inline ::std::string* AddBlockAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddBlockAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.AddBlockAction.blockType)
}

// optional int32 row = 4;
inline bool AddBlockAction::has_row() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddBlockAction::set_has_row() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddBlockAction::clear_has_row() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddBlockAction::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 AddBlockAction::row() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AddBlockAction.row)
  return row_;
}
inline void AddBlockAction::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AddBlockAction.row)
}

// -------------------------------------------------------------------

// BlockAction

// required .Aseba.ThymioVPL.BlockActionType type = 1;
inline bool BlockAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Aseba::ThymioVPL::BlockActionType BlockAction::type() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.type)
  return static_cast< ::Aseba::ThymioVPL::BlockActionType >(type_);
}
inline void BlockAction::set_type(::Aseba::ThymioVPL::BlockActionType value) {
  assert(::Aseba::ThymioVPL::BlockActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.type)
}

// optional int32 row = 2;
inline bool BlockAction::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockAction::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockAction::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockAction::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 BlockAction::row() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.row)
  return row_;
}
inline void BlockAction::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.row)
}

// optional string blockName = 3;
inline bool BlockAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& BlockAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.blockName)
  return *blockname_;
}
inline void BlockAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.blockName)
}
inline void BlockAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.BlockAction.blockName)
}
inline void BlockAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.BlockAction.blockName)
}
inline ::std::string* BlockAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.BlockAction.blockName)
  return blockname_;
}
inline ::std::string* BlockAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlockAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.BlockAction.blockName)
}

// optional string blockType = 4;
inline bool BlockAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& BlockAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.blockType)
  return *blocktype_;
}
inline void BlockAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.blockType)
}
inline void BlockAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.BlockAction.blockType)
}
inline void BlockAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.BlockAction.blockType)
}
inline ::std::string* BlockAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.BlockAction.blockType)
  return blocktype_;
}
inline ::std::string* BlockAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlockAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.BlockAction.blockType)
}

// optional int32 elementId = 5;
inline bool BlockAction::has_elementid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockAction::set_has_elementid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockAction::clear_has_elementid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockAction::clear_elementid() {
  elementid_ = 0;
  clear_has_elementid();
}
inline ::google::protobuf::int32 BlockAction::elementid() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.elementId)
  return elementid_;
}
inline void BlockAction::set_elementid(::google::protobuf::int32 value) {
  set_has_elementid();
  elementid_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.elementId)
}

// optional int32 sliderValue = 6;
inline bool BlockAction::has_slidervalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockAction::set_has_slidervalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockAction::clear_has_slidervalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockAction::clear_slidervalue() {
  slidervalue_ = 0;
  clear_has_slidervalue();
}
inline ::google::protobuf::int32 BlockAction::slidervalue() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.sliderValue)
  return slidervalue_;
}
inline void BlockAction::set_slidervalue(::google::protobuf::int32 value) {
  set_has_slidervalue();
  slidervalue_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.sliderValue)
}

// optional int32 soundValue = 7;
inline bool BlockAction::has_soundvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockAction::set_has_soundvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockAction::clear_has_soundvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockAction::clear_soundvalue() {
  soundvalue_ = 0;
  clear_has_soundvalue();
}
inline ::google::protobuf::int32 BlockAction::soundvalue() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.soundValue)
  return soundvalue_;
}
inline void BlockAction::set_soundvalue(::google::protobuf::int32 value) {
  set_has_soundvalue();
  soundvalue_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.soundValue)
}

// optional int32 timerValue = 8;
inline bool BlockAction::has_timervalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockAction::set_has_timervalue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockAction::clear_has_timervalue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockAction::clear_timervalue() {
  timervalue_ = 0;
  clear_has_timervalue();
}
inline ::google::protobuf::int32 BlockAction::timervalue() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.timerValue)
  return timervalue_;
}
inline void BlockAction::set_timervalue(::google::protobuf::int32 value) {
  set_has_timervalue();
  timervalue_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.timerValue)
}

// optional int32 buttonValue = 9;
inline bool BlockAction::has_buttonvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockAction::set_has_buttonvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockAction::clear_has_buttonvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockAction::clear_buttonvalue() {
  buttonvalue_ = 0;
  clear_has_buttonvalue();
}
inline ::google::protobuf::int32 BlockAction::buttonvalue() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockAction.buttonValue)
  return buttonvalue_;
}
inline void BlockAction::set_buttonvalue(::google::protobuf::int32 value) {
  set_has_buttonvalue();
  buttonvalue_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockAction.buttonValue)
}

// -------------------------------------------------------------------

// MenuAction

// required .Aseba.ThymioVPL.MenuEntry entry = 1;
inline bool MenuAction::has_entry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MenuAction::set_has_entry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MenuAction::clear_has_entry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MenuAction::clear_entry() {
  entry_ = 1;
  clear_has_entry();
}
inline ::Aseba::ThymioVPL::MenuEntry MenuAction::entry() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MenuAction.entry)
  return static_cast< ::Aseba::ThymioVPL::MenuEntry >(entry_);
}
inline void MenuAction::set_entry(::Aseba::ThymioVPL::MenuEntry value) {
  assert(::Aseba::ThymioVPL::MenuEntry_IsValid(value));
  set_has_entry();
  entry_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MenuAction.entry)
}

// -------------------------------------------------------------------

// TimeStamp

// required uint32 timestamp = 1;
inline bool TimeStamp::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeStamp::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeStamp::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeStamp::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 TimeStamp::timestamp() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TimeStamp.timestamp)
  return timestamp_;
}
inline void TimeStamp::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TimeStamp.timestamp)
}

// required uint32 milliseconds = 2;
inline bool TimeStamp::has_milliseconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeStamp::set_has_milliseconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeStamp::clear_has_milliseconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeStamp::clear_milliseconds() {
  milliseconds_ = 0u;
  clear_has_milliseconds();
}
inline ::google::protobuf::uint32 TimeStamp::milliseconds() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.TimeStamp.milliseconds)
  return milliseconds_;
}
inline void TimeStamp::set_milliseconds(::google::protobuf::uint32 value) {
  set_has_milliseconds();
  milliseconds_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.TimeStamp.milliseconds)
}

// -------------------------------------------------------------------

// Action

// required .Aseba.ThymioVPL.Action.ActionType type = 1;
inline bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Aseba::ThymioVPL::Action_ActionType Action::type() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.Action.type)
  return static_cast< ::Aseba::ThymioVPL::Action_ActionType >(type_);
}
inline void Action::set_type(::Aseba::ThymioVPL::Action_ActionType value) {
  assert(::Aseba::ThymioVPL::Action_ActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.Action.type)
}

// optional string programStateAsXml = 2;
inline bool Action::has_programstateasxml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_programstateasxml() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_programstateasxml() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_programstateasxml() {
  if (programstateasxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_->clear();
  }
  clear_has_programstateasxml();
}
inline const ::std::string& Action::programstateasxml() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.Action.programStateAsXml)
  return *programstateasxml_;
}
inline void Action::set_programstateasxml(const ::std::string& value) {
  set_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_ = new ::std::string;
  }
  programstateasxml_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.Action.programStateAsXml)
}
inline void Action::set_programstateasxml(const char* value) {
  set_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_ = new ::std::string;
  }
  programstateasxml_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.Action.programStateAsXml)
}
inline void Action::set_programstateasxml(const char* value, size_t size) {
  set_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_ = new ::std::string;
  }
  programstateasxml_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.Action.programStateAsXml)
}
inline ::std::string* Action::mutable_programstateasxml() {
  set_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.Action.programStateAsXml)
  return programstateasxml_;
}
inline ::std::string* Action::release_programstateasxml() {
  clear_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = programstateasxml_;
    programstateasxml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Action::set_allocated_programstateasxml(::std::string* programstateasxml) {
  if (programstateasxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete programstateasxml_;
  }
  if (programstateasxml) {
    set_has_programstateasxml();
    programstateasxml_ = programstateasxml;
  } else {
    clear_has_programstateasxml();
    programstateasxml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.Action.programStateAsXml)
}

// required .Aseba.ThymioVPL.TimeStamp time = 3;
inline bool Action::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_time() {
  if (time_ != NULL) time_->::Aseba::ThymioVPL::TimeStamp::Clear();
  clear_has_time();
}
inline const ::Aseba::ThymioVPL::TimeStamp& Action::time() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.Action.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::Aseba::ThymioVPL::TimeStamp* Action::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::Aseba::ThymioVPL::TimeStamp;
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.Action.time)
  return time_;
}
inline ::Aseba::ThymioVPL::TimeStamp* Action::release_time() {
  clear_has_time();
  ::Aseba::ThymioVPL::TimeStamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Action::set_allocated_time(::Aseba::ThymioVPL::TimeStamp* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.Action.time)
}

// optional .Aseba.ThymioVPL.RowAction rowAction = 10;
inline bool Action::has_rowaction() const {
  return actual_action_case() == kRowAction;
}
inline void Action::set_has_rowaction() {
  _oneof_case_[0] = kRowAction;
}
inline void Action::clear_rowaction() {
  if (has_rowaction()) {
    delete actual_action_.rowaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::RowAction& Action::rowaction() const {
  return has_rowaction() ? *actual_action_.rowaction_
                      : ::Aseba::ThymioVPL::RowAction::default_instance();
}
inline ::Aseba::ThymioVPL::RowAction* Action::mutable_rowaction() {
  if (!has_rowaction()) {
    clear_actual_action();
    set_has_rowaction();
    actual_action_.rowaction_ = new ::Aseba::ThymioVPL::RowAction;
  }
  return actual_action_.rowaction_;
}
inline ::Aseba::ThymioVPL::RowAction* Action::release_rowaction() {
  if (has_rowaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::RowAction* temp = actual_action_.rowaction_;
    actual_action_.rowaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_rowaction(::Aseba::ThymioVPL::RowAction* rowaction) {
  clear_actual_action();
  if (rowaction) {
    set_has_rowaction();
    actual_action_.rowaction_ = rowaction;
  }
}

// optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 11;
inline bool Action::has_advancedmodeaction() const {
  return actual_action_case() == kAdvancedModeAction;
}
inline void Action::set_has_advancedmodeaction() {
  _oneof_case_[0] = kAdvancedModeAction;
}
inline void Action::clear_advancedmodeaction() {
  if (has_advancedmodeaction()) {
    delete actual_action_.advancedmodeaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::AdvancedModeAction& Action::advancedmodeaction() const {
  return has_advancedmodeaction() ? *actual_action_.advancedmodeaction_
                      : ::Aseba::ThymioVPL::AdvancedModeAction::default_instance();
}
inline ::Aseba::ThymioVPL::AdvancedModeAction* Action::mutable_advancedmodeaction() {
  if (!has_advancedmodeaction()) {
    clear_actual_action();
    set_has_advancedmodeaction();
    actual_action_.advancedmodeaction_ = new ::Aseba::ThymioVPL::AdvancedModeAction;
  }
  return actual_action_.advancedmodeaction_;
}
inline ::Aseba::ThymioVPL::AdvancedModeAction* Action::release_advancedmodeaction() {
  if (has_advancedmodeaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::AdvancedModeAction* temp = actual_action_.advancedmodeaction_;
    actual_action_.advancedmodeaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_advancedmodeaction(::Aseba::ThymioVPL::AdvancedModeAction* advancedmodeaction) {
  clear_actual_action();
  if (advancedmodeaction) {
    set_has_advancedmodeaction();
    actual_action_.advancedmodeaction_ = advancedmodeaction;
  }
}

// optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 12;
inline bool Action::has_addblockaction() const {
  return actual_action_case() == kAddBlockAction;
}
inline void Action::set_has_addblockaction() {
  _oneof_case_[0] = kAddBlockAction;
}
inline void Action::clear_addblockaction() {
  if (has_addblockaction()) {
    delete actual_action_.addblockaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::AddBlockAction& Action::addblockaction() const {
  return has_addblockaction() ? *actual_action_.addblockaction_
                      : ::Aseba::ThymioVPL::AddBlockAction::default_instance();
}
inline ::Aseba::ThymioVPL::AddBlockAction* Action::mutable_addblockaction() {
  if (!has_addblockaction()) {
    clear_actual_action();
    set_has_addblockaction();
    actual_action_.addblockaction_ = new ::Aseba::ThymioVPL::AddBlockAction;
  }
  return actual_action_.addblockaction_;
}
inline ::Aseba::ThymioVPL::AddBlockAction* Action::release_addblockaction() {
  if (has_addblockaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::AddBlockAction* temp = actual_action_.addblockaction_;
    actual_action_.addblockaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_addblockaction(::Aseba::ThymioVPL::AddBlockAction* addblockaction) {
  clear_actual_action();
  if (addblockaction) {
    set_has_addblockaction();
    actual_action_.addblockaction_ = addblockaction;
  }
}

// optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 13;
inline bool Action::has_accblockmodeaction() const {
  return actual_action_case() == kAccBlockModeAction;
}
inline void Action::set_has_accblockmodeaction() {
  _oneof_case_[0] = kAccBlockModeAction;
}
inline void Action::clear_accblockmodeaction() {
  if (has_accblockmodeaction()) {
    delete actual_action_.accblockmodeaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::AccBlockModeAction& Action::accblockmodeaction() const {
  return has_accblockmodeaction() ? *actual_action_.accblockmodeaction_
                      : ::Aseba::ThymioVPL::AccBlockModeAction::default_instance();
}
inline ::Aseba::ThymioVPL::AccBlockModeAction* Action::mutable_accblockmodeaction() {
  if (!has_accblockmodeaction()) {
    clear_actual_action();
    set_has_accblockmodeaction();
    actual_action_.accblockmodeaction_ = new ::Aseba::ThymioVPL::AccBlockModeAction;
  }
  return actual_action_.accblockmodeaction_;
}
inline ::Aseba::ThymioVPL::AccBlockModeAction* Action::release_accblockmodeaction() {
  if (has_accblockmodeaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::AccBlockModeAction* temp = actual_action_.accblockmodeaction_;
    actual_action_.accblockmodeaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_accblockmodeaction(::Aseba::ThymioVPL::AccBlockModeAction* accblockmodeaction) {
  clear_actual_action();
  if (accblockmodeaction) {
    set_has_accblockmodeaction();
    actual_action_.accblockmodeaction_ = accblockmodeaction;
  }
}

// optional .Aseba.ThymioVPL.MenuAction menuAction = 14;
inline bool Action::has_menuaction() const {
  return actual_action_case() == kMenuAction;
}
inline void Action::set_has_menuaction() {
  _oneof_case_[0] = kMenuAction;
}
inline void Action::clear_menuaction() {
  if (has_menuaction()) {
    delete actual_action_.menuaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::MenuAction& Action::menuaction() const {
  return has_menuaction() ? *actual_action_.menuaction_
                      : ::Aseba::ThymioVPL::MenuAction::default_instance();
}
inline ::Aseba::ThymioVPL::MenuAction* Action::mutable_menuaction() {
  if (!has_menuaction()) {
    clear_actual_action();
    set_has_menuaction();
    actual_action_.menuaction_ = new ::Aseba::ThymioVPL::MenuAction;
  }
  return actual_action_.menuaction_;
}
inline ::Aseba::ThymioVPL::MenuAction* Action::release_menuaction() {
  if (has_menuaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::MenuAction* temp = actual_action_.menuaction_;
    actual_action_.menuaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_menuaction(::Aseba::ThymioVPL::MenuAction* menuaction) {
  clear_actual_action();
  if (menuaction) {
    set_has_menuaction();
    actual_action_.menuaction_ = menuaction;
  }
}

// optional .Aseba.ThymioVPL.MouseAction mouseAction = 15;
inline bool Action::has_mouseaction() const {
  return actual_action_case() == kMouseAction;
}
inline void Action::set_has_mouseaction() {
  _oneof_case_[0] = kMouseAction;
}
inline void Action::clear_mouseaction() {
  if (has_mouseaction()) {
    delete actual_action_.mouseaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::MouseAction& Action::mouseaction() const {
  return has_mouseaction() ? *actual_action_.mouseaction_
                      : ::Aseba::ThymioVPL::MouseAction::default_instance();
}
inline ::Aseba::ThymioVPL::MouseAction* Action::mutable_mouseaction() {
  if (!has_mouseaction()) {
    clear_actual_action();
    set_has_mouseaction();
    actual_action_.mouseaction_ = new ::Aseba::ThymioVPL::MouseAction;
  }
  return actual_action_.mouseaction_;
}
inline ::Aseba::ThymioVPL::MouseAction* Action::release_mouseaction() {
  if (has_mouseaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::MouseAction* temp = actual_action_.mouseaction_;
    actual_action_.mouseaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_mouseaction(::Aseba::ThymioVPL::MouseAction* mouseaction) {
  clear_actual_action();
  if (mouseaction) {
    set_has_mouseaction();
    actual_action_.mouseaction_ = mouseaction;
  }
}

// optional .Aseba.ThymioVPL.DeviceAction deviceAction = 16;
inline bool Action::has_deviceaction() const {
  return actual_action_case() == kDeviceAction;
}
inline void Action::set_has_deviceaction() {
  _oneof_case_[0] = kDeviceAction;
}
inline void Action::clear_deviceaction() {
  if (has_deviceaction()) {
    delete actual_action_.deviceaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::DeviceAction& Action::deviceaction() const {
  return has_deviceaction() ? *actual_action_.deviceaction_
                      : ::Aseba::ThymioVPL::DeviceAction::default_instance();
}
inline ::Aseba::ThymioVPL::DeviceAction* Action::mutable_deviceaction() {
  if (!has_deviceaction()) {
    clear_actual_action();
    set_has_deviceaction();
    actual_action_.deviceaction_ = new ::Aseba::ThymioVPL::DeviceAction;
  }
  return actual_action_.deviceaction_;
}
inline ::Aseba::ThymioVPL::DeviceAction* Action::release_deviceaction() {
  if (has_deviceaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::DeviceAction* temp = actual_action_.deviceaction_;
    actual_action_.deviceaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_deviceaction(::Aseba::ThymioVPL::DeviceAction* deviceaction) {
  clear_actual_action();
  if (deviceaction) {
    set_has_deviceaction();
    actual_action_.deviceaction_ = deviceaction;
  }
}

// optional .Aseba.ThymioVPL.BlockAction blockAction = 17;
inline bool Action::has_blockaction() const {
  return actual_action_case() == kBlockAction;
}
inline void Action::set_has_blockaction() {
  _oneof_case_[0] = kBlockAction;
}
inline void Action::clear_blockaction() {
  if (has_blockaction()) {
    delete actual_action_.blockaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::BlockAction& Action::blockaction() const {
  return has_blockaction() ? *actual_action_.blockaction_
                      : ::Aseba::ThymioVPL::BlockAction::default_instance();
}
inline ::Aseba::ThymioVPL::BlockAction* Action::mutable_blockaction() {
  if (!has_blockaction()) {
    clear_actual_action();
    set_has_blockaction();
    actual_action_.blockaction_ = new ::Aseba::ThymioVPL::BlockAction;
  }
  return actual_action_.blockaction_;
}
inline ::Aseba::ThymioVPL::BlockAction* Action::release_blockaction() {
  if (has_blockaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::BlockAction* temp = actual_action_.blockaction_;
    actual_action_.blockaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_blockaction(::Aseba::ThymioVPL::BlockAction* blockaction) {
  clear_actual_action();
  if (blockaction) {
    set_has_blockaction();
    actual_action_.blockaction_ = blockaction;
  }
}

// optional .Aseba.ThymioVPL.TabletAction tabletAction = 18;
inline bool Action::has_tabletaction() const {
  return actual_action_case() == kTabletAction;
}
inline void Action::set_has_tabletaction() {
  _oneof_case_[0] = kTabletAction;
}
inline void Action::clear_tabletaction() {
  if (has_tabletaction()) {
    delete actual_action_.tabletaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::TabletAction& Action::tabletaction() const {
  return has_tabletaction() ? *actual_action_.tabletaction_
                      : ::Aseba::ThymioVPL::TabletAction::default_instance();
}
inline ::Aseba::ThymioVPL::TabletAction* Action::mutable_tabletaction() {
  if (!has_tabletaction()) {
    clear_actual_action();
    set_has_tabletaction();
    actual_action_.tabletaction_ = new ::Aseba::ThymioVPL::TabletAction;
  }
  return actual_action_.tabletaction_;
}
inline ::Aseba::ThymioVPL::TabletAction* Action::release_tabletaction() {
  if (has_tabletaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::TabletAction* temp = actual_action_.tabletaction_;
    actual_action_.tabletaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_tabletaction(::Aseba::ThymioVPL::TabletAction* tabletaction) {
  clear_actual_action();
  if (tabletaction) {
    set_has_tabletaction();
    actual_action_.tabletaction_ = tabletaction;
  }
}

inline bool Action::has_actual_action() {
  return actual_action_case() != ACTUAL_ACTION_NOT_SET;
}
inline void Action::clear_has_actual_action() {
  _oneof_case_[0] = ACTUAL_ACTION_NOT_SET;
}
inline Action::ActualActionCase Action::actual_action_case() const {
  return Action::ActualActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Usage

// repeated .Aseba.ThymioVPL.Action action = 1;
inline int Usage::action_size() const {
  return action_.size();
}
inline void Usage::clear_action() {
  action_.Clear();
}
inline const ::Aseba::ThymioVPL::Action& Usage::action(int index) const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.Usage.action)
  return action_.Get(index);
}
inline ::Aseba::ThymioVPL::Action* Usage::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.Usage.action)
  return action_.Mutable(index);
}
inline ::Aseba::ThymioVPL::Action* Usage::add_action() {
  // @@protoc_insertion_point(field_add:Aseba.ThymioVPL.Usage.action)
  return action_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action >&
Usage::action() const {
  // @@protoc_insertion_point(field_list:Aseba.ThymioVPL.Usage.action)
  return action_;
}
inline ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action >*
Usage::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:Aseba.ThymioVPL.Usage.action)
  return &action_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ThymioVPL
}  // namespace Aseba

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Aseba::ThymioVPL::RowAction_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::RowAction_ActionType>() {
  return ::Aseba::ThymioVPL::RowAction_ActionType_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::Action_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::Action_ActionType>() {
  return ::Aseba::ThymioVPL::Action_ActionType_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::MouseButton> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::MouseButton>() {
  return ::Aseba::ThymioVPL::MouseButton_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::BlockType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::BlockType>() {
  return ::Aseba::ThymioVPL::BlockType_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::MouseActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::MouseActionType>() {
  return ::Aseba::ThymioVPL::MouseActionType_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::MenuEntry> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::MenuEntry>() {
  return ::Aseba::ThymioVPL::MenuEntry_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::BlockActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::BlockActionType>() {
  return ::Aseba::ThymioVPL::BlockActionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UsageProfile_2eproto__INCLUDED
