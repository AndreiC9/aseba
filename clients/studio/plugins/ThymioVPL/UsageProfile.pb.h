// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UsageProfile.proto

#ifndef PROTOBUF_UsageProfile_2eproto__INCLUDED
#define PROTOBUF_UsageProfile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Aseba {
namespace ThymioVPL {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UsageProfile_2eproto();
void protobuf_AssignDesc_UsageProfile_2eproto();
void protobuf_ShutdownFile_UsageProfile_2eproto();

class RowAction;
class BlockMouseMoveAction;
class BlockMouseReleaseAction;
class ButtonDragAction;
class ActionSetDragAction;
class AccBlockModeAction;
class AdvancedModeAction;
class AddBlockAction;
class MenuAction;
class Action;
class Usage;

enum RowAction_ActionType {
  RowAction_ActionType_REMOVE = 1,
  RowAction_ActionType_INSERT = 2
};
bool RowAction_ActionType_IsValid(int value);
const RowAction_ActionType RowAction_ActionType_ActionType_MIN = RowAction_ActionType_REMOVE;
const RowAction_ActionType RowAction_ActionType_ActionType_MAX = RowAction_ActionType_INSERT;
const int RowAction_ActionType_ActionType_ARRAYSIZE = RowAction_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RowAction_ActionType_descriptor();
inline const ::std::string& RowAction_ActionType_Name(RowAction_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RowAction_ActionType_descriptor(), value);
}
inline bool RowAction_ActionType_Parse(
    const ::std::string& name, RowAction_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RowAction_ActionType>(
    RowAction_ActionType_descriptor(), name, value);
}
enum Action_ActionType {
  Action_ActionType_ROW = 1,
  Action_ActionType_BLOCK_MOUSE_MOVE = 2,
  Action_ActionType_BLOCK_MOUSE_RELEASE = 3,
  Action_ActionType_BUTTON_DRAG = 4,
  Action_ActionType_ADVANCED_MODE = 5,
  Action_ActionType_ADD_BLOCK = 6,
  Action_ActionType_ACTION_SET_DRAG = 7,
  Action_ActionType_ACC_BLOCK_MODE = 8,
  Action_ActionType_MENU = 9
};
bool Action_ActionType_IsValid(int value);
const Action_ActionType Action_ActionType_ActionType_MIN = Action_ActionType_ROW;
const Action_ActionType Action_ActionType_ActionType_MAX = Action_ActionType_MENU;
const int Action_ActionType_ActionType_ARRAYSIZE = Action_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_ActionType_descriptor();
inline const ::std::string& Action_ActionType_Name(Action_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_ActionType_descriptor(), value);
}
inline bool Action_ActionType_Parse(
    const ::std::string& name, Action_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action_ActionType>(
    Action_ActionType_descriptor(), name, value);
}
enum MouseButton {
  LEFT = 1,
  MIDDLE = 2,
  RIGHT = 3,
  NO = 4
};
bool MouseButton_IsValid(int value);
const MouseButton MouseButton_MIN = LEFT;
const MouseButton MouseButton_MAX = NO;
const int MouseButton_ARRAYSIZE = MouseButton_MAX + 1;

const ::google::protobuf::EnumDescriptor* MouseButton_descriptor();
inline const ::std::string& MouseButton_Name(MouseButton value) {
  return ::google::protobuf::internal::NameOfEnum(
    MouseButton_descriptor(), value);
}
inline bool MouseButton_Parse(
    const ::std::string& name, MouseButton* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MouseButton>(
    MouseButton_descriptor(), name, value);
}
enum BlockType {
  EVENT = 1,
  ACTION = 2
};
bool BlockType_IsValid(int value);
const BlockType BlockType_MIN = EVENT;
const BlockType BlockType_MAX = ACTION;
const int BlockType_ARRAYSIZE = BlockType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockType_descriptor();
inline const ::std::string& BlockType_Name(BlockType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockType_descriptor(), value);
}
inline bool BlockType_Parse(
    const ::std::string& name, BlockType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockType>(
    BlockType_descriptor(), name, value);
}
enum MenuEntry {
  OPEN_HELP = 1,
  SAVE = 2,
  SAVE_AS = 3,
  NEW_FILE = 4,
  OPEN_FILE = 5,
  CLOSE_FILE = 6,
  SAVE_SNAPSHOT = 7,
  STOP = 8
};
bool MenuEntry_IsValid(int value);
const MenuEntry MenuEntry_MIN = OPEN_HELP;
const MenuEntry MenuEntry_MAX = STOP;
const int MenuEntry_ARRAYSIZE = MenuEntry_MAX + 1;

const ::google::protobuf::EnumDescriptor* MenuEntry_descriptor();
inline const ::std::string& MenuEntry_Name(MenuEntry value) {
  return ::google::protobuf::internal::NameOfEnum(
    MenuEntry_descriptor(), value);
}
inline bool MenuEntry_Parse(
    const ::std::string& name, MenuEntry* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MenuEntry>(
    MenuEntry_descriptor(), name, value);
}
// ===================================================================

class RowAction : public ::google::protobuf::Message {
 public:
  RowAction();
  virtual ~RowAction();

  RowAction(const RowAction& from);

  inline RowAction& operator=(const RowAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RowAction& default_instance();

  void Swap(RowAction* other);

  // implements Message ----------------------------------------------

  RowAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RowAction& from);
  void MergeFrom(const RowAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RowAction_ActionType ActionType;
  static const ActionType REMOVE = RowAction_ActionType_REMOVE;
  static const ActionType INSERT = RowAction_ActionType_INSERT;
  static inline bool ActionType_IsValid(int value) {
    return RowAction_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    RowAction_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    RowAction_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    RowAction_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return RowAction_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return RowAction_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return RowAction_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 row = 1;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 1;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Aseba::ThymioVPL::RowAction_ActionType type() const;
  inline void set_type(::Aseba::ThymioVPL::RowAction_ActionType value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.RowAction)
 private:
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 row_;
  int type_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static RowAction* default_instance_;
};
// -------------------------------------------------------------------

class BlockMouseMoveAction : public ::google::protobuf::Message {
 public:
  BlockMouseMoveAction();
  virtual ~BlockMouseMoveAction();

  BlockMouseMoveAction(const BlockMouseMoveAction& from);

  inline BlockMouseMoveAction& operator=(const BlockMouseMoveAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMouseMoveAction& default_instance();

  void Swap(BlockMouseMoveAction* other);

  // implements Message ----------------------------------------------

  BlockMouseMoveAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMouseMoveAction& from);
  void MergeFrom(const BlockMouseMoveAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.MouseButton button = 1;
  inline bool has_button() const;
  inline void clear_button();
  static const int kButtonFieldNumber = 1;
  inline ::Aseba::ThymioVPL::MouseButton button() const;
  inline void set_button(::Aseba::ThymioVPL::MouseButton value);

  // optional string blockName = 2;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 3;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 3;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // optional double x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.BlockMouseMoveAction)
 private:
  inline void set_has_button();
  inline void clear_has_button();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* blockname_;
  ::std::string* blocktype_;
  double x_;
  double y_;
  int button_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static BlockMouseMoveAction* default_instance_;
};
// -------------------------------------------------------------------

class BlockMouseReleaseAction : public ::google::protobuf::Message {
 public:
  BlockMouseReleaseAction();
  virtual ~BlockMouseReleaseAction();

  BlockMouseReleaseAction(const BlockMouseReleaseAction& from);

  inline BlockMouseReleaseAction& operator=(const BlockMouseReleaseAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMouseReleaseAction& default_instance();

  void Swap(BlockMouseReleaseAction* other);

  // implements Message ----------------------------------------------

  BlockMouseReleaseAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMouseReleaseAction& from);
  void MergeFrom(const BlockMouseReleaseAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.MouseButton button = 1;
  inline bool has_button() const;
  inline void clear_button();
  static const int kButtonFieldNumber = 1;
  inline ::Aseba::ThymioVPL::MouseButton button() const;
  inline void set_button(::Aseba::ThymioVPL::MouseButton value);

  // optional string blockName = 2;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 3;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 3;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // optional double x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.BlockMouseReleaseAction)
 private:
  inline void set_has_button();
  inline void clear_has_button();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* blockname_;
  ::std::string* blocktype_;
  double x_;
  double y_;
  int button_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static BlockMouseReleaseAction* default_instance_;
};
// -------------------------------------------------------------------

class ButtonDragAction : public ::google::protobuf::Message {
 public:
  ButtonDragAction();
  virtual ~ButtonDragAction();

  ButtonDragAction(const ButtonDragAction& from);

  inline ButtonDragAction& operator=(const ButtonDragAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonDragAction& default_instance();

  void Swap(ButtonDragAction* other);

  // implements Message ----------------------------------------------

  ButtonDragAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ButtonDragAction& from);
  void MergeFrom(const ButtonDragAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Aseba.ThymioVPL.MouseButton button = 1;
  inline bool has_button() const;
  inline void clear_button();
  static const int kButtonFieldNumber = 1;
  inline ::Aseba::ThymioVPL::MouseButton button() const;
  inline void set_button(::Aseba::ThymioVPL::MouseButton value);

  // optional string blockName = 2;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 3;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 3;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // optional double x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.ButtonDragAction)
 private:
  inline void set_has_button();
  inline void clear_has_button();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* blockname_;
  ::std::string* blocktype_;
  double x_;
  double y_;
  int button_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static ButtonDragAction* default_instance_;
};
// -------------------------------------------------------------------

class ActionSetDragAction : public ::google::protobuf::Message {
 public:
  ActionSetDragAction();
  virtual ~ActionSetDragAction();

  ActionSetDragAction(const ActionSetDragAction& from);

  inline ActionSetDragAction& operator=(const ActionSetDragAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionSetDragAction& default_instance();

  void Swap(ActionSetDragAction* other);

  // implements Message ----------------------------------------------

  ActionSetDragAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionSetDragAction& from);
  void MergeFrom(const ActionSetDragAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Aseba.ThymioVPL.MouseButton button = 1;
  inline bool has_button() const;
  inline void clear_button();
  static const int kButtonFieldNumber = 1;
  inline ::Aseba::ThymioVPL::MouseButton button() const;
  inline void set_button(::Aseba::ThymioVPL::MouseButton value);

  // optional int32 row = 2;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 2;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // optional double x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.ActionSetDragAction)
 private:
  inline void set_has_button();
  inline void clear_has_button();
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int button_;
  ::google::protobuf::int32 row_;
  double x_;
  double y_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static ActionSetDragAction* default_instance_;
};
// -------------------------------------------------------------------

class AccBlockModeAction : public ::google::protobuf::Message {
 public:
  AccBlockModeAction();
  virtual ~AccBlockModeAction();

  AccBlockModeAction(const AccBlockModeAction& from);

  inline AccBlockModeAction& operator=(const AccBlockModeAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccBlockModeAction& default_instance();

  void Swap(AccBlockModeAction* other);

  // implements Message ----------------------------------------------

  AccBlockModeAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccBlockModeAction& from);
  void MergeFrom(const AccBlockModeAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional string blockName = 2;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 3;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 3;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.AccBlockModeAction)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* blockname_;
  ::std::string* blocktype_;
  ::google::protobuf::int32 mode_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static AccBlockModeAction* default_instance_;
};
// -------------------------------------------------------------------

class AdvancedModeAction : public ::google::protobuf::Message {
 public:
  AdvancedModeAction();
  virtual ~AdvancedModeAction();

  AdvancedModeAction(const AdvancedModeAction& from);

  inline AdvancedModeAction& operator=(const AdvancedModeAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvancedModeAction& default_instance();

  void Swap(AdvancedModeAction* other);

  // implements Message ----------------------------------------------

  AdvancedModeAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdvancedModeAction& from);
  void MergeFrom(const AdvancedModeAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isAdvanced = 1;
  inline bool has_isadvanced() const;
  inline void clear_isadvanced();
  static const int kIsAdvancedFieldNumber = 1;
  inline bool isadvanced() const;
  inline void set_isadvanced(bool value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.AdvancedModeAction)
 private:
  inline void set_has_isadvanced();
  inline void clear_has_isadvanced();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isadvanced_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static AdvancedModeAction* default_instance_;
};
// -------------------------------------------------------------------

class AddBlockAction : public ::google::protobuf::Message {
 public:
  AddBlockAction();
  virtual ~AddBlockAction();

  AddBlockAction(const AddBlockAction& from);

  inline AddBlockAction& operator=(const AddBlockAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBlockAction& default_instance();

  void Swap(AddBlockAction* other);

  // implements Message ----------------------------------------------

  AddBlockAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddBlockAction& from);
  void MergeFrom(const AddBlockAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.BlockType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Aseba::ThymioVPL::BlockType type() const;
  inline void set_type(::Aseba::ThymioVPL::BlockType value);

  // optional string blockName = 2;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  inline void set_allocated_blockname(::std::string* blockname);

  // optional string blockType = 3;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlockTypeFieldNumber = 3;
  inline const ::std::string& blocktype() const;
  inline void set_blocktype(const ::std::string& value);
  inline void set_blocktype(const char* value);
  inline void set_blocktype(const char* value, size_t size);
  inline ::std::string* mutable_blocktype();
  inline ::std::string* release_blocktype();
  inline void set_allocated_blocktype(::std::string* blocktype);

  // optional int32 row = 4;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 4;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.AddBlockAction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_row();
  inline void clear_has_row();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* blockname_;
  int type_;
  ::google::protobuf::int32 row_;
  ::std::string* blocktype_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static AddBlockAction* default_instance_;
};
// -------------------------------------------------------------------

class MenuAction : public ::google::protobuf::Message {
 public:
  MenuAction();
  virtual ~MenuAction();

  MenuAction(const MenuAction& from);

  inline MenuAction& operator=(const MenuAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MenuAction& default_instance();

  void Swap(MenuAction* other);

  // implements Message ----------------------------------------------

  MenuAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MenuAction& from);
  void MergeFrom(const MenuAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.MenuEntry entry = 1;
  inline bool has_entry() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline ::Aseba::ThymioVPL::MenuEntry entry() const;
  inline void set_entry(::Aseba::ThymioVPL::MenuEntry value);

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.MenuAction)
 private:
  inline void set_has_entry();
  inline void clear_has_entry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int entry_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static MenuAction* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  enum ActualActionCase {
    kRowAction = 10,
    kBlockMouseMoveAction = 11,
    kBlockMouseReleaseAction = 12,
    kButtonDragAction = 13,
    kAdvancedModeAction = 14,
    kAddBlockAction = 15,
    kActionSetDragAction = 16,
    kAccBlockModeAction = 17,
    kMenuAction = 18,
    ACTUAL_ACTION_NOT_SET = 0,
  };

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Action_ActionType ActionType;
  static const ActionType ROW = Action_ActionType_ROW;
  static const ActionType BLOCK_MOUSE_MOVE = Action_ActionType_BLOCK_MOUSE_MOVE;
  static const ActionType BLOCK_MOUSE_RELEASE = Action_ActionType_BLOCK_MOUSE_RELEASE;
  static const ActionType BUTTON_DRAG = Action_ActionType_BUTTON_DRAG;
  static const ActionType ADVANCED_MODE = Action_ActionType_ADVANCED_MODE;
  static const ActionType ADD_BLOCK = Action_ActionType_ADD_BLOCK;
  static const ActionType ACTION_SET_DRAG = Action_ActionType_ACTION_SET_DRAG;
  static const ActionType ACC_BLOCK_MODE = Action_ActionType_ACC_BLOCK_MODE;
  static const ActionType MENU = Action_ActionType_MENU;
  static inline bool ActionType_IsValid(int value) {
    return Action_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    Action_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    Action_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    Action_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return Action_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return Action_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return Action_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Aseba.ThymioVPL.Action.ActionType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Aseba::ThymioVPL::Action_ActionType type() const;
  inline void set_type(::Aseba::ThymioVPL::Action_ActionType value);

  // optional string programStateAsXml = 2;
  inline bool has_programstateasxml() const;
  inline void clear_programstateasxml();
  static const int kProgramStateAsXmlFieldNumber = 2;
  inline const ::std::string& programstateasxml() const;
  inline void set_programstateasxml(const ::std::string& value);
  inline void set_programstateasxml(const char* value);
  inline void set_programstateasxml(const char* value, size_t size);
  inline ::std::string* mutable_programstateasxml();
  inline ::std::string* release_programstateasxml();
  inline void set_allocated_programstateasxml(::std::string* programstateasxml);

  // optional .Aseba.ThymioVPL.RowAction rowAction = 10;
  inline bool has_rowaction() const;
  inline void clear_rowaction();
  static const int kRowActionFieldNumber = 10;
  inline const ::Aseba::ThymioVPL::RowAction& rowaction() const;
  inline ::Aseba::ThymioVPL::RowAction* mutable_rowaction();
  inline ::Aseba::ThymioVPL::RowAction* release_rowaction();
  inline void set_allocated_rowaction(::Aseba::ThymioVPL::RowAction* rowaction);

  // optional .Aseba.ThymioVPL.BlockMouseMoveAction blockMouseMoveAction = 11;
  inline bool has_blockmousemoveaction() const;
  inline void clear_blockmousemoveaction();
  static const int kBlockMouseMoveActionFieldNumber = 11;
  inline const ::Aseba::ThymioVPL::BlockMouseMoveAction& blockmousemoveaction() const;
  inline ::Aseba::ThymioVPL::BlockMouseMoveAction* mutable_blockmousemoveaction();
  inline ::Aseba::ThymioVPL::BlockMouseMoveAction* release_blockmousemoveaction();
  inline void set_allocated_blockmousemoveaction(::Aseba::ThymioVPL::BlockMouseMoveAction* blockmousemoveaction);

  // optional .Aseba.ThymioVPL.BlockMouseReleaseAction blockMouseReleaseAction = 12;
  inline bool has_blockmousereleaseaction() const;
  inline void clear_blockmousereleaseaction();
  static const int kBlockMouseReleaseActionFieldNumber = 12;
  inline const ::Aseba::ThymioVPL::BlockMouseReleaseAction& blockmousereleaseaction() const;
  inline ::Aseba::ThymioVPL::BlockMouseReleaseAction* mutable_blockmousereleaseaction();
  inline ::Aseba::ThymioVPL::BlockMouseReleaseAction* release_blockmousereleaseaction();
  inline void set_allocated_blockmousereleaseaction(::Aseba::ThymioVPL::BlockMouseReleaseAction* blockmousereleaseaction);

  // optional .Aseba.ThymioVPL.ButtonDragAction buttonDragAction = 13;
  inline bool has_buttondragaction() const;
  inline void clear_buttondragaction();
  static const int kButtonDragActionFieldNumber = 13;
  inline const ::Aseba::ThymioVPL::ButtonDragAction& buttondragaction() const;
  inline ::Aseba::ThymioVPL::ButtonDragAction* mutable_buttondragaction();
  inline ::Aseba::ThymioVPL::ButtonDragAction* release_buttondragaction();
  inline void set_allocated_buttondragaction(::Aseba::ThymioVPL::ButtonDragAction* buttondragaction);

  // optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 14;
  inline bool has_advancedmodeaction() const;
  inline void clear_advancedmodeaction();
  static const int kAdvancedModeActionFieldNumber = 14;
  inline const ::Aseba::ThymioVPL::AdvancedModeAction& advancedmodeaction() const;
  inline ::Aseba::ThymioVPL::AdvancedModeAction* mutable_advancedmodeaction();
  inline ::Aseba::ThymioVPL::AdvancedModeAction* release_advancedmodeaction();
  inline void set_allocated_advancedmodeaction(::Aseba::ThymioVPL::AdvancedModeAction* advancedmodeaction);

  // optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 15;
  inline bool has_addblockaction() const;
  inline void clear_addblockaction();
  static const int kAddBlockActionFieldNumber = 15;
  inline const ::Aseba::ThymioVPL::AddBlockAction& addblockaction() const;
  inline ::Aseba::ThymioVPL::AddBlockAction* mutable_addblockaction();
  inline ::Aseba::ThymioVPL::AddBlockAction* release_addblockaction();
  inline void set_allocated_addblockaction(::Aseba::ThymioVPL::AddBlockAction* addblockaction);

  // optional .Aseba.ThymioVPL.ActionSetDragAction actionSetDragAction = 16;
  inline bool has_actionsetdragaction() const;
  inline void clear_actionsetdragaction();
  static const int kActionSetDragActionFieldNumber = 16;
  inline const ::Aseba::ThymioVPL::ActionSetDragAction& actionsetdragaction() const;
  inline ::Aseba::ThymioVPL::ActionSetDragAction* mutable_actionsetdragaction();
  inline ::Aseba::ThymioVPL::ActionSetDragAction* release_actionsetdragaction();
  inline void set_allocated_actionsetdragaction(::Aseba::ThymioVPL::ActionSetDragAction* actionsetdragaction);

  // optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 17;
  inline bool has_accblockmodeaction() const;
  inline void clear_accblockmodeaction();
  static const int kAccBlockModeActionFieldNumber = 17;
  inline const ::Aseba::ThymioVPL::AccBlockModeAction& accblockmodeaction() const;
  inline ::Aseba::ThymioVPL::AccBlockModeAction* mutable_accblockmodeaction();
  inline ::Aseba::ThymioVPL::AccBlockModeAction* release_accblockmodeaction();
  inline void set_allocated_accblockmodeaction(::Aseba::ThymioVPL::AccBlockModeAction* accblockmodeaction);

  // optional .Aseba.ThymioVPL.MenuAction menuAction = 18;
  inline bool has_menuaction() const;
  inline void clear_menuaction();
  static const int kMenuActionFieldNumber = 18;
  inline const ::Aseba::ThymioVPL::MenuAction& menuaction() const;
  inline ::Aseba::ThymioVPL::MenuAction* mutable_menuaction();
  inline ::Aseba::ThymioVPL::MenuAction* release_menuaction();
  inline void set_allocated_menuaction(::Aseba::ThymioVPL::MenuAction* menuaction);

  inline ActualActionCase actual_action_case() const;
  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.Action)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_programstateasxml();
  inline void clear_has_programstateasxml();
  inline void set_has_rowaction();
  inline void set_has_blockmousemoveaction();
  inline void set_has_blockmousereleaseaction();
  inline void set_has_buttondragaction();
  inline void set_has_advancedmodeaction();
  inline void set_has_addblockaction();
  inline void set_has_actionsetdragaction();
  inline void set_has_accblockmodeaction();
  inline void set_has_menuaction();

  inline bool has_actual_action();
  void clear_actual_action();
  inline void clear_has_actual_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* programstateasxml_;
  int type_;
  union ActualActionUnion {
    ::Aseba::ThymioVPL::RowAction* rowaction_;
    ::Aseba::ThymioVPL::BlockMouseMoveAction* blockmousemoveaction_;
    ::Aseba::ThymioVPL::BlockMouseReleaseAction* blockmousereleaseaction_;
    ::Aseba::ThymioVPL::ButtonDragAction* buttondragaction_;
    ::Aseba::ThymioVPL::AdvancedModeAction* advancedmodeaction_;
    ::Aseba::ThymioVPL::AddBlockAction* addblockaction_;
    ::Aseba::ThymioVPL::ActionSetDragAction* actionsetdragaction_;
    ::Aseba::ThymioVPL::AccBlockModeAction* accblockmodeaction_;
    ::Aseba::ThymioVPL::MenuAction* menuaction_;
  } actual_action_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class Usage : public ::google::protobuf::Message {
 public:
  Usage();
  virtual ~Usage();

  Usage(const Usage& from);

  inline Usage& operator=(const Usage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Usage& default_instance();

  void Swap(Usage* other);

  // implements Message ----------------------------------------------

  Usage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Usage& from);
  void MergeFrom(const Usage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Aseba.ThymioVPL.Action action = 1;
  inline int action_size() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline const ::Aseba::ThymioVPL::Action& action(int index) const;
  inline ::Aseba::ThymioVPL::Action* mutable_action(int index);
  inline ::Aseba::ThymioVPL::Action* add_action();
  inline const ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action >&
      action() const;
  inline ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action >*
      mutable_action();

  // @@protoc_insertion_point(class_scope:Aseba.ThymioVPL.Usage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action > action_;
  friend void  protobuf_AddDesc_UsageProfile_2eproto();
  friend void protobuf_AssignDesc_UsageProfile_2eproto();
  friend void protobuf_ShutdownFile_UsageProfile_2eproto();

  void InitAsDefaultInstance();
  static Usage* default_instance_;
};
// ===================================================================


// ===================================================================

// RowAction

// optional int32 row = 1;
inline bool RowAction::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RowAction::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RowAction::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RowAction::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 RowAction::row() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.RowAction.row)
  return row_;
}
inline void RowAction::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.RowAction.row)
}

// required .Aseba.ThymioVPL.RowAction.ActionType type = 2;
inline bool RowAction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RowAction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RowAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RowAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Aseba::ThymioVPL::RowAction_ActionType RowAction::type() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.RowAction.type)
  return static_cast< ::Aseba::ThymioVPL::RowAction_ActionType >(type_);
}
inline void RowAction::set_type(::Aseba::ThymioVPL::RowAction_ActionType value) {
  assert(::Aseba::ThymioVPL::RowAction_ActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.RowAction.type)
}

// -------------------------------------------------------------------

// BlockMouseMoveAction

// required .Aseba.ThymioVPL.MouseButton button = 1;
inline bool BlockMouseMoveAction::has_button() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockMouseMoveAction::set_has_button() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockMouseMoveAction::clear_has_button() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockMouseMoveAction::clear_button() {
  button_ = 1;
  clear_has_button();
}
inline ::Aseba::ThymioVPL::MouseButton BlockMouseMoveAction::button() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseMoveAction.button)
  return static_cast< ::Aseba::ThymioVPL::MouseButton >(button_);
}
inline void BlockMouseMoveAction::set_button(::Aseba::ThymioVPL::MouseButton value) {
  assert(::Aseba::ThymioVPL::MouseButton_IsValid(value));
  set_has_button();
  button_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseMoveAction.button)
}

// optional string blockName = 2;
inline bool BlockMouseMoveAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockMouseMoveAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockMouseMoveAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockMouseMoveAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& BlockMouseMoveAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseMoveAction.blockName)
  return *blockname_;
}
inline void BlockMouseMoveAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseMoveAction.blockName)
}
inline void BlockMouseMoveAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.BlockMouseMoveAction.blockName)
}
inline void BlockMouseMoveAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.BlockMouseMoveAction.blockName)
}
inline ::std::string* BlockMouseMoveAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.BlockMouseMoveAction.blockName)
  return blockname_;
}
inline ::std::string* BlockMouseMoveAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlockMouseMoveAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.BlockMouseMoveAction.blockName)
}

// optional string blockType = 3;
inline bool BlockMouseMoveAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockMouseMoveAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockMouseMoveAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockMouseMoveAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& BlockMouseMoveAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseMoveAction.blockType)
  return *blocktype_;
}
inline void BlockMouseMoveAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseMoveAction.blockType)
}
inline void BlockMouseMoveAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.BlockMouseMoveAction.blockType)
}
inline void BlockMouseMoveAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.BlockMouseMoveAction.blockType)
}
inline ::std::string* BlockMouseMoveAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.BlockMouseMoveAction.blockType)
  return blocktype_;
}
inline ::std::string* BlockMouseMoveAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlockMouseMoveAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.BlockMouseMoveAction.blockType)
}

// optional double x = 4;
inline bool BlockMouseMoveAction::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockMouseMoveAction::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockMouseMoveAction::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockMouseMoveAction::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double BlockMouseMoveAction::x() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseMoveAction.x)
  return x_;
}
inline void BlockMouseMoveAction::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseMoveAction.x)
}

// optional double y = 5;
inline bool BlockMouseMoveAction::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockMouseMoveAction::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockMouseMoveAction::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockMouseMoveAction::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double BlockMouseMoveAction::y() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseMoveAction.y)
  return y_;
}
inline void BlockMouseMoveAction::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseMoveAction.y)
}

// -------------------------------------------------------------------

// BlockMouseReleaseAction

// required .Aseba.ThymioVPL.MouseButton button = 1;
inline bool BlockMouseReleaseAction::has_button() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockMouseReleaseAction::set_has_button() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockMouseReleaseAction::clear_has_button() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockMouseReleaseAction::clear_button() {
  button_ = 1;
  clear_has_button();
}
inline ::Aseba::ThymioVPL::MouseButton BlockMouseReleaseAction::button() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseReleaseAction.button)
  return static_cast< ::Aseba::ThymioVPL::MouseButton >(button_);
}
inline void BlockMouseReleaseAction::set_button(::Aseba::ThymioVPL::MouseButton value) {
  assert(::Aseba::ThymioVPL::MouseButton_IsValid(value));
  set_has_button();
  button_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseReleaseAction.button)
}

// optional string blockName = 2;
inline bool BlockMouseReleaseAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockMouseReleaseAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockMouseReleaseAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockMouseReleaseAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& BlockMouseReleaseAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseReleaseAction.blockName)
  return *blockname_;
}
inline void BlockMouseReleaseAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseReleaseAction.blockName)
}
inline void BlockMouseReleaseAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.BlockMouseReleaseAction.blockName)
}
inline void BlockMouseReleaseAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.BlockMouseReleaseAction.blockName)
}
inline ::std::string* BlockMouseReleaseAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.BlockMouseReleaseAction.blockName)
  return blockname_;
}
inline ::std::string* BlockMouseReleaseAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlockMouseReleaseAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.BlockMouseReleaseAction.blockName)
}

// optional string blockType = 3;
inline bool BlockMouseReleaseAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockMouseReleaseAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockMouseReleaseAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockMouseReleaseAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& BlockMouseReleaseAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseReleaseAction.blockType)
  return *blocktype_;
}
inline void BlockMouseReleaseAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseReleaseAction.blockType)
}
inline void BlockMouseReleaseAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.BlockMouseReleaseAction.blockType)
}
inline void BlockMouseReleaseAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.BlockMouseReleaseAction.blockType)
}
inline ::std::string* BlockMouseReleaseAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.BlockMouseReleaseAction.blockType)
  return blocktype_;
}
inline ::std::string* BlockMouseReleaseAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlockMouseReleaseAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.BlockMouseReleaseAction.blockType)
}

// optional double x = 4;
inline bool BlockMouseReleaseAction::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockMouseReleaseAction::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockMouseReleaseAction::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockMouseReleaseAction::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double BlockMouseReleaseAction::x() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseReleaseAction.x)
  return x_;
}
inline void BlockMouseReleaseAction::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseReleaseAction.x)
}

// optional double y = 5;
inline bool BlockMouseReleaseAction::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockMouseReleaseAction::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockMouseReleaseAction::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockMouseReleaseAction::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double BlockMouseReleaseAction::y() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.BlockMouseReleaseAction.y)
  return y_;
}
inline void BlockMouseReleaseAction::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.BlockMouseReleaseAction.y)
}

// -------------------------------------------------------------------

// ButtonDragAction

// optional .Aseba.ThymioVPL.MouseButton button = 1;
inline bool ButtonDragAction::has_button() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ButtonDragAction::set_has_button() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ButtonDragAction::clear_has_button() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ButtonDragAction::clear_button() {
  button_ = 1;
  clear_has_button();
}
inline ::Aseba::ThymioVPL::MouseButton ButtonDragAction::button() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ButtonDragAction.button)
  return static_cast< ::Aseba::ThymioVPL::MouseButton >(button_);
}
inline void ButtonDragAction::set_button(::Aseba::ThymioVPL::MouseButton value) {
  assert(::Aseba::ThymioVPL::MouseButton_IsValid(value));
  set_has_button();
  button_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ButtonDragAction.button)
}

// optional string blockName = 2;
inline bool ButtonDragAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ButtonDragAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ButtonDragAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ButtonDragAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& ButtonDragAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ButtonDragAction.blockName)
  return *blockname_;
}
inline void ButtonDragAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ButtonDragAction.blockName)
}
inline void ButtonDragAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.ButtonDragAction.blockName)
}
inline void ButtonDragAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.ButtonDragAction.blockName)
}
inline ::std::string* ButtonDragAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.ButtonDragAction.blockName)
  return blockname_;
}
inline ::std::string* ButtonDragAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ButtonDragAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.ButtonDragAction.blockName)
}

// optional string blockType = 3;
inline bool ButtonDragAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ButtonDragAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ButtonDragAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ButtonDragAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& ButtonDragAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ButtonDragAction.blockType)
  return *blocktype_;
}
inline void ButtonDragAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ButtonDragAction.blockType)
}
inline void ButtonDragAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.ButtonDragAction.blockType)
}
inline void ButtonDragAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.ButtonDragAction.blockType)
}
inline ::std::string* ButtonDragAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.ButtonDragAction.blockType)
  return blocktype_;
}
inline ::std::string* ButtonDragAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ButtonDragAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.ButtonDragAction.blockType)
}

// optional double x = 4;
inline bool ButtonDragAction::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ButtonDragAction::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ButtonDragAction::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ButtonDragAction::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double ButtonDragAction::x() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ButtonDragAction.x)
  return x_;
}
inline void ButtonDragAction::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ButtonDragAction.x)
}

// optional double y = 5;
inline bool ButtonDragAction::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ButtonDragAction::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ButtonDragAction::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ButtonDragAction::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double ButtonDragAction::y() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ButtonDragAction.y)
  return y_;
}
inline void ButtonDragAction::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ButtonDragAction.y)
}

// -------------------------------------------------------------------

// ActionSetDragAction

// optional .Aseba.ThymioVPL.MouseButton button = 1;
inline bool ActionSetDragAction::has_button() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionSetDragAction::set_has_button() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionSetDragAction::clear_has_button() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionSetDragAction::clear_button() {
  button_ = 1;
  clear_has_button();
}
inline ::Aseba::ThymioVPL::MouseButton ActionSetDragAction::button() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ActionSetDragAction.button)
  return static_cast< ::Aseba::ThymioVPL::MouseButton >(button_);
}
inline void ActionSetDragAction::set_button(::Aseba::ThymioVPL::MouseButton value) {
  assert(::Aseba::ThymioVPL::MouseButton_IsValid(value));
  set_has_button();
  button_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ActionSetDragAction.button)
}

// optional int32 row = 2;
inline bool ActionSetDragAction::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionSetDragAction::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionSetDragAction::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionSetDragAction::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 ActionSetDragAction::row() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ActionSetDragAction.row)
  return row_;
}
inline void ActionSetDragAction::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ActionSetDragAction.row)
}

// optional double x = 3;
inline bool ActionSetDragAction::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionSetDragAction::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionSetDragAction::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionSetDragAction::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double ActionSetDragAction::x() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ActionSetDragAction.x)
  return x_;
}
inline void ActionSetDragAction::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ActionSetDragAction.x)
}

// optional double y = 4;
inline bool ActionSetDragAction::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionSetDragAction::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionSetDragAction::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionSetDragAction::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double ActionSetDragAction::y() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.ActionSetDragAction.y)
  return y_;
}
inline void ActionSetDragAction::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.ActionSetDragAction.y)
}

// -------------------------------------------------------------------

// AccBlockModeAction

// required int32 mode = 1;
inline bool AccBlockModeAction::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccBlockModeAction::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccBlockModeAction::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccBlockModeAction::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 AccBlockModeAction::mode() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AccBlockModeAction.mode)
  return mode_;
}
inline void AccBlockModeAction::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AccBlockModeAction.mode)
}

// optional string blockName = 2;
inline bool AccBlockModeAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccBlockModeAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccBlockModeAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccBlockModeAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& AccBlockModeAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AccBlockModeAction.blockName)
  return *blockname_;
}
inline void AccBlockModeAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AccBlockModeAction.blockName)
}
inline void AccBlockModeAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.AccBlockModeAction.blockName)
}
inline void AccBlockModeAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.AccBlockModeAction.blockName)
}
inline ::std::string* AccBlockModeAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.AccBlockModeAction.blockName)
  return blockname_;
}
inline ::std::string* AccBlockModeAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccBlockModeAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.AccBlockModeAction.blockName)
}

// optional string blockType = 3;
inline bool AccBlockModeAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccBlockModeAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccBlockModeAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccBlockModeAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& AccBlockModeAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AccBlockModeAction.blockType)
  return *blocktype_;
}
inline void AccBlockModeAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AccBlockModeAction.blockType)
}
inline void AccBlockModeAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.AccBlockModeAction.blockType)
}
inline void AccBlockModeAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.AccBlockModeAction.blockType)
}
inline ::std::string* AccBlockModeAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.AccBlockModeAction.blockType)
  return blocktype_;
}
inline ::std::string* AccBlockModeAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccBlockModeAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.AccBlockModeAction.blockType)
}

// -------------------------------------------------------------------

// AdvancedModeAction

// required bool isAdvanced = 1;
inline bool AdvancedModeAction::has_isadvanced() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdvancedModeAction::set_has_isadvanced() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdvancedModeAction::clear_has_isadvanced() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdvancedModeAction::clear_isadvanced() {
  isadvanced_ = false;
  clear_has_isadvanced();
}
inline bool AdvancedModeAction::isadvanced() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AdvancedModeAction.isAdvanced)
  return isadvanced_;
}
inline void AdvancedModeAction::set_isadvanced(bool value) {
  set_has_isadvanced();
  isadvanced_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AdvancedModeAction.isAdvanced)
}

// -------------------------------------------------------------------

// AddBlockAction

// required .Aseba.ThymioVPL.BlockType type = 1;
inline bool AddBlockAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddBlockAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddBlockAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddBlockAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Aseba::ThymioVPL::BlockType AddBlockAction::type() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AddBlockAction.type)
  return static_cast< ::Aseba::ThymioVPL::BlockType >(type_);
}
inline void AddBlockAction::set_type(::Aseba::ThymioVPL::BlockType value) {
  assert(::Aseba::ThymioVPL::BlockType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AddBlockAction.type)
}

// optional string blockName = 2;
inline bool AddBlockAction::has_blockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddBlockAction::set_has_blockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddBlockAction::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddBlockAction::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& AddBlockAction::blockname() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AddBlockAction.blockName)
  return *blockname_;
}
inline void AddBlockAction::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AddBlockAction.blockName)
}
inline void AddBlockAction::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.AddBlockAction.blockName)
}
inline void AddBlockAction::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.AddBlockAction.blockName)
}
inline ::std::string* AddBlockAction::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blockname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.AddBlockAction.blockName)
  return blockname_;
}
inline ::std::string* AddBlockAction::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddBlockAction::set_allocated_blockname(::std::string* blockname) {
  if (blockname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blockname_;
  }
  if (blockname) {
    set_has_blockname();
    blockname_ = blockname;
  } else {
    clear_has_blockname();
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.AddBlockAction.blockName)
}

// optional string blockType = 3;
inline bool AddBlockAction::has_blocktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddBlockAction::set_has_blocktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddBlockAction::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddBlockAction::clear_blocktype() {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_->clear();
  }
  clear_has_blocktype();
}
inline const ::std::string& AddBlockAction::blocktype() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AddBlockAction.blockType)
  return *blocktype_;
}
inline void AddBlockAction::set_blocktype(const ::std::string& value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AddBlockAction.blockType)
}
inline void AddBlockAction::set_blocktype(const char* value) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.AddBlockAction.blockType)
}
inline void AddBlockAction::set_blocktype(const char* value, size_t size) {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  blocktype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.AddBlockAction.blockType)
}
inline ::std::string* AddBlockAction::mutable_blocktype() {
  set_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blocktype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.AddBlockAction.blockType)
  return blocktype_;
}
inline ::std::string* AddBlockAction::release_blocktype() {
  clear_has_blocktype();
  if (blocktype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blocktype_;
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddBlockAction::set_allocated_blocktype(::std::string* blocktype) {
  if (blocktype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blocktype_;
  }
  if (blocktype) {
    set_has_blocktype();
    blocktype_ = blocktype;
  } else {
    clear_has_blocktype();
    blocktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.AddBlockAction.blockType)
}

// optional int32 row = 4;
inline bool AddBlockAction::has_row() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddBlockAction::set_has_row() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddBlockAction::clear_has_row() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddBlockAction::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 AddBlockAction::row() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.AddBlockAction.row)
  return row_;
}
inline void AddBlockAction::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.AddBlockAction.row)
}

// -------------------------------------------------------------------

// MenuAction

// required .Aseba.ThymioVPL.MenuEntry entry = 1;
inline bool MenuAction::has_entry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MenuAction::set_has_entry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MenuAction::clear_has_entry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MenuAction::clear_entry() {
  entry_ = 1;
  clear_has_entry();
}
inline ::Aseba::ThymioVPL::MenuEntry MenuAction::entry() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.MenuAction.entry)
  return static_cast< ::Aseba::ThymioVPL::MenuEntry >(entry_);
}
inline void MenuAction::set_entry(::Aseba::ThymioVPL::MenuEntry value) {
  assert(::Aseba::ThymioVPL::MenuEntry_IsValid(value));
  set_has_entry();
  entry_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.MenuAction.entry)
}

// -------------------------------------------------------------------

// Action

// required .Aseba.ThymioVPL.Action.ActionType type = 1;
inline bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Aseba::ThymioVPL::Action_ActionType Action::type() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.Action.type)
  return static_cast< ::Aseba::ThymioVPL::Action_ActionType >(type_);
}
inline void Action::set_type(::Aseba::ThymioVPL::Action_ActionType value) {
  assert(::Aseba::ThymioVPL::Action_ActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.Action.type)
}

// optional string programStateAsXml = 2;
inline bool Action::has_programstateasxml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_programstateasxml() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_programstateasxml() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_programstateasxml() {
  if (programstateasxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_->clear();
  }
  clear_has_programstateasxml();
}
inline const ::std::string& Action::programstateasxml() const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.Action.programStateAsXml)
  return *programstateasxml_;
}
inline void Action::set_programstateasxml(const ::std::string& value) {
  set_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_ = new ::std::string;
  }
  programstateasxml_->assign(value);
  // @@protoc_insertion_point(field_set:Aseba.ThymioVPL.Action.programStateAsXml)
}
inline void Action::set_programstateasxml(const char* value) {
  set_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_ = new ::std::string;
  }
  programstateasxml_->assign(value);
  // @@protoc_insertion_point(field_set_char:Aseba.ThymioVPL.Action.programStateAsXml)
}
inline void Action::set_programstateasxml(const char* value, size_t size) {
  set_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_ = new ::std::string;
  }
  programstateasxml_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aseba.ThymioVPL.Action.programStateAsXml)
}
inline ::std::string* Action::mutable_programstateasxml() {
  set_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    programstateasxml_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.Action.programStateAsXml)
  return programstateasxml_;
}
inline ::std::string* Action::release_programstateasxml() {
  clear_has_programstateasxml();
  if (programstateasxml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = programstateasxml_;
    programstateasxml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Action::set_allocated_programstateasxml(::std::string* programstateasxml) {
  if (programstateasxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete programstateasxml_;
  }
  if (programstateasxml) {
    set_has_programstateasxml();
    programstateasxml_ = programstateasxml;
  } else {
    clear_has_programstateasxml();
    programstateasxml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Aseba.ThymioVPL.Action.programStateAsXml)
}

// optional .Aseba.ThymioVPL.RowAction rowAction = 10;
inline bool Action::has_rowaction() const {
  return actual_action_case() == kRowAction;
}
inline void Action::set_has_rowaction() {
  _oneof_case_[0] = kRowAction;
}
inline void Action::clear_rowaction() {
  if (has_rowaction()) {
    delete actual_action_.rowaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::RowAction& Action::rowaction() const {
  return has_rowaction() ? *actual_action_.rowaction_
                      : ::Aseba::ThymioVPL::RowAction::default_instance();
}
inline ::Aseba::ThymioVPL::RowAction* Action::mutable_rowaction() {
  if (!has_rowaction()) {
    clear_actual_action();
    set_has_rowaction();
    actual_action_.rowaction_ = new ::Aseba::ThymioVPL::RowAction;
  }
  return actual_action_.rowaction_;
}
inline ::Aseba::ThymioVPL::RowAction* Action::release_rowaction() {
  if (has_rowaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::RowAction* temp = actual_action_.rowaction_;
    actual_action_.rowaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_rowaction(::Aseba::ThymioVPL::RowAction* rowaction) {
  clear_actual_action();
  if (rowaction) {
    set_has_rowaction();
    actual_action_.rowaction_ = rowaction;
  }
}

// optional .Aseba.ThymioVPL.BlockMouseMoveAction blockMouseMoveAction = 11;
inline bool Action::has_blockmousemoveaction() const {
  return actual_action_case() == kBlockMouseMoveAction;
}
inline void Action::set_has_blockmousemoveaction() {
  _oneof_case_[0] = kBlockMouseMoveAction;
}
inline void Action::clear_blockmousemoveaction() {
  if (has_blockmousemoveaction()) {
    delete actual_action_.blockmousemoveaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::BlockMouseMoveAction& Action::blockmousemoveaction() const {
  return has_blockmousemoveaction() ? *actual_action_.blockmousemoveaction_
                      : ::Aseba::ThymioVPL::BlockMouseMoveAction::default_instance();
}
inline ::Aseba::ThymioVPL::BlockMouseMoveAction* Action::mutable_blockmousemoveaction() {
  if (!has_blockmousemoveaction()) {
    clear_actual_action();
    set_has_blockmousemoveaction();
    actual_action_.blockmousemoveaction_ = new ::Aseba::ThymioVPL::BlockMouseMoveAction;
  }
  return actual_action_.blockmousemoveaction_;
}
inline ::Aseba::ThymioVPL::BlockMouseMoveAction* Action::release_blockmousemoveaction() {
  if (has_blockmousemoveaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::BlockMouseMoveAction* temp = actual_action_.blockmousemoveaction_;
    actual_action_.blockmousemoveaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_blockmousemoveaction(::Aseba::ThymioVPL::BlockMouseMoveAction* blockmousemoveaction) {
  clear_actual_action();
  if (blockmousemoveaction) {
    set_has_blockmousemoveaction();
    actual_action_.blockmousemoveaction_ = blockmousemoveaction;
  }
}

// optional .Aseba.ThymioVPL.BlockMouseReleaseAction blockMouseReleaseAction = 12;
inline bool Action::has_blockmousereleaseaction() const {
  return actual_action_case() == kBlockMouseReleaseAction;
}
inline void Action::set_has_blockmousereleaseaction() {
  _oneof_case_[0] = kBlockMouseReleaseAction;
}
inline void Action::clear_blockmousereleaseaction() {
  if (has_blockmousereleaseaction()) {
    delete actual_action_.blockmousereleaseaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::BlockMouseReleaseAction& Action::blockmousereleaseaction() const {
  return has_blockmousereleaseaction() ? *actual_action_.blockmousereleaseaction_
                      : ::Aseba::ThymioVPL::BlockMouseReleaseAction::default_instance();
}
inline ::Aseba::ThymioVPL::BlockMouseReleaseAction* Action::mutable_blockmousereleaseaction() {
  if (!has_blockmousereleaseaction()) {
    clear_actual_action();
    set_has_blockmousereleaseaction();
    actual_action_.blockmousereleaseaction_ = new ::Aseba::ThymioVPL::BlockMouseReleaseAction;
  }
  return actual_action_.blockmousereleaseaction_;
}
inline ::Aseba::ThymioVPL::BlockMouseReleaseAction* Action::release_blockmousereleaseaction() {
  if (has_blockmousereleaseaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::BlockMouseReleaseAction* temp = actual_action_.blockmousereleaseaction_;
    actual_action_.blockmousereleaseaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_blockmousereleaseaction(::Aseba::ThymioVPL::BlockMouseReleaseAction* blockmousereleaseaction) {
  clear_actual_action();
  if (blockmousereleaseaction) {
    set_has_blockmousereleaseaction();
    actual_action_.blockmousereleaseaction_ = blockmousereleaseaction;
  }
}

// optional .Aseba.ThymioVPL.ButtonDragAction buttonDragAction = 13;
inline bool Action::has_buttondragaction() const {
  return actual_action_case() == kButtonDragAction;
}
inline void Action::set_has_buttondragaction() {
  _oneof_case_[0] = kButtonDragAction;
}
inline void Action::clear_buttondragaction() {
  if (has_buttondragaction()) {
    delete actual_action_.buttondragaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::ButtonDragAction& Action::buttondragaction() const {
  return has_buttondragaction() ? *actual_action_.buttondragaction_
                      : ::Aseba::ThymioVPL::ButtonDragAction::default_instance();
}
inline ::Aseba::ThymioVPL::ButtonDragAction* Action::mutable_buttondragaction() {
  if (!has_buttondragaction()) {
    clear_actual_action();
    set_has_buttondragaction();
    actual_action_.buttondragaction_ = new ::Aseba::ThymioVPL::ButtonDragAction;
  }
  return actual_action_.buttondragaction_;
}
inline ::Aseba::ThymioVPL::ButtonDragAction* Action::release_buttondragaction() {
  if (has_buttondragaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::ButtonDragAction* temp = actual_action_.buttondragaction_;
    actual_action_.buttondragaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_buttondragaction(::Aseba::ThymioVPL::ButtonDragAction* buttondragaction) {
  clear_actual_action();
  if (buttondragaction) {
    set_has_buttondragaction();
    actual_action_.buttondragaction_ = buttondragaction;
  }
}

// optional .Aseba.ThymioVPL.AdvancedModeAction advancedModeAction = 14;
inline bool Action::has_advancedmodeaction() const {
  return actual_action_case() == kAdvancedModeAction;
}
inline void Action::set_has_advancedmodeaction() {
  _oneof_case_[0] = kAdvancedModeAction;
}
inline void Action::clear_advancedmodeaction() {
  if (has_advancedmodeaction()) {
    delete actual_action_.advancedmodeaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::AdvancedModeAction& Action::advancedmodeaction() const {
  return has_advancedmodeaction() ? *actual_action_.advancedmodeaction_
                      : ::Aseba::ThymioVPL::AdvancedModeAction::default_instance();
}
inline ::Aseba::ThymioVPL::AdvancedModeAction* Action::mutable_advancedmodeaction() {
  if (!has_advancedmodeaction()) {
    clear_actual_action();
    set_has_advancedmodeaction();
    actual_action_.advancedmodeaction_ = new ::Aseba::ThymioVPL::AdvancedModeAction;
  }
  return actual_action_.advancedmodeaction_;
}
inline ::Aseba::ThymioVPL::AdvancedModeAction* Action::release_advancedmodeaction() {
  if (has_advancedmodeaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::AdvancedModeAction* temp = actual_action_.advancedmodeaction_;
    actual_action_.advancedmodeaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_advancedmodeaction(::Aseba::ThymioVPL::AdvancedModeAction* advancedmodeaction) {
  clear_actual_action();
  if (advancedmodeaction) {
    set_has_advancedmodeaction();
    actual_action_.advancedmodeaction_ = advancedmodeaction;
  }
}

// optional .Aseba.ThymioVPL.AddBlockAction addBlockAction = 15;
inline bool Action::has_addblockaction() const {
  return actual_action_case() == kAddBlockAction;
}
inline void Action::set_has_addblockaction() {
  _oneof_case_[0] = kAddBlockAction;
}
inline void Action::clear_addblockaction() {
  if (has_addblockaction()) {
    delete actual_action_.addblockaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::AddBlockAction& Action::addblockaction() const {
  return has_addblockaction() ? *actual_action_.addblockaction_
                      : ::Aseba::ThymioVPL::AddBlockAction::default_instance();
}
inline ::Aseba::ThymioVPL::AddBlockAction* Action::mutable_addblockaction() {
  if (!has_addblockaction()) {
    clear_actual_action();
    set_has_addblockaction();
    actual_action_.addblockaction_ = new ::Aseba::ThymioVPL::AddBlockAction;
  }
  return actual_action_.addblockaction_;
}
inline ::Aseba::ThymioVPL::AddBlockAction* Action::release_addblockaction() {
  if (has_addblockaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::AddBlockAction* temp = actual_action_.addblockaction_;
    actual_action_.addblockaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_addblockaction(::Aseba::ThymioVPL::AddBlockAction* addblockaction) {
  clear_actual_action();
  if (addblockaction) {
    set_has_addblockaction();
    actual_action_.addblockaction_ = addblockaction;
  }
}

// optional .Aseba.ThymioVPL.ActionSetDragAction actionSetDragAction = 16;
inline bool Action::has_actionsetdragaction() const {
  return actual_action_case() == kActionSetDragAction;
}
inline void Action::set_has_actionsetdragaction() {
  _oneof_case_[0] = kActionSetDragAction;
}
inline void Action::clear_actionsetdragaction() {
  if (has_actionsetdragaction()) {
    delete actual_action_.actionsetdragaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::ActionSetDragAction& Action::actionsetdragaction() const {
  return has_actionsetdragaction() ? *actual_action_.actionsetdragaction_
                      : ::Aseba::ThymioVPL::ActionSetDragAction::default_instance();
}
inline ::Aseba::ThymioVPL::ActionSetDragAction* Action::mutable_actionsetdragaction() {
  if (!has_actionsetdragaction()) {
    clear_actual_action();
    set_has_actionsetdragaction();
    actual_action_.actionsetdragaction_ = new ::Aseba::ThymioVPL::ActionSetDragAction;
  }
  return actual_action_.actionsetdragaction_;
}
inline ::Aseba::ThymioVPL::ActionSetDragAction* Action::release_actionsetdragaction() {
  if (has_actionsetdragaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::ActionSetDragAction* temp = actual_action_.actionsetdragaction_;
    actual_action_.actionsetdragaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_actionsetdragaction(::Aseba::ThymioVPL::ActionSetDragAction* actionsetdragaction) {
  clear_actual_action();
  if (actionsetdragaction) {
    set_has_actionsetdragaction();
    actual_action_.actionsetdragaction_ = actionsetdragaction;
  }
}

// optional .Aseba.ThymioVPL.AccBlockModeAction accBlockModeAction = 17;
inline bool Action::has_accblockmodeaction() const {
  return actual_action_case() == kAccBlockModeAction;
}
inline void Action::set_has_accblockmodeaction() {
  _oneof_case_[0] = kAccBlockModeAction;
}
inline void Action::clear_accblockmodeaction() {
  if (has_accblockmodeaction()) {
    delete actual_action_.accblockmodeaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::AccBlockModeAction& Action::accblockmodeaction() const {
  return has_accblockmodeaction() ? *actual_action_.accblockmodeaction_
                      : ::Aseba::ThymioVPL::AccBlockModeAction::default_instance();
}
inline ::Aseba::ThymioVPL::AccBlockModeAction* Action::mutable_accblockmodeaction() {
  if (!has_accblockmodeaction()) {
    clear_actual_action();
    set_has_accblockmodeaction();
    actual_action_.accblockmodeaction_ = new ::Aseba::ThymioVPL::AccBlockModeAction;
  }
  return actual_action_.accblockmodeaction_;
}
inline ::Aseba::ThymioVPL::AccBlockModeAction* Action::release_accblockmodeaction() {
  if (has_accblockmodeaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::AccBlockModeAction* temp = actual_action_.accblockmodeaction_;
    actual_action_.accblockmodeaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_accblockmodeaction(::Aseba::ThymioVPL::AccBlockModeAction* accblockmodeaction) {
  clear_actual_action();
  if (accblockmodeaction) {
    set_has_accblockmodeaction();
    actual_action_.accblockmodeaction_ = accblockmodeaction;
  }
}

// optional .Aseba.ThymioVPL.MenuAction menuAction = 18;
inline bool Action::has_menuaction() const {
  return actual_action_case() == kMenuAction;
}
inline void Action::set_has_menuaction() {
  _oneof_case_[0] = kMenuAction;
}
inline void Action::clear_menuaction() {
  if (has_menuaction()) {
    delete actual_action_.menuaction_;
    clear_has_actual_action();
  }
}
inline const ::Aseba::ThymioVPL::MenuAction& Action::menuaction() const {
  return has_menuaction() ? *actual_action_.menuaction_
                      : ::Aseba::ThymioVPL::MenuAction::default_instance();
}
inline ::Aseba::ThymioVPL::MenuAction* Action::mutable_menuaction() {
  if (!has_menuaction()) {
    clear_actual_action();
    set_has_menuaction();
    actual_action_.menuaction_ = new ::Aseba::ThymioVPL::MenuAction;
  }
  return actual_action_.menuaction_;
}
inline ::Aseba::ThymioVPL::MenuAction* Action::release_menuaction() {
  if (has_menuaction()) {
    clear_has_actual_action();
    ::Aseba::ThymioVPL::MenuAction* temp = actual_action_.menuaction_;
    actual_action_.menuaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Action::set_allocated_menuaction(::Aseba::ThymioVPL::MenuAction* menuaction) {
  clear_actual_action();
  if (menuaction) {
    set_has_menuaction();
    actual_action_.menuaction_ = menuaction;
  }
}

inline bool Action::has_actual_action() {
  return actual_action_case() != ACTUAL_ACTION_NOT_SET;
}
inline void Action::clear_has_actual_action() {
  _oneof_case_[0] = ACTUAL_ACTION_NOT_SET;
}
inline Action::ActualActionCase Action::actual_action_case() const {
  return Action::ActualActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Usage

// repeated .Aseba.ThymioVPL.Action action = 1;
inline int Usage::action_size() const {
  return action_.size();
}
inline void Usage::clear_action() {
  action_.Clear();
}
inline const ::Aseba::ThymioVPL::Action& Usage::action(int index) const {
  // @@protoc_insertion_point(field_get:Aseba.ThymioVPL.Usage.action)
  return action_.Get(index);
}
inline ::Aseba::ThymioVPL::Action* Usage::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:Aseba.ThymioVPL.Usage.action)
  return action_.Mutable(index);
}
inline ::Aseba::ThymioVPL::Action* Usage::add_action() {
  // @@protoc_insertion_point(field_add:Aseba.ThymioVPL.Usage.action)
  return action_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action >&
Usage::action() const {
  // @@protoc_insertion_point(field_list:Aseba.ThymioVPL.Usage.action)
  return action_;
}
inline ::google::protobuf::RepeatedPtrField< ::Aseba::ThymioVPL::Action >*
Usage::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:Aseba.ThymioVPL.Usage.action)
  return &action_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ThymioVPL
}  // namespace Aseba

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Aseba::ThymioVPL::RowAction_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::RowAction_ActionType>() {
  return ::Aseba::ThymioVPL::RowAction_ActionType_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::Action_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::Action_ActionType>() {
  return ::Aseba::ThymioVPL::Action_ActionType_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::MouseButton> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::MouseButton>() {
  return ::Aseba::ThymioVPL::MouseButton_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::BlockType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::BlockType>() {
  return ::Aseba::ThymioVPL::BlockType_descriptor();
}
template <> struct is_proto_enum< ::Aseba::ThymioVPL::MenuEntry> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aseba::ThymioVPL::MenuEntry>() {
  return ::Aseba::ThymioVPL::MenuEntry_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UsageProfile_2eproto__INCLUDED
