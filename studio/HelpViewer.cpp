/*
	Aseba - an event-based framework for distributed robot control
	Copyright (C) 2007--2011:
		Stephane Magnenat <stephane at magnenat dot net>
		(http://stephane.magnenat.net)
		and other contributors, see authors.txt for details
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU Lesser General Public License as published
	by the Free Software Foundation, version 3 of the License.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public License
	along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include "HelpViewer.h"

#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QFile>
#include <QIODevice>
#include <QUrl>
#include <QVariant>

#include <HelpViewer.moc>

namespace Aseba
{
	HelpViewer::HelpViewer(QWidget* parent):
		QWidget(parent)
	{
		// navigation buttons
		previous = new QPushButton(tr("Previous"));
		previous->setEnabled(false);
		next = new QPushButton(tr("Next"));
		next->setEnabled(false);
		home = new QPushButton(tr("Home"));
		QHBoxLayout* buttonLayout = new QHBoxLayout();
		buttonLayout->addWidget(previous);
		buttonLayout->addWidget(home);
		buttonLayout->addWidget(next);
		buttonLayout->addStretch();

		// QTextBrower
		viewer = new QTextBrowser();
		viewer->setReadOnly(true);
		// set the stylesheet
		QFile file(":/doc/aseba.css");
		file.open(QIODevice::ReadOnly | QIODevice::Text);
		viewer->document()->addResource(QTextDocument::StyleSheetResource, QUrl( "aseba.css" ), QVariant(file.readAll()) );
		// set default language
		setLanguage("en");

		// main layout
		QVBoxLayout* mainLayout = new QVBoxLayout();
		mainLayout->addLayout(buttonLayout);
		mainLayout->addWidget(viewer);

		setLayout(mainLayout);

		// connect
		connect(previous, SIGNAL(clicked()), this, SLOT(previousClicked()));
		connect(next, SIGNAL(clicked()), this, SLOT(nextClicked()));
		connect(home, SIGNAL(clicked()), this, SLOT(homeClicked()));
		connect(viewer, SIGNAL(backwardAvailable(bool)), this, SLOT(backwardAvailable(bool)));
		connect(viewer, SIGNAL(forwardAvailable(bool)), this, SLOT(forwardAvailable(bool)));

		resize(800, 500);
		setWindowTitle(tr("Aseba Studio Help"));
	}

	void HelpViewer::setLanguage(QString lang)
	{
		this->language = lang;
	}

	void HelpViewer::showHelp(helpType type)
	{
		QString filename = "qrc:/doc/" + this->language + "_";
		switch (type)
		{
			// help files generated by the wikidot parser
			case HelpViewer::USERMANUAL:
				filename += "asebausermanual.html";
				break;
			case HelpViewer::STUDIO:
				filename += "asebastudio.html";
				break;
			case HelpViewer::LANGUAGE:
				filename += "asebalanguage.html";
				break;
		}

		viewer->setSource(filename);
		viewer->moveCursor(QTextCursor::Start);
		viewer->setWindowTitle(tr("Aseba Studio Help"));
		this->show();
	}

	void HelpViewer::previousClicked()
	{
		viewer->backward();
	}

	void HelpViewer::backwardAvailable(bool state)
	{
		previous->setEnabled(state);
	}

	void HelpViewer::nextClicked()
	{
		viewer->forward();
	}

	void HelpViewer::forwardAvailable(bool state)
	{
		next->setEnabled(state);
	}

	void HelpViewer::homeClicked()
	{
		showHelp(HelpViewer::USERMANUAL);
	}
}

